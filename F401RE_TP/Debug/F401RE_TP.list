
F401RE_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000946c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  08009610  08009610  00019610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cc0  08009cc0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009cc0  08009cc0  00019cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cc8  08009cc8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cc8  08009cc8  00019cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ccc  08009ccc  00019ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001e4  08009eb4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08009eb4  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcaa  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e35  00000000  00000000  0002debe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0002fcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  000309a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172c6  00000000  00000000  00031590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd3b  00000000  00000000  00048856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f14c  00000000  00000000  00056591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e56dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c58  00000000  00000000  000e5730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080095f4 	.word	0x080095f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080095f4 	.word	0x080095f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fcb8 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f822 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 f9a0 	bl	8001358 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001018:	f000 f974 	bl	8001304 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800101c:	f000 f886 	bl	800112c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001020:	f000 f8d6 	bl	80011d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001024:	f000 f920 	bl	8001268 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <main+0x40>)
 800102a:	f001 fd31 	bl	8002a90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <main+0x44>)
 8001030:	f001 fd2e 	bl	8002a90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <main+0x48>)
 8001036:	f001 fcd1 	bl	80029dc <HAL_TIM_Base_Start>
  test(24, 4.216);
 800103a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001054 <main+0x4c>
 800103e:	2018      	movs	r0, #24
 8001040:	f002 fd16 	bl	8003a70 <test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001044:	e7fe      	b.n	8001044 <main+0x3c>
 8001046:	bf00      	nop
 8001048:	20000200 	.word	0x20000200
 800104c:	20000290 	.word	0x20000290
 8001050:	20000248 	.word	0x20000248
 8001054:	4086e979 	.word	0x4086e979

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f002 fe02 	bl	8003c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <SystemClock_Config+0xcc>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a4:	4a20      	ldr	r2, [pc, #128]	; (8001128 <SystemClock_Config+0xd0>)
 80010a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2310      	movs	r3, #16
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010cc:	2308      	movs	r3, #8
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010d0:	2354      	movs	r3, #84	; 0x54
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010d8:	2307      	movs	r3, #7
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 ff93 	bl	800200c <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010ec:	f000 f9aa 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2102      	movs	r1, #2
 800110c:	4618      	mov	r0, r3
 800110e:	f001 f9f5 	bl	80024fc <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001118:	f000 f994 	bl	8001444 <Error_Handler>
  }
}
 800111c:	bf00      	nop
 800111e:	3750      	adds	r7, #80	; 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_TIM1_Init+0x9c>)
 800114a:	4a20      	ldr	r2, [pc, #128]	; (80011cc <MX_TIM1_Init+0xa0>)
 800114c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001150:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001154:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000-1;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_TIM1_Init+0x9c>)
 800115e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001162:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_TIM1_Init+0x9c>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001178:	f001 fbe0 	bl	800293c <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001182:	f000 f95f 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001194:	f001 fe15 	bl	8002dc2 <HAL_TIM_ConfigClockSource>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800119e:	f000 f951 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_TIM1_Init+0x9c>)
 80011b0:	f002 f81a 	bl	80031e8 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011ba:	f000 f943 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000200 	.word	0x20000200
 80011cc:	40010000 	.word	0x40010000

080011d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_TIM2_Init+0x94>)
 80011ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_TIM2_Init+0x94>)
 80011f6:	2253      	movs	r2, #83	; 0x53
 80011f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM2_Init+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_TIM2_Init+0x94>)
 8001202:	f04f 32ff 	mov.w	r2, #4294967295
 8001206:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_TIM2_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_TIM2_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001214:	4813      	ldr	r0, [pc, #76]	; (8001264 <MX_TIM2_Init+0x94>)
 8001216:	f001 fb91 	bl	800293c <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001220:	f000 f910 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001228:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4619      	mov	r1, r3
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <MX_TIM2_Init+0x94>)
 8001232:	f001 fdc6 	bl	8002dc2 <HAL_TIM_ConfigClockSource>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800123c:	f000 f902 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_TIM2_Init+0x94>)
 800124e:	f001 ffcb 	bl	80031e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001258:	f000 f8f4 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000248 	.word	0x20000248

08001268 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_TIM3_Init+0x94>)
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <MX_TIM3_Init+0x98>)
 8001288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM3_Init+0x94>)
 800128c:	2253      	movs	r2, #83	; 0x53
 800128e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM3_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_TIM3_Init+0x94>)
 8001298:	f240 32e7 	movw	r2, #999	; 0x3e7
 800129c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_TIM3_Init+0x94>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_TIM3_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <MX_TIM3_Init+0x94>)
 80012ac:	f001 fb46 	bl	800293c <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012b6:	f000 f8c5 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_TIM3_Init+0x94>)
 80012c8:	f001 fd7b 	bl	8002dc2 <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f000 f8b7 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_TIM3_Init+0x94>)
 80012e4:	f001 ff80 	bl	80031e8 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80012ee:	f000 f8a9 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000290 	.word	0x20000290
 8001300:	40000400 	.word	0x40000400

08001304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_USART2_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800133c:	f001 ffd6 	bl	80032ec <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f000 f87d 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002d8 	.word	0x200002d8
 8001354:	40004400 	.word	0x40004400

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <MX_GPIO_Init+0xe0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a30      	ldr	r2, [pc, #192]	; (8001438 <MX_GPIO_Init+0xe0>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <MX_GPIO_Init+0xe0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MX_GPIO_Init+0xe0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a29      	ldr	r2, [pc, #164]	; (8001438 <MX_GPIO_Init+0xe0>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <MX_GPIO_Init+0xe0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a22      	ldr	r2, [pc, #136]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2120      	movs	r1, #32
 80013e2:	4816      	ldr	r0, [pc, #88]	; (800143c <MX_GPIO_Init+0xe4>)
 80013e4:	f000 fdd4 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4810      	ldr	r0, [pc, #64]	; (8001440 <MX_GPIO_Init+0xe8>)
 8001400:	f000 fc42 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001404:	2320      	movs	r3, #32
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4808      	ldr	r0, [pc, #32]	; (800143c <MX_GPIO_Init+0xe4>)
 800141c:	f000 fc34 	bl	8001c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2028      	movs	r0, #40	; 0x28
 8001426:	f000 fbf8 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800142a:	2028      	movs	r0, #40	; 0x28
 800142c:	f000 fc11 	bl	8001c52 <HAL_NVIC_EnableIRQ>

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020800 	.word	0x40020800

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	e7fe      	b.n	800144c <Error_Handler+0x8>
	...

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_MspInit+0x4c>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_MspInit+0x4c>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800148e:	2007      	movs	r0, #7
 8001490:	f000 fbb8 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a26      	ldr	r2, [pc, #152]	; (8001548 <HAL_TIM_Base_MspInit+0xa8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d116      	bne.n	80014e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a24      	ldr	r2, [pc, #144]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2019      	movs	r0, #25
 80014d4:	f000 fba1 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014d8:	2019      	movs	r0, #25
 80014da:	f000 fbba 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014de:	e02e      	b.n	800153e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e8:	d10e      	bne.n	8001508 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a16      	ldr	r2, [pc, #88]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
}
 8001506:	e01a      	b.n	800153e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_TIM_Base_MspInit+0xb0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d115      	bne.n	800153e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a0c      	ldr	r2, [pc, #48]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	201d      	movs	r0, #29
 8001534:	f000 fb71 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001538:	201d      	movs	r0, #29
 800153a:	f000 fb8a 	bl	8001c52 <HAL_NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40010000 	.word	0x40010000
 800154c:	40023800 	.word	0x40023800
 8001550:	40000400 	.word	0x40000400

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_UART_MspInit+0x84>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12b      	bne.n	80015ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_UART_MspInit+0x88>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_UART_MspInit+0x88>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_UART_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ae:	230c      	movs	r3, #12
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015be:	2307      	movs	r3, #7
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <HAL_UART_MspInit+0x8c>)
 80015ca:	f000 fb5d 	bl	8001c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40004400 	.word	0x40004400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 f9f8 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  if(GPIOA->ODR & 0x00000020){
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f003 0320 	and.w	r3, r3, #32
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <TIM1_UP_TIM10_IRQHandler+0x1e>
	  GPIOA->ODR=GPIOA->ODR & 0xFFFFFFDF;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800164e:	f023 0320 	bic.w	r3, r3, #32
 8001652:	6153      	str	r3, [r2, #20]
 8001654:	e005      	b.n	8001662 <TIM1_UP_TIM10_IRQHandler+0x2a>
  }
  else{
	  GPIOA->ODR=GPIOA->ODR | 0x00000020;
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <TIM1_UP_TIM10_IRQHandler+0x34>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	6153      	str	r3, [r2, #20]
  }
  //SERIAL_SendInt(TIM2->CNT);
  //SERIAL_SendNL();
  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001664:	f001 faa5 	bl	8002bb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40020000 	.word	0x40020000
 8001670:	20000200 	.word	0x20000200
 8001674:	00000000 	.word	0x00000000

08001678 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  int counter = TIM2->CNT;
 800167e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	60fb      	str	r3, [r7, #12]
  int tenH = 5*sin(2*3.14*2*counter);
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7fe ff54 	bl	8000534 <__aeabi_i2d>
 800168c:	a32a      	add	r3, pc, #168	; (adr r3, 8001738 <TIM3_IRQHandler+0xc0>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe ffb9 	bl	8000608 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	ec43 2b17 	vmov	d7, r2, r3
 800169e:	eeb0 0a47 	vmov.f32	s0, s14
 80016a2:	eef0 0a67 	vmov.f32	s1, s15
 80016a6:	f006 ff5b 	bl	8008560 <sin>
 80016aa:	ec51 0b10 	vmov	r0, r1, d0
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <TIM3_IRQHandler+0xb8>)
 80016b4:	f7fe ffa8 	bl	8000608 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa52 	bl	8000b68 <__aeabi_d2iz>
 80016c4:	4603      	mov	r3, r0
 80016c6:	60bb      	str	r3, [r7, #8]
  int twoH = 2*sin(2*3.14*10*counter);
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7fe ff33 	bl	8000534 <__aeabi_i2d>
 80016ce:	a316      	add	r3, pc, #88	; (adr r3, 8001728 <TIM3_IRQHandler+0xb0>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe ff98 	bl	8000608 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	ec43 2b17 	vmov	d7, r2, r3
 80016e0:	eeb0 0a47 	vmov.f32	s0, s14
 80016e4:	eef0 0a67 	vmov.f32	s1, s15
 80016e8:	f006 ff3a 	bl	8008560 <sin>
 80016ec:	ec51 0b10 	vmov	r0, r1, d0
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	f7fe fdd2 	bl	800029c <__adddf3>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa32 	bl	8000b68 <__aeabi_d2iz>
 8001704:	4603      	mov	r3, r0
 8001706:	607b      	str	r3, [r7, #4]
  SERIAL_SendToPlot(&tenH,&twoH, 2);
 8001708:	1d39      	adds	r1, r7, #4
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	2202      	movs	r2, #2
 8001710:	4618      	mov	r0, r3
 8001712:	f002 fa4b 	bl	8003bac <SERIAL_SendToPlot>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001716:	4807      	ldr	r0, [pc, #28]	; (8001734 <TIM3_IRQHandler+0xbc>)
 8001718:	f001 fa4b 	bl	8002bb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	f3af 8000 	nop.w
 8001728:	66666667 	.word	0x66666667
 800172c:	404f6666 	.word	0x404f6666
 8001730:	40140000 	.word	0x40140000
 8001734:	20000290 	.word	0x20000290
 8001738:	51eb851f 	.word	0x51eb851f
 800173c:	40291eb8 	.word	0x40291eb8

08001740 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static int trig = 1;
  if(trig){
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <EXTI15_10_IRQHandler+0x34>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <EXTI15_10_IRQHandler+0x1a>
	  HAL_TIM_Base_Stop_IT(&htim3);
 800174c:	480a      	ldr	r0, [pc, #40]	; (8001778 <EXTI15_10_IRQHandler+0x38>)
 800174e:	f001 fa01 	bl	8002b54 <HAL_TIM_Base_Stop_IT>
	  trig = 0;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <EXTI15_10_IRQHandler+0x34>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e005      	b.n	8001766 <EXTI15_10_IRQHandler+0x26>
  }
  else{
	  HAL_TIM_Base_Start_IT(&htim3);
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <EXTI15_10_IRQHandler+0x38>)
 800175c:	f001 f998 	bl	8002a90 <HAL_TIM_Base_Start_IT>
	  trig = 1;
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <EXTI15_10_IRQHandler+0x34>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001766:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800176a:	f000 fc2b 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000000 	.word	0x20000000
 8001778:	20000290 	.word	0x20000290

0800177c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
	return 1;
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_kill>:

int _kill(int pid, int sig)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001796:	f002 fa41 	bl	8003c1c <__errno>
 800179a:	4603      	mov	r3, r0
 800179c:	2216      	movs	r2, #22
 800179e:	601a      	str	r2, [r3, #0]
	return -1;
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_exit>:

void _exit (int status)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ffe7 	bl	800178c <_kill>
	while (1) {}		/* Make sure we hang here */
 80017be:	e7fe      	b.n	80017be <_exit+0x12>

080017c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e00a      	b.n	80017e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017d2:	f3af 8000 	nop.w
 80017d6:	4601      	mov	r1, r0
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	60ba      	str	r2, [r7, #8]
 80017de:	b2ca      	uxtb	r2, r1
 80017e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbf0      	blt.n	80017d2 <_read+0x12>
	}

return len;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	e009      	b.n	8001820 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	60ba      	str	r2, [r7, #8]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbf1      	blt.n	800180c <_write+0x12>
	}
	return len;
 8001828:	687b      	ldr	r3, [r7, #4]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_close>:

int _close(int file)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	return -1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185a:	605a      	str	r2, [r3, #4]
	return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_isatty>:

int _isatty(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	return 1;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
	return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <_sbrk+0x5c>)
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <_sbrk+0x60>)
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <_sbrk+0x64>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <_sbrk+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d207      	bcs.n	80018dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018cc:	f002 f9a6 	bl	8003c1c <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	220c      	movs	r2, #12
 80018d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	e009      	b.n	80018f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <_sbrk+0x64>)
 80018ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20018000 	.word	0x20018000
 80018fc:	00000400 	.word	0x00000400
 8001900:	2000031c 	.word	0x2000031c
 8001904:	20000348 	.word	0x20000348

08001908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <SystemInit+0x20>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <SystemInit+0x20>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800192c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001964 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001932:	490e      	ldr	r1, [pc, #56]	; (800196c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001938:	e002      	b.n	8001940 <LoopCopyDataInit>

0800193a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800193c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193e:	3304      	adds	r3, #4

08001940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001944:	d3f9      	bcc.n	800193a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001948:	4c0b      	ldr	r4, [pc, #44]	; (8001978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800194c:	e001      	b.n	8001952 <LoopFillZerobss>

0800194e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001950:	3204      	adds	r2, #4

08001952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001954:	d3fb      	bcc.n	800194e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001956:	f7ff ffd7 	bl	8001908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195a:	f002 f965 	bl	8003c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195e:	f7ff fb53 	bl	8001008 <main>
  bx  lr    
 8001962:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001964:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001970:	08009cd0 	.word	0x08009cd0
  ldr r2, =_sbss
 8001974:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001978:	20000348 	.word	0x20000348

0800197c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_Init+0x40>)
 800198a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_Init+0x40>)
 8001996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_Init+0x40>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 f92b 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f000 f808 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b4:	f7ff fd4c 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x54>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019da:	fbb3 f3f1 	udiv	r3, r3, r1
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f943 	bl	8001c6e <HAL_SYSTICK_Config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00e      	b.n	8001a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d80a      	bhi.n	8001a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f000 f90b 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <HAL_InitTick+0x5c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	2000000c 	.word	0x2000000c
 8001a20:	20000008 	.word	0x20000008

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	20000320 	.word	0x20000320

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000320 	.word	0x20000320

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <__NVIC_EnableIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff8e 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff29 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff3e 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff8e 	bl	8001b58 <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5d 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff31 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffa2 	bl	8001bc0 <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e159      	b.n	8001f58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f040 8148 	bne.w	8001f52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d005      	beq.n	8001cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d130      	bne.n	8001d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d10:	2201      	movs	r2, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 0201 	and.w	r2, r3, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d017      	beq.n	8001d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d123      	bne.n	8001dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	08da      	lsrs	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3208      	adds	r2, #8
 8001d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	08da      	lsrs	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3208      	adds	r2, #8
 8001dc6:	69b9      	ldr	r1, [r7, #24]
 8001dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80a2 	beq.w	8001f52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b57      	ldr	r3, [pc, #348]	; (8001f70 <HAL_GPIO_Init+0x2e8>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a56      	ldr	r2, [pc, #344]	; (8001f70 <HAL_GPIO_Init+0x2e8>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b54      	ldr	r3, [pc, #336]	; (8001f70 <HAL_GPIO_Init+0x2e8>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2a:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <HAL_GPIO_Init+0x2ec>)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a49      	ldr	r2, [pc, #292]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d019      	beq.n	8001e8a <HAL_GPIO_Init+0x202>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a48      	ldr	r2, [pc, #288]	; (8001f7c <HAL_GPIO_Init+0x2f4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_GPIO_Init+0x1fe>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a47      	ldr	r2, [pc, #284]	; (8001f80 <HAL_GPIO_Init+0x2f8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00d      	beq.n	8001e82 <HAL_GPIO_Init+0x1fa>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a46      	ldr	r2, [pc, #280]	; (8001f84 <HAL_GPIO_Init+0x2fc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <HAL_GPIO_Init+0x1f6>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a45      	ldr	r2, [pc, #276]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_GPIO_Init+0x1f2>
 8001e76:	2304      	movs	r3, #4
 8001e78:	e008      	b.n	8001e8c <HAL_GPIO_Init+0x204>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	e006      	b.n	8001e8c <HAL_GPIO_Init+0x204>
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e004      	b.n	8001e8c <HAL_GPIO_Init+0x204>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_Init+0x204>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_GPIO_Init+0x204>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	f002 0203 	and.w	r2, r2, #3
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	4093      	lsls	r3, r2
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e9c:	4935      	ldr	r1, [pc, #212]	; (8001f74 <HAL_GPIO_Init+0x2ec>)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eaa:	4b38      	ldr	r3, [pc, #224]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ece:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef8:	4a24      	ldr	r2, [pc, #144]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f22:	4a1a      	ldr	r2, [pc, #104]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f28:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3301      	adds	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2b0f      	cmp	r3, #15
 8001f5c:	f67f aea2 	bls.w	8001ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40013800 	.word	0x40013800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40020c00 	.word	0x40020c00
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40013c00 	.word	0x40013c00

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f806 	bl	8001ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e267      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d075      	beq.n	8002116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800202a:	4b88      	ldr	r3, [pc, #544]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b04      	cmp	r3, #4
 8002034:	d00c      	beq.n	8002050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002036:	4b85      	ldr	r3, [pc, #532]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203e:	2b08      	cmp	r3, #8
 8002040:	d112      	bne.n	8002068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002042:	4b82      	ldr	r3, [pc, #520]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800204e:	d10b      	bne.n	8002068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	4b7e      	ldr	r3, [pc, #504]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d05b      	beq.n	8002114 <HAL_RCC_OscConfig+0x108>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d157      	bne.n	8002114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e242      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d106      	bne.n	8002080 <HAL_RCC_OscConfig+0x74>
 8002072:	4b76      	ldr	r3, [pc, #472]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a75      	ldr	r2, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e01d      	b.n	80020bc <HAL_RCC_OscConfig+0xb0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x98>
 800208a:	4b70      	ldr	r3, [pc, #448]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6f      	ldr	r2, [pc, #444]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b6d      	ldr	r3, [pc, #436]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6c      	ldr	r2, [pc, #432]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0xb0>
 80020a4:	4b69      	ldr	r3, [pc, #420]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a68      	ldr	r2, [pc, #416]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80020aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b66      	ldr	r3, [pc, #408]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a65      	ldr	r2, [pc, #404]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80020b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fcc2 	bl	8001a4c <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff fcbe 	bl	8001a4c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e207      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b5b      	ldr	r3, [pc, #364]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0xc0>
 80020ea:	e014      	b.n	8002116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fcae 	bl	8001a4c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff fcaa 	bl	8001a4c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1f3      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	4b51      	ldr	r3, [pc, #324]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0xe8>
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d063      	beq.n	80021ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002122:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002136:	2b08      	cmp	r3, #8
 8002138:	d11c      	bne.n	8002174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d116      	bne.n	8002174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	4b41      	ldr	r3, [pc, #260]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_RCC_OscConfig+0x152>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e1c7      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215e:	4b3b      	ldr	r3, [pc, #236]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4937      	ldr	r1, [pc, #220]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	e03a      	b.n	80021ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b34      	ldr	r3, [pc, #208]	; (8002250 <HAL_RCC_OscConfig+0x244>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff fc63 	bl	8001a4c <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff fc5f 	bl	8001a4c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1a8      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4925      	ldr	r1, [pc, #148]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
 80021bc:	e015      	b.n	80021ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCC_OscConfig+0x244>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7ff fc42 	bl	8001a4c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff fc3e 	bl	8001a4c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e187      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d036      	beq.n	8002264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d016      	beq.n	800222c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_RCC_OscConfig+0x248>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7ff fc22 	bl	8001a4c <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220c:	f7ff fc1e 	bl	8001a4c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e167      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x200>
 800222a:	e01b      	b.n	8002264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_OscConfig+0x248>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7ff fc0b 	bl	8001a4c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002238:	e00e      	b.n	8002258 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223a:	f7ff fc07 	bl	8001a4c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d907      	bls.n	8002258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e150      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
 800224c:	40023800 	.word	0x40023800
 8002250:	42470000 	.word	0x42470000
 8002254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002258:	4b88      	ldr	r3, [pc, #544]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800225a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ea      	bne.n	800223a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8097 	beq.w	80023a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002276:	4b81      	ldr	r3, [pc, #516]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	4b7d      	ldr	r3, [pc, #500]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a7c      	ldr	r2, [pc, #496]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b7a      	ldr	r3, [pc, #488]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229e:	2301      	movs	r3, #1
 80022a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b77      	ldr	r3, [pc, #476]	; (8002480 <HAL_RCC_OscConfig+0x474>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d118      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ae:	4b74      	ldr	r3, [pc, #464]	; (8002480 <HAL_RCC_OscConfig+0x474>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a73      	ldr	r2, [pc, #460]	; (8002480 <HAL_RCC_OscConfig+0x474>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ba:	f7ff fbc7 	bl	8001a4c <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c2:	f7ff fbc3 	bl	8001a4c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e10c      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <HAL_RCC_OscConfig+0x474>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x2ea>
 80022e8:	4b64      	ldr	r3, [pc, #400]	; (800247c <HAL_RCC_OscConfig+0x470>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a63      	ldr	r2, [pc, #396]	; (800247c <HAL_RCC_OscConfig+0x470>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	e01c      	b.n	8002330 <HAL_RCC_OscConfig+0x324>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b05      	cmp	r3, #5
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x30c>
 80022fe:	4b5f      	ldr	r3, [pc, #380]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a5e      	ldr	r2, [pc, #376]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	4b5c      	ldr	r3, [pc, #368]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	4a5b      	ldr	r2, [pc, #364]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6713      	str	r3, [r2, #112]	; 0x70
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0x324>
 8002318:	4b58      	ldr	r3, [pc, #352]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a57      	ldr	r2, [pc, #348]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
 8002324:	4b55      	ldr	r3, [pc, #340]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	4a54      	ldr	r2, [pc, #336]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800232a:	f023 0304 	bic.w	r3, r3, #4
 800232e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d015      	beq.n	8002364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7ff fb88 	bl	8001a4c <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7ff fb84 	bl	8001a4c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0cb      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0ee      	beq.n	8002340 <HAL_RCC_OscConfig+0x334>
 8002362:	e014      	b.n	800238e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7ff fb72 	bl	8001a4c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7ff fb6e 	bl	8001a4c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0b5      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002382:	4b3e      	ldr	r3, [pc, #248]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ee      	bne.n	800236c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	4a38      	ldr	r2, [pc, #224]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800239a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a1 	beq.w	80024ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023aa:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCC_OscConfig+0x470>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d05c      	beq.n	8002470 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d141      	bne.n	8002442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b31      	ldr	r3, [pc, #196]	; (8002484 <HAL_RCC_OscConfig+0x478>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7ff fb42 	bl	8001a4c <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023cc:	f7ff fb3e 	bl	8001a4c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e087      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	4b27      	ldr	r3, [pc, #156]	; (800247c <HAL_RCC_OscConfig+0x470>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	3b01      	subs	r3, #1
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	061b      	lsls	r3, r3, #24
 800240e:	491b      	ldr	r1, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x478>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7ff fb17 	bl	8001a4c <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002422:	f7ff fb13 	bl	8001a4c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e05c      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x416>
 8002440:	e054      	b.n	80024ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_RCC_OscConfig+0x478>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff fb00 	bl	8001a4c <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002450:	f7ff fafc 	bl	8001a4c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e045      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x444>
 800246e:	e03d      	b.n	80024ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d107      	bne.n	8002488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e038      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
 800247c:	40023800 	.word	0x40023800
 8002480:	40007000 	.word	0x40007000
 8002484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x4ec>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d028      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d121      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d11a      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024b8:	4013      	ands	r3, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d111      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	3b01      	subs	r3, #1
 80024d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800

080024fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0cc      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d90c      	bls.n	8002538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0b8      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002550:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800255a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002568:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002574:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	494d      	ldr	r1, [pc, #308]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d044      	beq.n	800261c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d119      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e07f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d003      	beq.n	80025ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ca:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e067      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025da:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f023 0203 	bic.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4934      	ldr	r1, [pc, #208]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ec:	f7ff fa2e 	bl	8001a4c <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	e00a      	b.n	800260a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7ff fa2a 	bl	8001a4c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e04f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 020c 	and.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d1eb      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d20c      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e032      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4916      	ldr	r1, [pc, #88]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	490e      	ldr	r1, [pc, #56]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002682:	f000 f821 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002686:	4602      	mov	r2, r0
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	490a      	ldr	r1, [pc, #40]	; (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	5ccb      	ldrb	r3, [r1, r3]
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1c8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff f98e 	bl	80019c4 <HAL_InitTick>

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023c00 	.word	0x40023c00
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08009628 	.word	0x08009628
 80026c0:	20000004 	.word	0x20000004
 80026c4:	20000008 	.word	0x20000008

080026c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026cc:	b094      	sub	sp, #80	; 0x50
 80026ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	647b      	str	r3, [r7, #68]	; 0x44
 80026d4:	2300      	movs	r3, #0
 80026d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d8:	2300      	movs	r3, #0
 80026da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e0:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d00d      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x40>
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	f200 80e1 	bhi.w	80028b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x34>
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x3a>
 80026fa:	e0db      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026fc:	4b73      	ldr	r3, [pc, #460]	; (80028cc <HAL_RCC_GetSysClockFreq+0x204>)
 80026fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002700:	e0db      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002702:	4b73      	ldr	r3, [pc, #460]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002704:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002706:	e0d8      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002708:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002710:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002712:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d063      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271e:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	2200      	movs	r2, #0
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
 8002728:	63fa      	str	r2, [r7, #60]	; 0x3c
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
 8002732:	2300      	movs	r3, #0
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
 8002736:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800273a:	4622      	mov	r2, r4
 800273c:	462b      	mov	r3, r5
 800273e:	f04f 0000 	mov.w	r0, #0
 8002742:	f04f 0100 	mov.w	r1, #0
 8002746:	0159      	lsls	r1, r3, #5
 8002748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800274c:	0150      	lsls	r0, r2, #5
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4621      	mov	r1, r4
 8002754:	1a51      	subs	r1, r2, r1
 8002756:	6139      	str	r1, [r7, #16]
 8002758:	4629      	mov	r1, r5
 800275a:	eb63 0301 	sbc.w	r3, r3, r1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800276c:	4659      	mov	r1, fp
 800276e:	018b      	lsls	r3, r1, #6
 8002770:	4651      	mov	r1, sl
 8002772:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002776:	4651      	mov	r1, sl
 8002778:	018a      	lsls	r2, r1, #6
 800277a:	4651      	mov	r1, sl
 800277c:	ebb2 0801 	subs.w	r8, r2, r1
 8002780:	4659      	mov	r1, fp
 8002782:	eb63 0901 	sbc.w	r9, r3, r1
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800279a:	4690      	mov	r8, r2
 800279c:	4699      	mov	r9, r3
 800279e:	4623      	mov	r3, r4
 80027a0:	eb18 0303 	adds.w	r3, r8, r3
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	462b      	mov	r3, r5
 80027a8:	eb49 0303 	adc.w	r3, r9, r3
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ba:	4629      	mov	r1, r5
 80027bc:	024b      	lsls	r3, r1, #9
 80027be:	4621      	mov	r1, r4
 80027c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027c4:	4621      	mov	r1, r4
 80027c6:	024a      	lsls	r2, r1, #9
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ce:	2200      	movs	r2, #0
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027d8:	f7fe fa5e 	bl	8000c98 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4613      	mov	r3, r2
 80027e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027e4:	e058      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e6:	4b38      	ldr	r3, [pc, #224]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	099b      	lsrs	r3, r3, #6
 80027ec:	2200      	movs	r2, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	4611      	mov	r1, r2
 80027f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002800:	4642      	mov	r2, r8
 8002802:	464b      	mov	r3, r9
 8002804:	f04f 0000 	mov.w	r0, #0
 8002808:	f04f 0100 	mov.w	r1, #0
 800280c:	0159      	lsls	r1, r3, #5
 800280e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002812:	0150      	lsls	r0, r2, #5
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4641      	mov	r1, r8
 800281a:	ebb2 0a01 	subs.w	sl, r2, r1
 800281e:	4649      	mov	r1, r9
 8002820:	eb63 0b01 	sbc.w	fp, r3, r1
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002830:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002834:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002838:	ebb2 040a 	subs.w	r4, r2, sl
 800283c:	eb63 050b 	sbc.w	r5, r3, fp
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	00eb      	lsls	r3, r5, #3
 800284a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284e:	00e2      	lsls	r2, r4, #3
 8002850:	4614      	mov	r4, r2
 8002852:	461d      	mov	r5, r3
 8002854:	4643      	mov	r3, r8
 8002856:	18e3      	adds	r3, r4, r3
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	464b      	mov	r3, r9
 800285c:	eb45 0303 	adc.w	r3, r5, r3
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286e:	4629      	mov	r1, r5
 8002870:	028b      	lsls	r3, r1, #10
 8002872:	4621      	mov	r1, r4
 8002874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002878:	4621      	mov	r1, r4
 800287a:	028a      	lsls	r2, r1, #10
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002882:	2200      	movs	r2, #0
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	61fa      	str	r2, [r7, #28]
 8002888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800288c:	f7fe fa04 	bl	8000c98 <__aeabi_uldivmod>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4613      	mov	r3, r2
 8002896:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	3301      	adds	r3, #1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028b2:	e002      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetSysClockFreq+0x204>)
 80028b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3750      	adds	r7, #80	; 0x50
 80028c0:	46bd      	mov	sp, r7
 80028c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	00f42400 	.word	0x00f42400
 80028d0:	007a1200 	.word	0x007a1200

080028d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000004 	.word	0x20000004

080028ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028f0:	f7ff fff0 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	0a9b      	lsrs	r3, r3, #10
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800
 8002910:	08009638 	.word	0x08009638

08002914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002918:	f7ff ffdc 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0b5b      	lsrs	r3, r3, #13
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	08009638 	.word	0x08009638

0800293c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e041      	b.n	80029d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fd9c 	bl	80014a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3304      	adds	r3, #4
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f000 fb1a 	bl	8002fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d001      	beq.n	80029f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e03c      	b.n	8002a6e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1e      	ldr	r2, [pc, #120]	; (8002a7c <HAL_TIM_Base_Start+0xa0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d018      	beq.n	8002a38 <HAL_TIM_Base_Start+0x5c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0e:	d013      	beq.n	8002a38 <HAL_TIM_Base_Start+0x5c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1a      	ldr	r2, [pc, #104]	; (8002a80 <HAL_TIM_Base_Start+0xa4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00e      	beq.n	8002a38 <HAL_TIM_Base_Start+0x5c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_TIM_Base_Start+0xa8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d009      	beq.n	8002a38 <HAL_TIM_Base_Start+0x5c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_TIM_Base_Start+0xac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_TIM_Base_Start+0x5c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <HAL_TIM_Base_Start+0xb0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d111      	bne.n	8002a5c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d010      	beq.n	8002a6c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5a:	e007      	b.n	8002a6c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40000c00 	.word	0x40000c00
 8002a8c:	40014000 	.word	0x40014000

08002a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d001      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e044      	b.n	8002b32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d018      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x6c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad2:	d013      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x6c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00e      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x6c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x6c>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <HAL_TIM_Base_Start_IT+0xbc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d004      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x6c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <HAL_TIM_Base_Start_IT+0xc0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d111      	bne.n	8002b20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d010      	beq.n	8002b30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1e:	e007      	b.n	8002b30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40014000 	.word	0x40014000

08002b54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10f      	bne.n	8002b9c <HAL_TIM_Base_Stop_IT+0x48>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a1a      	ldr	r2, [r3, #32]
 8002b82:	f240 4344 	movw	r3, #1092	; 0x444
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <HAL_TIM_Base_Stop_IT+0x48>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d122      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d11b      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f06f 0202 	mvn.w	r2, #2
 8002bde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f9bf 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002bfa:	e005      	b.n	8002c08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f9b1 	bl	8002f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f9c2 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d122      	bne.n	8002c62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d11b      	bne.n	8002c62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0204 	mvn.w	r2, #4
 8002c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f995 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002c4e:	e005      	b.n	8002c5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f987 	bl	8002f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f998 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d122      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d11b      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f06f 0208 	mvn.w	r2, #8
 8002c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f96b 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002ca2:	e005      	b.n	8002cb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f95d 	bl	8002f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f96e 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d122      	bne.n	8002d0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d11b      	bne.n	8002d0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f06f 0210 	mvn.w	r2, #16
 8002cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2208      	movs	r2, #8
 8002ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f941 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002cf6:	e005      	b.n	8002d04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f933 	bl	8002f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f944 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d10e      	bne.n	8002d36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f06f 0201 	mvn.w	r2, #1
 8002d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f90d 	bl	8002f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d10e      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	d107      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fabb 	bl	80032d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	d10e      	bne.n	8002d8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	d107      	bne.n	8002d8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f909 	bl	8002fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d10e      	bne.n	8002dba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d107      	bne.n	8002dba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f06f 0220 	mvn.w	r2, #32
 8002db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fa85 	bl	80032c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_TIM_ConfigClockSource+0x1c>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e0b4      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x186>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dfc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e04:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e16:	d03e      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xd4>
 8002e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1c:	f200 8087 	bhi.w	8002f2e <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	f000 8086 	beq.w	8002f34 <HAL_TIM_ConfigClockSource+0x172>
 8002e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2c:	d87f      	bhi.n	8002f2e <HAL_TIM_ConfigClockSource+0x16c>
 8002e2e:	2b70      	cmp	r3, #112	; 0x70
 8002e30:	d01a      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0xa6>
 8002e32:	2b70      	cmp	r3, #112	; 0x70
 8002e34:	d87b      	bhi.n	8002f2e <HAL_TIM_ConfigClockSource+0x16c>
 8002e36:	2b60      	cmp	r3, #96	; 0x60
 8002e38:	d050      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x11a>
 8002e3a:	2b60      	cmp	r3, #96	; 0x60
 8002e3c:	d877      	bhi.n	8002f2e <HAL_TIM_ConfigClockSource+0x16c>
 8002e3e:	2b50      	cmp	r3, #80	; 0x50
 8002e40:	d03c      	beq.n	8002ebc <HAL_TIM_ConfigClockSource+0xfa>
 8002e42:	2b50      	cmp	r3, #80	; 0x50
 8002e44:	d873      	bhi.n	8002f2e <HAL_TIM_ConfigClockSource+0x16c>
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d058      	beq.n	8002efc <HAL_TIM_ConfigClockSource+0x13a>
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d86f      	bhi.n	8002f2e <HAL_TIM_ConfigClockSource+0x16c>
 8002e4e:	2b30      	cmp	r3, #48	; 0x30
 8002e50:	d064      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x15a>
 8002e52:	2b30      	cmp	r3, #48	; 0x30
 8002e54:	d86b      	bhi.n	8002f2e <HAL_TIM_ConfigClockSource+0x16c>
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d060      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x15a>
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d867      	bhi.n	8002f2e <HAL_TIM_ConfigClockSource+0x16c>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d05c      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x15a>
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d05a      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x15a>
 8002e66:	e062      	b.n	8002f2e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6899      	ldr	r1, [r3, #8]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f000 f996 	bl	80031a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	609a      	str	r2, [r3, #8]
      break;
 8002e94:	e04f      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f000 f97f 	bl	80031a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eb8:	609a      	str	r2, [r3, #8]
      break;
 8002eba:	e03c      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f000 f8f3 	bl	80030b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2150      	movs	r1, #80	; 0x50
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 f94c 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002eda:	e02c      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f000 f912 	bl	8003112 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2160      	movs	r1, #96	; 0x60
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f93c 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002efa:	e01c      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f000 f8d3 	bl	80030b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f92c 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002f1a:	e00c      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f000 f923 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002f2c:	e003      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
      break;
 8002f32:	e000      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a34      	ldr	r2, [pc, #208]	; (8003098 <TIM_Base_SetConfig+0xe4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00f      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd2:	d00b      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a31      	ldr	r2, [pc, #196]	; (800309c <TIM_Base_SetConfig+0xe8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d007      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a30      	ldr	r2, [pc, #192]	; (80030a0 <TIM_Base_SetConfig+0xec>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a2f      	ldr	r2, [pc, #188]	; (80030a4 <TIM_Base_SetConfig+0xf0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d108      	bne.n	8002ffe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a25      	ldr	r2, [pc, #148]	; (8003098 <TIM_Base_SetConfig+0xe4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01b      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d017      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a22      	ldr	r2, [pc, #136]	; (800309c <TIM_Base_SetConfig+0xe8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a21      	ldr	r2, [pc, #132]	; (80030a0 <TIM_Base_SetConfig+0xec>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00f      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <TIM_Base_SetConfig+0xf0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00b      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <TIM_Base_SetConfig+0xf4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a1e      	ldr	r2, [pc, #120]	; (80030ac <TIM_Base_SetConfig+0xf8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <TIM_Base_SetConfig+0xfc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a08      	ldr	r2, [pc, #32]	; (8003098 <TIM_Base_SetConfig+0xe4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d103      	bne.n	8003084 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	615a      	str	r2, [r3, #20]
}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40010000 	.word	0x40010000
 800309c:	40000400 	.word	0x40000400
 80030a0:	40000800 	.word	0x40000800
 80030a4:	40000c00 	.word	0x40000c00
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800

080030b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0201 	bic.w	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 030a 	bic.w	r3, r3, #10
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003112:	b480      	push	{r7}
 8003114:	b087      	sub	sp, #28
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0210 	bic.w	r2, r3, #16
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800313c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	031b      	lsls	r3, r3, #12
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800314e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	621a      	str	r2, [r3, #32]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	f043 0307 	orr.w	r3, r3, #7
 8003194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	021a      	lsls	r2, r3, #8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	609a      	str	r2, [r3, #8]
}
 80031dc:	bf00      	nop
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e050      	b.n	80032a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d018      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d013      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10c      	bne.n	8003290 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800327c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	4313      	orrs	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40010000 	.word	0x40010000
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800
 80032bc:	40000c00 	.word	0x40000c00
 80032c0:	40014000 	.word	0x40014000

080032c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e03f      	b.n	800337e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fe f91e 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800332e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f929 	bl	8003588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b08a      	sub	sp, #40	; 0x28
 800338a:	af02      	add	r7, sp, #8
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4613      	mov	r3, r2
 8003394:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d17c      	bne.n	80034a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_UART_Transmit+0x2c>
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e075      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_UART_Transmit+0x3e>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e06e      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2221      	movs	r2, #33	; 0x21
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033da:	f7fe fb37 	bl	8001a4c <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	88fa      	ldrh	r2, [r7, #6]
 80033ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f4:	d108      	bne.n	8003408 <HAL_UART_Transmit+0x82>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	e003      	b.n	8003410 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800340c:	2300      	movs	r3, #0
 800340e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003418:	e02a      	b.n	8003470 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2200      	movs	r2, #0
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f840 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e036      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003448:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	3302      	adds	r3, #2
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e007      	b.n	8003462 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	781a      	ldrb	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	3301      	adds	r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1cf      	bne.n	800341a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2200      	movs	r2, #0
 8003482:	2140      	movs	r1, #64	; 0x40
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f810 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e006      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b090      	sub	sp, #64	; 0x40
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ba:	e050      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d04c      	beq.n	800355e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <UART_WaitOnFlagUntilTimeout+0x30>
 80034ca:	f7fe fabf 	bl	8001a4c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d241      	bcs.n	800355e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	330c      	adds	r3, #12
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034fa:	637a      	str	r2, [r7, #52]	; 0x34
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e5      	bne.n	80034da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3314      	adds	r3, #20
 8003514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	613b      	str	r3, [r7, #16]
   return(result);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	63bb      	str	r3, [r7, #56]	; 0x38
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800352e:	623a      	str	r2, [r7, #32]
 8003530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	69f9      	ldr	r1, [r7, #28]
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	61bb      	str	r3, [r7, #24]
   return(result);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e5      	bne.n	800350e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e00f      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4013      	ands	r3, r2
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	429a      	cmp	r2, r3
 800356c:	bf0c      	ite	eq
 800356e:	2301      	moveq	r3, #1
 8003570:	2300      	movne	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	429a      	cmp	r2, r3
 800357a:	d09f      	beq.n	80034bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3740      	adds	r7, #64	; 0x40
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800358c:	b0c0      	sub	sp, #256	; 0x100
 800358e:	af00      	add	r7, sp, #0
 8003590:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	68d9      	ldr	r1, [r3, #12]
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	ea40 0301 	orr.w	r3, r0, r1
 80035b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	431a      	orrs	r2, r3
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035e0:	f021 010c 	bic.w	r1, r1, #12
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035ee:	430b      	orrs	r3, r1
 80035f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003602:	6999      	ldr	r1, [r3, #24]
 8003604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	ea40 0301 	orr.w	r3, r0, r1
 800360e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b8f      	ldr	r3, [pc, #572]	; (8003854 <UART_SetConfig+0x2cc>)
 8003618:	429a      	cmp	r2, r3
 800361a:	d005      	beq.n	8003628 <UART_SetConfig+0xa0>
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b8d      	ldr	r3, [pc, #564]	; (8003858 <UART_SetConfig+0x2d0>)
 8003624:	429a      	cmp	r2, r3
 8003626:	d104      	bne.n	8003632 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003628:	f7ff f974 	bl	8002914 <HAL_RCC_GetPCLK2Freq>
 800362c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003630:	e003      	b.n	800363a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003632:	f7ff f95b 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 8003636:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003644:	f040 810c 	bne.w	8003860 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003652:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003656:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800365a:	4622      	mov	r2, r4
 800365c:	462b      	mov	r3, r5
 800365e:	1891      	adds	r1, r2, r2
 8003660:	65b9      	str	r1, [r7, #88]	; 0x58
 8003662:	415b      	adcs	r3, r3
 8003664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003666:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800366a:	4621      	mov	r1, r4
 800366c:	eb12 0801 	adds.w	r8, r2, r1
 8003670:	4629      	mov	r1, r5
 8003672:	eb43 0901 	adc.w	r9, r3, r1
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800368a:	4690      	mov	r8, r2
 800368c:	4699      	mov	r9, r3
 800368e:	4623      	mov	r3, r4
 8003690:	eb18 0303 	adds.w	r3, r8, r3
 8003694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003698:	462b      	mov	r3, r5
 800369a:	eb49 0303 	adc.w	r3, r9, r3
 800369e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036b6:	460b      	mov	r3, r1
 80036b8:	18db      	adds	r3, r3, r3
 80036ba:	653b      	str	r3, [r7, #80]	; 0x50
 80036bc:	4613      	mov	r3, r2
 80036be:	eb42 0303 	adc.w	r3, r2, r3
 80036c2:	657b      	str	r3, [r7, #84]	; 0x54
 80036c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036cc:	f7fd fae4 	bl	8000c98 <__aeabi_uldivmod>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4b61      	ldr	r3, [pc, #388]	; (800385c <UART_SetConfig+0x2d4>)
 80036d6:	fba3 2302 	umull	r2, r3, r3, r2
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	011c      	lsls	r4, r3, #4
 80036de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036f0:	4642      	mov	r2, r8
 80036f2:	464b      	mov	r3, r9
 80036f4:	1891      	adds	r1, r2, r2
 80036f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80036f8:	415b      	adcs	r3, r3
 80036fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003700:	4641      	mov	r1, r8
 8003702:	eb12 0a01 	adds.w	sl, r2, r1
 8003706:	4649      	mov	r1, r9
 8003708:	eb43 0b01 	adc.w	fp, r3, r1
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003718:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800371c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003720:	4692      	mov	sl, r2
 8003722:	469b      	mov	fp, r3
 8003724:	4643      	mov	r3, r8
 8003726:	eb1a 0303 	adds.w	r3, sl, r3
 800372a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800372e:	464b      	mov	r3, r9
 8003730:	eb4b 0303 	adc.w	r3, fp, r3
 8003734:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003744:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003748:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800374c:	460b      	mov	r3, r1
 800374e:	18db      	adds	r3, r3, r3
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
 8003752:	4613      	mov	r3, r2
 8003754:	eb42 0303 	adc.w	r3, r2, r3
 8003758:	647b      	str	r3, [r7, #68]	; 0x44
 800375a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800375e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003762:	f7fd fa99 	bl	8000c98 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4611      	mov	r1, r2
 800376c:	4b3b      	ldr	r3, [pc, #236]	; (800385c <UART_SetConfig+0x2d4>)
 800376e:	fba3 2301 	umull	r2, r3, r3, r1
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2264      	movs	r2, #100	; 0x64
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	1acb      	subs	r3, r1, r3
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <UART_SetConfig+0x2d4>)
 8003784:	fba3 2302 	umull	r2, r3, r3, r2
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003790:	441c      	add	r4, r3
 8003792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003796:	2200      	movs	r2, #0
 8003798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800379c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037a4:	4642      	mov	r2, r8
 80037a6:	464b      	mov	r3, r9
 80037a8:	1891      	adds	r1, r2, r2
 80037aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80037ac:	415b      	adcs	r3, r3
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037b4:	4641      	mov	r1, r8
 80037b6:	1851      	adds	r1, r2, r1
 80037b8:	6339      	str	r1, [r7, #48]	; 0x30
 80037ba:	4649      	mov	r1, r9
 80037bc:	414b      	adcs	r3, r1
 80037be:	637b      	str	r3, [r7, #52]	; 0x34
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037cc:	4659      	mov	r1, fp
 80037ce:	00cb      	lsls	r3, r1, #3
 80037d0:	4651      	mov	r1, sl
 80037d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d6:	4651      	mov	r1, sl
 80037d8:	00ca      	lsls	r2, r1, #3
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	4642      	mov	r2, r8
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037e8:	464b      	mov	r3, r9
 80037ea:	460a      	mov	r2, r1
 80037ec:	eb42 0303 	adc.w	r3, r2, r3
 80037f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003800:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003804:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003808:	460b      	mov	r3, r1
 800380a:	18db      	adds	r3, r3, r3
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
 800380e:	4613      	mov	r3, r2
 8003810:	eb42 0303 	adc.w	r3, r2, r3
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800381a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800381e:	f7fd fa3b 	bl	8000c98 <__aeabi_uldivmod>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <UART_SetConfig+0x2d4>)
 8003828:	fba3 1302 	umull	r1, r3, r3, r2
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	2164      	movs	r1, #100	; 0x64
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	3332      	adds	r3, #50	; 0x32
 800383a:	4a08      	ldr	r2, [pc, #32]	; (800385c <UART_SetConfig+0x2d4>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	f003 0207 	and.w	r2, r3, #7
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4422      	add	r2, r4
 800384e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003850:	e105      	b.n	8003a5e <UART_SetConfig+0x4d6>
 8003852:	bf00      	nop
 8003854:	40011000 	.word	0x40011000
 8003858:	40011400 	.word	0x40011400
 800385c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003864:	2200      	movs	r2, #0
 8003866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800386a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800386e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003872:	4642      	mov	r2, r8
 8003874:	464b      	mov	r3, r9
 8003876:	1891      	adds	r1, r2, r2
 8003878:	6239      	str	r1, [r7, #32]
 800387a:	415b      	adcs	r3, r3
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003882:	4641      	mov	r1, r8
 8003884:	1854      	adds	r4, r2, r1
 8003886:	4649      	mov	r1, r9
 8003888:	eb43 0501 	adc.w	r5, r3, r1
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	00eb      	lsls	r3, r5, #3
 8003896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800389a:	00e2      	lsls	r2, r4, #3
 800389c:	4614      	mov	r4, r2
 800389e:	461d      	mov	r5, r3
 80038a0:	4643      	mov	r3, r8
 80038a2:	18e3      	adds	r3, r4, r3
 80038a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038a8:	464b      	mov	r3, r9
 80038aa:	eb45 0303 	adc.w	r3, r5, r3
 80038ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038ce:	4629      	mov	r1, r5
 80038d0:	008b      	lsls	r3, r1, #2
 80038d2:	4621      	mov	r1, r4
 80038d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d8:	4621      	mov	r1, r4
 80038da:	008a      	lsls	r2, r1, #2
 80038dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038e0:	f7fd f9da 	bl	8000c98 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4b60      	ldr	r3, [pc, #384]	; (8003a6c <UART_SetConfig+0x4e4>)
 80038ea:	fba3 2302 	umull	r2, r3, r3, r2
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	011c      	lsls	r4, r3, #4
 80038f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003900:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	1891      	adds	r1, r2, r2
 800390a:	61b9      	str	r1, [r7, #24]
 800390c:	415b      	adcs	r3, r3
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003914:	4641      	mov	r1, r8
 8003916:	1851      	adds	r1, r2, r1
 8003918:	6139      	str	r1, [r7, #16]
 800391a:	4649      	mov	r1, r9
 800391c:	414b      	adcs	r3, r1
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800392c:	4659      	mov	r1, fp
 800392e:	00cb      	lsls	r3, r1, #3
 8003930:	4651      	mov	r1, sl
 8003932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003936:	4651      	mov	r1, sl
 8003938:	00ca      	lsls	r2, r1, #3
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	4603      	mov	r3, r0
 8003940:	4642      	mov	r2, r8
 8003942:	189b      	adds	r3, r3, r2
 8003944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003948:	464b      	mov	r3, r9
 800394a:	460a      	mov	r2, r1
 800394c:	eb42 0303 	adc.w	r3, r2, r3
 8003950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	67bb      	str	r3, [r7, #120]	; 0x78
 800395e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800396c:	4649      	mov	r1, r9
 800396e:	008b      	lsls	r3, r1, #2
 8003970:	4641      	mov	r1, r8
 8003972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003976:	4641      	mov	r1, r8
 8003978:	008a      	lsls	r2, r1, #2
 800397a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800397e:	f7fd f98b 	bl	8000c98 <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4b39      	ldr	r3, [pc, #228]	; (8003a6c <UART_SetConfig+0x4e4>)
 8003988:	fba3 1302 	umull	r1, r3, r3, r2
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	2164      	movs	r1, #100	; 0x64
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	3332      	adds	r3, #50	; 0x32
 800399a:	4a34      	ldr	r2, [pc, #208]	; (8003a6c <UART_SetConfig+0x4e4>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a6:	441c      	add	r4, r3
 80039a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ac:	2200      	movs	r2, #0
 80039ae:	673b      	str	r3, [r7, #112]	; 0x70
 80039b0:	677a      	str	r2, [r7, #116]	; 0x74
 80039b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039b6:	4642      	mov	r2, r8
 80039b8:	464b      	mov	r3, r9
 80039ba:	1891      	adds	r1, r2, r2
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	415b      	adcs	r3, r3
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039c6:	4641      	mov	r1, r8
 80039c8:	1851      	adds	r1, r2, r1
 80039ca:	6039      	str	r1, [r7, #0]
 80039cc:	4649      	mov	r1, r9
 80039ce:	414b      	adcs	r3, r1
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039de:	4659      	mov	r1, fp
 80039e0:	00cb      	lsls	r3, r1, #3
 80039e2:	4651      	mov	r1, sl
 80039e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e8:	4651      	mov	r1, sl
 80039ea:	00ca      	lsls	r2, r1, #3
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	4603      	mov	r3, r0
 80039f2:	4642      	mov	r2, r8
 80039f4:	189b      	adds	r3, r3, r2
 80039f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80039f8:	464b      	mov	r3, r9
 80039fa:	460a      	mov	r2, r1
 80039fc:	eb42 0303 	adc.w	r3, r2, r3
 8003a00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	663b      	str	r3, [r7, #96]	; 0x60
 8003a0c:	667a      	str	r2, [r7, #100]	; 0x64
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	008b      	lsls	r3, r1, #2
 8003a1e:	4641      	mov	r1, r8
 8003a20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a24:	4641      	mov	r1, r8
 8003a26:	008a      	lsls	r2, r1, #2
 8003a28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a2c:	f7fd f934 	bl	8000c98 <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <UART_SetConfig+0x4e4>)
 8003a36:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	2164      	movs	r1, #100	; 0x64
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	3332      	adds	r3, #50	; 0x32
 8003a48:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <UART_SetConfig+0x4e4>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	f003 020f 	and.w	r2, r3, #15
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4422      	add	r2, r4
 8003a5c:	609a      	str	r2, [r3, #8]
}
 8003a5e:	bf00      	nop
 8003a60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a64:	46bd      	mov	sp, r7
 8003a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6a:	bf00      	nop
 8003a6c:	51eb851f 	.word	0x51eb851f

08003a70 <test>:
#include "serial.h"

void test(int aIntegerNumber, float aFloatNumber){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	ed87 0a00 	vstr	s0, [r7]
	SERIAL_SendInt(aIntegerNumber);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f829 	bl	8003ad4 <SERIAL_SendInt>
	SERIAL_SendTAB();
 8003a82:	f000 f881 	bl	8003b88 <SERIAL_SendTAB>
	SERIAL_SendFloat(aFloatNumber);
 8003a86:	ed97 0a00 	vldr	s0, [r7]
 8003a8a:	f000 f843 	bl	8003b14 <SERIAL_SendFloat>
	SERIAL_SendNL();
 8003a8e:	f000 f867 	bl	8003b60 <SERIAL_SendNL>
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <SERIAL_SendCharBuf>:

extern UART_HandleTypeDef huart2;
char gbuf[20];


void SERIAL_SendCharBuf(char *buf){
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	int taille=0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
	taille=strlen(buf);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fc fb99 	bl	80001e0 <strlen>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60fb      	str	r3, [r7, #12]
	if(taille>0)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	dd06      	ble.n	8003ac6 <SERIAL_SendCharBuf+0x2a>
		HAL_UART_Transmit(&huart2, (unsigned char *)buf, taille, 1);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	2301      	movs	r3, #1
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4803      	ldr	r0, [pc, #12]	; (8003ad0 <SERIAL_SendCharBuf+0x34>)
 8003ac2:	f7ff fc60 	bl	8003386 <HAL_UART_Transmit>
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200002d8 	.word	0x200002d8

08003ad4 <SERIAL_SendInt>:

void SERIAL_SendInt(int n){
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	int taille=0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
	taille=sprintf (gbuf,"%d",n);
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4909      	ldr	r1, [pc, #36]	; (8003b08 <SERIAL_SendInt+0x34>)
 8003ae4:	4809      	ldr	r0, [pc, #36]	; (8003b0c <SERIAL_SendInt+0x38>)
 8003ae6:	f000 ff4b 	bl	8004980 <siprintf>
 8003aea:	60f8      	str	r0, [r7, #12]
	if(taille>0)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	dd06      	ble.n	8003b00 <SERIAL_SendInt+0x2c>
		HAL_UART_Transmit(&huart2, (unsigned char *)gbuf, taille, 1);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	2301      	movs	r3, #1
 8003af8:	4904      	ldr	r1, [pc, #16]	; (8003b0c <SERIAL_SendInt+0x38>)
 8003afa:	4805      	ldr	r0, [pc, #20]	; (8003b10 <SERIAL_SendInt+0x3c>)
 8003afc:	f7ff fc43 	bl	8003386 <HAL_UART_Transmit>
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08009610 	.word	0x08009610
 8003b0c:	20000324 	.word	0x20000324
 8003b10:	200002d8 	.word	0x200002d8

08003b14 <SERIAL_SendFloat>:

void SERIAL_SendFloat(float v){
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	ed87 0a01 	vstr	s0, [r7, #4]
	int taille=0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]

	taille=sprintf (gbuf, "%3.3f",v); // @suppress("Float formatting support")
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fc fd18 	bl	8000558 <__aeabi_f2d>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4909      	ldr	r1, [pc, #36]	; (8003b54 <SERIAL_SendFloat+0x40>)
 8003b2e:	480a      	ldr	r0, [pc, #40]	; (8003b58 <SERIAL_SendFloat+0x44>)
 8003b30:	f000 ff26 	bl	8004980 <siprintf>
 8003b34:	60f8      	str	r0, [r7, #12]
	if(taille>0)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	dd06      	ble.n	8003b4a <SERIAL_SendFloat+0x36>
		HAL_UART_Transmit(&huart2, (unsigned char *)gbuf, taille, 1);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	2301      	movs	r3, #1
 8003b42:	4905      	ldr	r1, [pc, #20]	; (8003b58 <SERIAL_SendFloat+0x44>)
 8003b44:	4805      	ldr	r0, [pc, #20]	; (8003b5c <SERIAL_SendFloat+0x48>)
 8003b46:	f7ff fc1e 	bl	8003386 <HAL_UART_Transmit>
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	08009614 	.word	0x08009614
 8003b58:	20000324 	.word	0x20000324
 8003b5c:	200002d8 	.word	0x200002d8

08003b60 <SERIAL_SendNL>:

void SERIAL_SendNL(){
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
	gbuf[0]=13;
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <SERIAL_SendNL+0x20>)
 8003b66:	220d      	movs	r2, #13
 8003b68:	701a      	strb	r2, [r3, #0]
	gbuf[1]=10;
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <SERIAL_SendNL+0x20>)
 8003b6c:	220a      	movs	r2, #10
 8003b6e:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&huart2, (unsigned char *)gbuf, 2, 1);
 8003b70:	2301      	movs	r3, #1
 8003b72:	2202      	movs	r2, #2
 8003b74:	4902      	ldr	r1, [pc, #8]	; (8003b80 <SERIAL_SendNL+0x20>)
 8003b76:	4803      	ldr	r0, [pc, #12]	; (8003b84 <SERIAL_SendNL+0x24>)
 8003b78:	f7ff fc05 	bl	8003386 <HAL_UART_Transmit>

}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000324 	.word	0x20000324
 8003b84:	200002d8 	.word	0x200002d8

08003b88 <SERIAL_SendTAB>:

void SERIAL_SendTAB(){
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	gbuf[0]=9;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <SERIAL_SendTAB+0x1c>)
 8003b8e:	2209      	movs	r2, #9
 8003b90:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, (unsigned char *)gbuf, 1, 1);
 8003b92:	2301      	movs	r3, #1
 8003b94:	2201      	movs	r2, #1
 8003b96:	4903      	ldr	r1, [pc, #12]	; (8003ba4 <SERIAL_SendTAB+0x1c>)
 8003b98:	4803      	ldr	r0, [pc, #12]	; (8003ba8 <SERIAL_SendTAB+0x20>)
 8003b9a:	f7ff fbf4 	bl	8003386 <HAL_UART_Transmit>

}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000324 	.word	0x20000324
 8003ba8:	200002d8 	.word	0x200002d8

08003bac <SERIAL_SendToPlot>:

void SERIAL_SendToPlot(int * dataA,int *dataB,int nb){
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
	int n=0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
	for(n=0;n<nb;n++){
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	e01d      	b.n	8003bfe <SERIAL_SendToPlot+0x52>
		SERIAL_SendCharBuf("a:");
 8003bc2:	4813      	ldr	r0, [pc, #76]	; (8003c10 <SERIAL_SendToPlot+0x64>)
 8003bc4:	f7ff ff6a 	bl	8003a9c <SERIAL_SendCharBuf>
		SERIAL_SendInt(dataA[n]);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff7e 	bl	8003ad4 <SERIAL_SendInt>
		SERIAL_SendCharBuf(",");
 8003bd8:	480e      	ldr	r0, [pc, #56]	; (8003c14 <SERIAL_SendToPlot+0x68>)
 8003bda:	f7ff ff5f 	bl	8003a9c <SERIAL_SendCharBuf>
		SERIAL_SendCharBuf("b:");
 8003bde:	480e      	ldr	r0, [pc, #56]	; (8003c18 <SERIAL_SendToPlot+0x6c>)
 8003be0:	f7ff ff5c 	bl	8003a9c <SERIAL_SendCharBuf>
		SERIAL_SendInt(dataB[n]);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	4413      	add	r3, r2
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ff70 	bl	8003ad4 <SERIAL_SendInt>
		SERIAL_SendNL();
 8003bf4:	f7ff ffb4 	bl	8003b60 <SERIAL_SendNL>
	for(n=0;n<nb;n++){
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	dbdd      	blt.n	8003bc2 <SERIAL_SendToPlot+0x16>
	}
}
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	0800961c 	.word	0x0800961c
 8003c14:	08009620 	.word	0x08009620
 8003c18:	08009624 	.word	0x08009624

08003c1c <__errno>:
 8003c1c:	4b01      	ldr	r3, [pc, #4]	; (8003c24 <__errno+0x8>)
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000010 	.word	0x20000010

08003c28 <__libc_init_array>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	4d0d      	ldr	r5, [pc, #52]	; (8003c60 <__libc_init_array+0x38>)
 8003c2c:	4c0d      	ldr	r4, [pc, #52]	; (8003c64 <__libc_init_array+0x3c>)
 8003c2e:	1b64      	subs	r4, r4, r5
 8003c30:	10a4      	asrs	r4, r4, #2
 8003c32:	2600      	movs	r6, #0
 8003c34:	42a6      	cmp	r6, r4
 8003c36:	d109      	bne.n	8003c4c <__libc_init_array+0x24>
 8003c38:	4d0b      	ldr	r5, [pc, #44]	; (8003c68 <__libc_init_array+0x40>)
 8003c3a:	4c0c      	ldr	r4, [pc, #48]	; (8003c6c <__libc_init_array+0x44>)
 8003c3c:	f005 fcda 	bl	80095f4 <_init>
 8003c40:	1b64      	subs	r4, r4, r5
 8003c42:	10a4      	asrs	r4, r4, #2
 8003c44:	2600      	movs	r6, #0
 8003c46:	42a6      	cmp	r6, r4
 8003c48:	d105      	bne.n	8003c56 <__libc_init_array+0x2e>
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c50:	4798      	blx	r3
 8003c52:	3601      	adds	r6, #1
 8003c54:	e7ee      	b.n	8003c34 <__libc_init_array+0xc>
 8003c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5a:	4798      	blx	r3
 8003c5c:	3601      	adds	r6, #1
 8003c5e:	e7f2      	b.n	8003c46 <__libc_init_array+0x1e>
 8003c60:	08009cc8 	.word	0x08009cc8
 8003c64:	08009cc8 	.word	0x08009cc8
 8003c68:	08009cc8 	.word	0x08009cc8
 8003c6c:	08009ccc 	.word	0x08009ccc

08003c70 <memset>:
 8003c70:	4402      	add	r2, r0
 8003c72:	4603      	mov	r3, r0
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d100      	bne.n	8003c7a <memset+0xa>
 8003c78:	4770      	bx	lr
 8003c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7e:	e7f9      	b.n	8003c74 <memset+0x4>

08003c80 <__cvt>:
 8003c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c84:	ec55 4b10 	vmov	r4, r5, d0
 8003c88:	2d00      	cmp	r5, #0
 8003c8a:	460e      	mov	r6, r1
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	462b      	mov	r3, r5
 8003c90:	bfbb      	ittet	lt
 8003c92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003c96:	461d      	movlt	r5, r3
 8003c98:	2300      	movge	r3, #0
 8003c9a:	232d      	movlt	r3, #45	; 0x2d
 8003c9c:	700b      	strb	r3, [r1, #0]
 8003c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ca0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ca4:	4691      	mov	r9, r2
 8003ca6:	f023 0820 	bic.w	r8, r3, #32
 8003caa:	bfbc      	itt	lt
 8003cac:	4622      	movlt	r2, r4
 8003cae:	4614      	movlt	r4, r2
 8003cb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cb4:	d005      	beq.n	8003cc2 <__cvt+0x42>
 8003cb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003cba:	d100      	bne.n	8003cbe <__cvt+0x3e>
 8003cbc:	3601      	adds	r6, #1
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	e000      	b.n	8003cc4 <__cvt+0x44>
 8003cc2:	2103      	movs	r1, #3
 8003cc4:	ab03      	add	r3, sp, #12
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	ab02      	add	r3, sp, #8
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	ec45 4b10 	vmov	d0, r4, r5
 8003cd0:	4653      	mov	r3, sl
 8003cd2:	4632      	mov	r2, r6
 8003cd4:	f001 fdac 	bl	8005830 <_dtoa_r>
 8003cd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003cdc:	4607      	mov	r7, r0
 8003cde:	d102      	bne.n	8003ce6 <__cvt+0x66>
 8003ce0:	f019 0f01 	tst.w	r9, #1
 8003ce4:	d022      	beq.n	8003d2c <__cvt+0xac>
 8003ce6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cea:	eb07 0906 	add.w	r9, r7, r6
 8003cee:	d110      	bne.n	8003d12 <__cvt+0x92>
 8003cf0:	783b      	ldrb	r3, [r7, #0]
 8003cf2:	2b30      	cmp	r3, #48	; 0x30
 8003cf4:	d10a      	bne.n	8003d0c <__cvt+0x8c>
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	f7fc feeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d02:	b918      	cbnz	r0, 8003d0c <__cvt+0x8c>
 8003d04:	f1c6 0601 	rsb	r6, r6, #1
 8003d08:	f8ca 6000 	str.w	r6, [sl]
 8003d0c:	f8da 3000 	ldr.w	r3, [sl]
 8003d10:	4499      	add	r9, r3
 8003d12:	2200      	movs	r2, #0
 8003d14:	2300      	movs	r3, #0
 8003d16:	4620      	mov	r0, r4
 8003d18:	4629      	mov	r1, r5
 8003d1a:	f7fc fedd 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d1e:	b108      	cbz	r0, 8003d24 <__cvt+0xa4>
 8003d20:	f8cd 900c 	str.w	r9, [sp, #12]
 8003d24:	2230      	movs	r2, #48	; 0x30
 8003d26:	9b03      	ldr	r3, [sp, #12]
 8003d28:	454b      	cmp	r3, r9
 8003d2a:	d307      	bcc.n	8003d3c <__cvt+0xbc>
 8003d2c:	9b03      	ldr	r3, [sp, #12]
 8003d2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d30:	1bdb      	subs	r3, r3, r7
 8003d32:	4638      	mov	r0, r7
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	b004      	add	sp, #16
 8003d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d3c:	1c59      	adds	r1, r3, #1
 8003d3e:	9103      	str	r1, [sp, #12]
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e7f0      	b.n	8003d26 <__cvt+0xa6>

08003d44 <__exponent>:
 8003d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d46:	4603      	mov	r3, r0
 8003d48:	2900      	cmp	r1, #0
 8003d4a:	bfb8      	it	lt
 8003d4c:	4249      	neglt	r1, r1
 8003d4e:	f803 2b02 	strb.w	r2, [r3], #2
 8003d52:	bfb4      	ite	lt
 8003d54:	222d      	movlt	r2, #45	; 0x2d
 8003d56:	222b      	movge	r2, #43	; 0x2b
 8003d58:	2909      	cmp	r1, #9
 8003d5a:	7042      	strb	r2, [r0, #1]
 8003d5c:	dd2a      	ble.n	8003db4 <__exponent+0x70>
 8003d5e:	f10d 0407 	add.w	r4, sp, #7
 8003d62:	46a4      	mov	ip, r4
 8003d64:	270a      	movs	r7, #10
 8003d66:	46a6      	mov	lr, r4
 8003d68:	460a      	mov	r2, r1
 8003d6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8003d6e:	fb07 1516 	mls	r5, r7, r6, r1
 8003d72:	3530      	adds	r5, #48	; 0x30
 8003d74:	2a63      	cmp	r2, #99	; 0x63
 8003d76:	f104 34ff 	add.w	r4, r4, #4294967295
 8003d7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003d7e:	4631      	mov	r1, r6
 8003d80:	dcf1      	bgt.n	8003d66 <__exponent+0x22>
 8003d82:	3130      	adds	r1, #48	; 0x30
 8003d84:	f1ae 0502 	sub.w	r5, lr, #2
 8003d88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003d8c:	1c44      	adds	r4, r0, #1
 8003d8e:	4629      	mov	r1, r5
 8003d90:	4561      	cmp	r1, ip
 8003d92:	d30a      	bcc.n	8003daa <__exponent+0x66>
 8003d94:	f10d 0209 	add.w	r2, sp, #9
 8003d98:	eba2 020e 	sub.w	r2, r2, lr
 8003d9c:	4565      	cmp	r5, ip
 8003d9e:	bf88      	it	hi
 8003da0:	2200      	movhi	r2, #0
 8003da2:	4413      	add	r3, r2
 8003da4:	1a18      	subs	r0, r3, r0
 8003da6:	b003      	add	sp, #12
 8003da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003db2:	e7ed      	b.n	8003d90 <__exponent+0x4c>
 8003db4:	2330      	movs	r3, #48	; 0x30
 8003db6:	3130      	adds	r1, #48	; 0x30
 8003db8:	7083      	strb	r3, [r0, #2]
 8003dba:	70c1      	strb	r1, [r0, #3]
 8003dbc:	1d03      	adds	r3, r0, #4
 8003dbe:	e7f1      	b.n	8003da4 <__exponent+0x60>

08003dc0 <_printf_float>:
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc4:	ed2d 8b02 	vpush	{d8}
 8003dc8:	b08d      	sub	sp, #52	; 0x34
 8003dca:	460c      	mov	r4, r1
 8003dcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003dd0:	4616      	mov	r6, r2
 8003dd2:	461f      	mov	r7, r3
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	f002 fe89 	bl	8006aec <_localeconv_r>
 8003dda:	f8d0 a000 	ldr.w	sl, [r0]
 8003dde:	4650      	mov	r0, sl
 8003de0:	f7fc f9fe 	bl	80001e0 <strlen>
 8003de4:	2300      	movs	r3, #0
 8003de6:	930a      	str	r3, [sp, #40]	; 0x28
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	9305      	str	r3, [sp, #20]
 8003dec:	f8d8 3000 	ldr.w	r3, [r8]
 8003df0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003df4:	3307      	adds	r3, #7
 8003df6:	f023 0307 	bic.w	r3, r3, #7
 8003dfa:	f103 0208 	add.w	r2, r3, #8
 8003dfe:	f8c8 2000 	str.w	r2, [r8]
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003e0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e12:	9307      	str	r3, [sp, #28]
 8003e14:	f8cd 8018 	str.w	r8, [sp, #24]
 8003e18:	ee08 0a10 	vmov	s16, r0
 8003e1c:	4b9f      	ldr	r3, [pc, #636]	; (800409c <_printf_float+0x2dc>)
 8003e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295
 8003e26:	f7fc fe89 	bl	8000b3c <__aeabi_dcmpun>
 8003e2a:	bb88      	cbnz	r0, 8003e90 <_printf_float+0xd0>
 8003e2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e30:	4b9a      	ldr	r3, [pc, #616]	; (800409c <_printf_float+0x2dc>)
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295
 8003e36:	f7fc fe63 	bl	8000b00 <__aeabi_dcmple>
 8003e3a:	bb48      	cbnz	r0, 8003e90 <_printf_float+0xd0>
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2300      	movs	r3, #0
 8003e40:	4640      	mov	r0, r8
 8003e42:	4649      	mov	r1, r9
 8003e44:	f7fc fe52 	bl	8000aec <__aeabi_dcmplt>
 8003e48:	b110      	cbz	r0, 8003e50 <_printf_float+0x90>
 8003e4a:	232d      	movs	r3, #45	; 0x2d
 8003e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e50:	4b93      	ldr	r3, [pc, #588]	; (80040a0 <_printf_float+0x2e0>)
 8003e52:	4894      	ldr	r0, [pc, #592]	; (80040a4 <_printf_float+0x2e4>)
 8003e54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003e58:	bf94      	ite	ls
 8003e5a:	4698      	movls	r8, r3
 8003e5c:	4680      	movhi	r8, r0
 8003e5e:	2303      	movs	r3, #3
 8003e60:	6123      	str	r3, [r4, #16]
 8003e62:	9b05      	ldr	r3, [sp, #20]
 8003e64:	f023 0204 	bic.w	r2, r3, #4
 8003e68:	6022      	str	r2, [r4, #0]
 8003e6a:	f04f 0900 	mov.w	r9, #0
 8003e6e:	9700      	str	r7, [sp, #0]
 8003e70:	4633      	mov	r3, r6
 8003e72:	aa0b      	add	r2, sp, #44	; 0x2c
 8003e74:	4621      	mov	r1, r4
 8003e76:	4628      	mov	r0, r5
 8003e78:	f000 f9d8 	bl	800422c <_printf_common>
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	f040 8090 	bne.w	8003fa2 <_printf_float+0x1e2>
 8003e82:	f04f 30ff 	mov.w	r0, #4294967295
 8003e86:	b00d      	add	sp, #52	; 0x34
 8003e88:	ecbd 8b02 	vpop	{d8}
 8003e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e90:	4642      	mov	r2, r8
 8003e92:	464b      	mov	r3, r9
 8003e94:	4640      	mov	r0, r8
 8003e96:	4649      	mov	r1, r9
 8003e98:	f7fc fe50 	bl	8000b3c <__aeabi_dcmpun>
 8003e9c:	b140      	cbz	r0, 8003eb0 <_printf_float+0xf0>
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bfbc      	itt	lt
 8003ea4:	232d      	movlt	r3, #45	; 0x2d
 8003ea6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003eaa:	487f      	ldr	r0, [pc, #508]	; (80040a8 <_printf_float+0x2e8>)
 8003eac:	4b7f      	ldr	r3, [pc, #508]	; (80040ac <_printf_float+0x2ec>)
 8003eae:	e7d1      	b.n	8003e54 <_printf_float+0x94>
 8003eb0:	6863      	ldr	r3, [r4, #4]
 8003eb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003eb6:	9206      	str	r2, [sp, #24]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	d13f      	bne.n	8003f3c <_printf_float+0x17c>
 8003ebc:	2306      	movs	r3, #6
 8003ebe:	6063      	str	r3, [r4, #4]
 8003ec0:	9b05      	ldr	r3, [sp, #20]
 8003ec2:	6861      	ldr	r1, [r4, #4]
 8003ec4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9303      	str	r3, [sp, #12]
 8003ecc:	ab0a      	add	r3, sp, #40	; 0x28
 8003ece:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003ed2:	ab09      	add	r3, sp, #36	; 0x24
 8003ed4:	ec49 8b10 	vmov	d0, r8, r9
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	6022      	str	r2, [r4, #0]
 8003edc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f7ff fecd 	bl	8003c80 <__cvt>
 8003ee6:	9b06      	ldr	r3, [sp, #24]
 8003ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003eea:	2b47      	cmp	r3, #71	; 0x47
 8003eec:	4680      	mov	r8, r0
 8003eee:	d108      	bne.n	8003f02 <_printf_float+0x142>
 8003ef0:	1cc8      	adds	r0, r1, #3
 8003ef2:	db02      	blt.n	8003efa <_printf_float+0x13a>
 8003ef4:	6863      	ldr	r3, [r4, #4]
 8003ef6:	4299      	cmp	r1, r3
 8003ef8:	dd41      	ble.n	8003f7e <_printf_float+0x1be>
 8003efa:	f1ab 0b02 	sub.w	fp, fp, #2
 8003efe:	fa5f fb8b 	uxtb.w	fp, fp
 8003f02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003f06:	d820      	bhi.n	8003f4a <_printf_float+0x18a>
 8003f08:	3901      	subs	r1, #1
 8003f0a:	465a      	mov	r2, fp
 8003f0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f10:	9109      	str	r1, [sp, #36]	; 0x24
 8003f12:	f7ff ff17 	bl	8003d44 <__exponent>
 8003f16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f18:	1813      	adds	r3, r2, r0
 8003f1a:	2a01      	cmp	r2, #1
 8003f1c:	4681      	mov	r9, r0
 8003f1e:	6123      	str	r3, [r4, #16]
 8003f20:	dc02      	bgt.n	8003f28 <_printf_float+0x168>
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	07d2      	lsls	r2, r2, #31
 8003f26:	d501      	bpl.n	8003f2c <_printf_float+0x16c>
 8003f28:	3301      	adds	r3, #1
 8003f2a:	6123      	str	r3, [r4, #16]
 8003f2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d09c      	beq.n	8003e6e <_printf_float+0xae>
 8003f34:	232d      	movs	r3, #45	; 0x2d
 8003f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f3a:	e798      	b.n	8003e6e <_printf_float+0xae>
 8003f3c:	9a06      	ldr	r2, [sp, #24]
 8003f3e:	2a47      	cmp	r2, #71	; 0x47
 8003f40:	d1be      	bne.n	8003ec0 <_printf_float+0x100>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1bc      	bne.n	8003ec0 <_printf_float+0x100>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e7b9      	b.n	8003ebe <_printf_float+0xfe>
 8003f4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003f4e:	d118      	bne.n	8003f82 <_printf_float+0x1c2>
 8003f50:	2900      	cmp	r1, #0
 8003f52:	6863      	ldr	r3, [r4, #4]
 8003f54:	dd0b      	ble.n	8003f6e <_printf_float+0x1ae>
 8003f56:	6121      	str	r1, [r4, #16]
 8003f58:	b913      	cbnz	r3, 8003f60 <_printf_float+0x1a0>
 8003f5a:	6822      	ldr	r2, [r4, #0]
 8003f5c:	07d0      	lsls	r0, r2, #31
 8003f5e:	d502      	bpl.n	8003f66 <_printf_float+0x1a6>
 8003f60:	3301      	adds	r3, #1
 8003f62:	440b      	add	r3, r1
 8003f64:	6123      	str	r3, [r4, #16]
 8003f66:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f68:	f04f 0900 	mov.w	r9, #0
 8003f6c:	e7de      	b.n	8003f2c <_printf_float+0x16c>
 8003f6e:	b913      	cbnz	r3, 8003f76 <_printf_float+0x1b6>
 8003f70:	6822      	ldr	r2, [r4, #0]
 8003f72:	07d2      	lsls	r2, r2, #31
 8003f74:	d501      	bpl.n	8003f7a <_printf_float+0x1ba>
 8003f76:	3302      	adds	r3, #2
 8003f78:	e7f4      	b.n	8003f64 <_printf_float+0x1a4>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e7f2      	b.n	8003f64 <_printf_float+0x1a4>
 8003f7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f84:	4299      	cmp	r1, r3
 8003f86:	db05      	blt.n	8003f94 <_printf_float+0x1d4>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	6121      	str	r1, [r4, #16]
 8003f8c:	07d8      	lsls	r0, r3, #31
 8003f8e:	d5ea      	bpl.n	8003f66 <_printf_float+0x1a6>
 8003f90:	1c4b      	adds	r3, r1, #1
 8003f92:	e7e7      	b.n	8003f64 <_printf_float+0x1a4>
 8003f94:	2900      	cmp	r1, #0
 8003f96:	bfd4      	ite	le
 8003f98:	f1c1 0202 	rsble	r2, r1, #2
 8003f9c:	2201      	movgt	r2, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	e7e0      	b.n	8003f64 <_printf_float+0x1a4>
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	055a      	lsls	r2, r3, #21
 8003fa6:	d407      	bmi.n	8003fb8 <_printf_float+0x1f8>
 8003fa8:	6923      	ldr	r3, [r4, #16]
 8003faa:	4642      	mov	r2, r8
 8003fac:	4631      	mov	r1, r6
 8003fae:	4628      	mov	r0, r5
 8003fb0:	47b8      	blx	r7
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	d12c      	bne.n	8004010 <_printf_float+0x250>
 8003fb6:	e764      	b.n	8003e82 <_printf_float+0xc2>
 8003fb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003fbc:	f240 80e0 	bls.w	8004180 <_printf_float+0x3c0>
 8003fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f7fc fd86 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d034      	beq.n	800403a <_printf_float+0x27a>
 8003fd0:	4a37      	ldr	r2, [pc, #220]	; (80040b0 <_printf_float+0x2f0>)
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	47b8      	blx	r7
 8003fda:	3001      	adds	r0, #1
 8003fdc:	f43f af51 	beq.w	8003e82 <_printf_float+0xc2>
 8003fe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	db02      	blt.n	8003fee <_printf_float+0x22e>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	07d8      	lsls	r0, r3, #31
 8003fec:	d510      	bpl.n	8004010 <_printf_float+0x250>
 8003fee:	ee18 3a10 	vmov	r3, s16
 8003ff2:	4652      	mov	r2, sl
 8003ff4:	4631      	mov	r1, r6
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	47b8      	blx	r7
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	f43f af41 	beq.w	8003e82 <_printf_float+0xc2>
 8004000:	f04f 0800 	mov.w	r8, #0
 8004004:	f104 091a 	add.w	r9, r4, #26
 8004008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	4543      	cmp	r3, r8
 800400e:	dc09      	bgt.n	8004024 <_printf_float+0x264>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	079b      	lsls	r3, r3, #30
 8004014:	f100 8105 	bmi.w	8004222 <_printf_float+0x462>
 8004018:	68e0      	ldr	r0, [r4, #12]
 800401a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800401c:	4298      	cmp	r0, r3
 800401e:	bfb8      	it	lt
 8004020:	4618      	movlt	r0, r3
 8004022:	e730      	b.n	8003e86 <_printf_float+0xc6>
 8004024:	2301      	movs	r3, #1
 8004026:	464a      	mov	r2, r9
 8004028:	4631      	mov	r1, r6
 800402a:	4628      	mov	r0, r5
 800402c:	47b8      	blx	r7
 800402e:	3001      	adds	r0, #1
 8004030:	f43f af27 	beq.w	8003e82 <_printf_float+0xc2>
 8004034:	f108 0801 	add.w	r8, r8, #1
 8004038:	e7e6      	b.n	8004008 <_printf_float+0x248>
 800403a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800403c:	2b00      	cmp	r3, #0
 800403e:	dc39      	bgt.n	80040b4 <_printf_float+0x2f4>
 8004040:	4a1b      	ldr	r2, [pc, #108]	; (80040b0 <_printf_float+0x2f0>)
 8004042:	2301      	movs	r3, #1
 8004044:	4631      	mov	r1, r6
 8004046:	4628      	mov	r0, r5
 8004048:	47b8      	blx	r7
 800404a:	3001      	adds	r0, #1
 800404c:	f43f af19 	beq.w	8003e82 <_printf_float+0xc2>
 8004050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004054:	4313      	orrs	r3, r2
 8004056:	d102      	bne.n	800405e <_printf_float+0x29e>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	07d9      	lsls	r1, r3, #31
 800405c:	d5d8      	bpl.n	8004010 <_printf_float+0x250>
 800405e:	ee18 3a10 	vmov	r3, s16
 8004062:	4652      	mov	r2, sl
 8004064:	4631      	mov	r1, r6
 8004066:	4628      	mov	r0, r5
 8004068:	47b8      	blx	r7
 800406a:	3001      	adds	r0, #1
 800406c:	f43f af09 	beq.w	8003e82 <_printf_float+0xc2>
 8004070:	f04f 0900 	mov.w	r9, #0
 8004074:	f104 0a1a 	add.w	sl, r4, #26
 8004078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407a:	425b      	negs	r3, r3
 800407c:	454b      	cmp	r3, r9
 800407e:	dc01      	bgt.n	8004084 <_printf_float+0x2c4>
 8004080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004082:	e792      	b.n	8003faa <_printf_float+0x1ea>
 8004084:	2301      	movs	r3, #1
 8004086:	4652      	mov	r2, sl
 8004088:	4631      	mov	r1, r6
 800408a:	4628      	mov	r0, r5
 800408c:	47b8      	blx	r7
 800408e:	3001      	adds	r0, #1
 8004090:	f43f aef7 	beq.w	8003e82 <_printf_float+0xc2>
 8004094:	f109 0901 	add.w	r9, r9, #1
 8004098:	e7ee      	b.n	8004078 <_printf_float+0x2b8>
 800409a:	bf00      	nop
 800409c:	7fefffff 	.word	0x7fefffff
 80040a0:	08009644 	.word	0x08009644
 80040a4:	08009648 	.word	0x08009648
 80040a8:	08009650 	.word	0x08009650
 80040ac:	0800964c 	.word	0x0800964c
 80040b0:	08009654 	.word	0x08009654
 80040b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040b8:	429a      	cmp	r2, r3
 80040ba:	bfa8      	it	ge
 80040bc:	461a      	movge	r2, r3
 80040be:	2a00      	cmp	r2, #0
 80040c0:	4691      	mov	r9, r2
 80040c2:	dc37      	bgt.n	8004134 <_printf_float+0x374>
 80040c4:	f04f 0b00 	mov.w	fp, #0
 80040c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040cc:	f104 021a 	add.w	r2, r4, #26
 80040d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040d2:	9305      	str	r3, [sp, #20]
 80040d4:	eba3 0309 	sub.w	r3, r3, r9
 80040d8:	455b      	cmp	r3, fp
 80040da:	dc33      	bgt.n	8004144 <_printf_float+0x384>
 80040dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040e0:	429a      	cmp	r2, r3
 80040e2:	db3b      	blt.n	800415c <_printf_float+0x39c>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	07da      	lsls	r2, r3, #31
 80040e8:	d438      	bmi.n	800415c <_printf_float+0x39c>
 80040ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ec:	9a05      	ldr	r2, [sp, #20]
 80040ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040f0:	1a9a      	subs	r2, r3, r2
 80040f2:	eba3 0901 	sub.w	r9, r3, r1
 80040f6:	4591      	cmp	r9, r2
 80040f8:	bfa8      	it	ge
 80040fa:	4691      	movge	r9, r2
 80040fc:	f1b9 0f00 	cmp.w	r9, #0
 8004100:	dc35      	bgt.n	800416e <_printf_float+0x3ae>
 8004102:	f04f 0800 	mov.w	r8, #0
 8004106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800410a:	f104 0a1a 	add.w	sl, r4, #26
 800410e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	eba3 0309 	sub.w	r3, r3, r9
 8004118:	4543      	cmp	r3, r8
 800411a:	f77f af79 	ble.w	8004010 <_printf_float+0x250>
 800411e:	2301      	movs	r3, #1
 8004120:	4652      	mov	r2, sl
 8004122:	4631      	mov	r1, r6
 8004124:	4628      	mov	r0, r5
 8004126:	47b8      	blx	r7
 8004128:	3001      	adds	r0, #1
 800412a:	f43f aeaa 	beq.w	8003e82 <_printf_float+0xc2>
 800412e:	f108 0801 	add.w	r8, r8, #1
 8004132:	e7ec      	b.n	800410e <_printf_float+0x34e>
 8004134:	4613      	mov	r3, r2
 8004136:	4631      	mov	r1, r6
 8004138:	4642      	mov	r2, r8
 800413a:	4628      	mov	r0, r5
 800413c:	47b8      	blx	r7
 800413e:	3001      	adds	r0, #1
 8004140:	d1c0      	bne.n	80040c4 <_printf_float+0x304>
 8004142:	e69e      	b.n	8003e82 <_printf_float+0xc2>
 8004144:	2301      	movs	r3, #1
 8004146:	4631      	mov	r1, r6
 8004148:	4628      	mov	r0, r5
 800414a:	9205      	str	r2, [sp, #20]
 800414c:	47b8      	blx	r7
 800414e:	3001      	adds	r0, #1
 8004150:	f43f ae97 	beq.w	8003e82 <_printf_float+0xc2>
 8004154:	9a05      	ldr	r2, [sp, #20]
 8004156:	f10b 0b01 	add.w	fp, fp, #1
 800415a:	e7b9      	b.n	80040d0 <_printf_float+0x310>
 800415c:	ee18 3a10 	vmov	r3, s16
 8004160:	4652      	mov	r2, sl
 8004162:	4631      	mov	r1, r6
 8004164:	4628      	mov	r0, r5
 8004166:	47b8      	blx	r7
 8004168:	3001      	adds	r0, #1
 800416a:	d1be      	bne.n	80040ea <_printf_float+0x32a>
 800416c:	e689      	b.n	8003e82 <_printf_float+0xc2>
 800416e:	9a05      	ldr	r2, [sp, #20]
 8004170:	464b      	mov	r3, r9
 8004172:	4442      	add	r2, r8
 8004174:	4631      	mov	r1, r6
 8004176:	4628      	mov	r0, r5
 8004178:	47b8      	blx	r7
 800417a:	3001      	adds	r0, #1
 800417c:	d1c1      	bne.n	8004102 <_printf_float+0x342>
 800417e:	e680      	b.n	8003e82 <_printf_float+0xc2>
 8004180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004182:	2a01      	cmp	r2, #1
 8004184:	dc01      	bgt.n	800418a <_printf_float+0x3ca>
 8004186:	07db      	lsls	r3, r3, #31
 8004188:	d538      	bpl.n	80041fc <_printf_float+0x43c>
 800418a:	2301      	movs	r3, #1
 800418c:	4642      	mov	r2, r8
 800418e:	4631      	mov	r1, r6
 8004190:	4628      	mov	r0, r5
 8004192:	47b8      	blx	r7
 8004194:	3001      	adds	r0, #1
 8004196:	f43f ae74 	beq.w	8003e82 <_printf_float+0xc2>
 800419a:	ee18 3a10 	vmov	r3, s16
 800419e:	4652      	mov	r2, sl
 80041a0:	4631      	mov	r1, r6
 80041a2:	4628      	mov	r0, r5
 80041a4:	47b8      	blx	r7
 80041a6:	3001      	adds	r0, #1
 80041a8:	f43f ae6b 	beq.w	8003e82 <_printf_float+0xc2>
 80041ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041b0:	2200      	movs	r2, #0
 80041b2:	2300      	movs	r3, #0
 80041b4:	f7fc fc90 	bl	8000ad8 <__aeabi_dcmpeq>
 80041b8:	b9d8      	cbnz	r0, 80041f2 <_printf_float+0x432>
 80041ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041bc:	f108 0201 	add.w	r2, r8, #1
 80041c0:	3b01      	subs	r3, #1
 80041c2:	4631      	mov	r1, r6
 80041c4:	4628      	mov	r0, r5
 80041c6:	47b8      	blx	r7
 80041c8:	3001      	adds	r0, #1
 80041ca:	d10e      	bne.n	80041ea <_printf_float+0x42a>
 80041cc:	e659      	b.n	8003e82 <_printf_float+0xc2>
 80041ce:	2301      	movs	r3, #1
 80041d0:	4652      	mov	r2, sl
 80041d2:	4631      	mov	r1, r6
 80041d4:	4628      	mov	r0, r5
 80041d6:	47b8      	blx	r7
 80041d8:	3001      	adds	r0, #1
 80041da:	f43f ae52 	beq.w	8003e82 <_printf_float+0xc2>
 80041de:	f108 0801 	add.w	r8, r8, #1
 80041e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041e4:	3b01      	subs	r3, #1
 80041e6:	4543      	cmp	r3, r8
 80041e8:	dcf1      	bgt.n	80041ce <_printf_float+0x40e>
 80041ea:	464b      	mov	r3, r9
 80041ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80041f0:	e6dc      	b.n	8003fac <_printf_float+0x1ec>
 80041f2:	f04f 0800 	mov.w	r8, #0
 80041f6:	f104 0a1a 	add.w	sl, r4, #26
 80041fa:	e7f2      	b.n	80041e2 <_printf_float+0x422>
 80041fc:	2301      	movs	r3, #1
 80041fe:	4642      	mov	r2, r8
 8004200:	e7df      	b.n	80041c2 <_printf_float+0x402>
 8004202:	2301      	movs	r3, #1
 8004204:	464a      	mov	r2, r9
 8004206:	4631      	mov	r1, r6
 8004208:	4628      	mov	r0, r5
 800420a:	47b8      	blx	r7
 800420c:	3001      	adds	r0, #1
 800420e:	f43f ae38 	beq.w	8003e82 <_printf_float+0xc2>
 8004212:	f108 0801 	add.w	r8, r8, #1
 8004216:	68e3      	ldr	r3, [r4, #12]
 8004218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800421a:	1a5b      	subs	r3, r3, r1
 800421c:	4543      	cmp	r3, r8
 800421e:	dcf0      	bgt.n	8004202 <_printf_float+0x442>
 8004220:	e6fa      	b.n	8004018 <_printf_float+0x258>
 8004222:	f04f 0800 	mov.w	r8, #0
 8004226:	f104 0919 	add.w	r9, r4, #25
 800422a:	e7f4      	b.n	8004216 <_printf_float+0x456>

0800422c <_printf_common>:
 800422c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	4616      	mov	r6, r2
 8004232:	4699      	mov	r9, r3
 8004234:	688a      	ldr	r2, [r1, #8]
 8004236:	690b      	ldr	r3, [r1, #16]
 8004238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800423c:	4293      	cmp	r3, r2
 800423e:	bfb8      	it	lt
 8004240:	4613      	movlt	r3, r2
 8004242:	6033      	str	r3, [r6, #0]
 8004244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004248:	4607      	mov	r7, r0
 800424a:	460c      	mov	r4, r1
 800424c:	b10a      	cbz	r2, 8004252 <_printf_common+0x26>
 800424e:	3301      	adds	r3, #1
 8004250:	6033      	str	r3, [r6, #0]
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	0699      	lsls	r1, r3, #26
 8004256:	bf42      	ittt	mi
 8004258:	6833      	ldrmi	r3, [r6, #0]
 800425a:	3302      	addmi	r3, #2
 800425c:	6033      	strmi	r3, [r6, #0]
 800425e:	6825      	ldr	r5, [r4, #0]
 8004260:	f015 0506 	ands.w	r5, r5, #6
 8004264:	d106      	bne.n	8004274 <_printf_common+0x48>
 8004266:	f104 0a19 	add.w	sl, r4, #25
 800426a:	68e3      	ldr	r3, [r4, #12]
 800426c:	6832      	ldr	r2, [r6, #0]
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	42ab      	cmp	r3, r5
 8004272:	dc26      	bgt.n	80042c2 <_printf_common+0x96>
 8004274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004278:	1e13      	subs	r3, r2, #0
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	bf18      	it	ne
 800427e:	2301      	movne	r3, #1
 8004280:	0692      	lsls	r2, r2, #26
 8004282:	d42b      	bmi.n	80042dc <_printf_common+0xb0>
 8004284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004288:	4649      	mov	r1, r9
 800428a:	4638      	mov	r0, r7
 800428c:	47c0      	blx	r8
 800428e:	3001      	adds	r0, #1
 8004290:	d01e      	beq.n	80042d0 <_printf_common+0xa4>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	68e5      	ldr	r5, [r4, #12]
 8004296:	6832      	ldr	r2, [r6, #0]
 8004298:	f003 0306 	and.w	r3, r3, #6
 800429c:	2b04      	cmp	r3, #4
 800429e:	bf08      	it	eq
 80042a0:	1aad      	subeq	r5, r5, r2
 80042a2:	68a3      	ldr	r3, [r4, #8]
 80042a4:	6922      	ldr	r2, [r4, #16]
 80042a6:	bf0c      	ite	eq
 80042a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042ac:	2500      	movne	r5, #0
 80042ae:	4293      	cmp	r3, r2
 80042b0:	bfc4      	itt	gt
 80042b2:	1a9b      	subgt	r3, r3, r2
 80042b4:	18ed      	addgt	r5, r5, r3
 80042b6:	2600      	movs	r6, #0
 80042b8:	341a      	adds	r4, #26
 80042ba:	42b5      	cmp	r5, r6
 80042bc:	d11a      	bne.n	80042f4 <_printf_common+0xc8>
 80042be:	2000      	movs	r0, #0
 80042c0:	e008      	b.n	80042d4 <_printf_common+0xa8>
 80042c2:	2301      	movs	r3, #1
 80042c4:	4652      	mov	r2, sl
 80042c6:	4649      	mov	r1, r9
 80042c8:	4638      	mov	r0, r7
 80042ca:	47c0      	blx	r8
 80042cc:	3001      	adds	r0, #1
 80042ce:	d103      	bne.n	80042d8 <_printf_common+0xac>
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d8:	3501      	adds	r5, #1
 80042da:	e7c6      	b.n	800426a <_printf_common+0x3e>
 80042dc:	18e1      	adds	r1, r4, r3
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	2030      	movs	r0, #48	; 0x30
 80042e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042e6:	4422      	add	r2, r4
 80042e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042f0:	3302      	adds	r3, #2
 80042f2:	e7c7      	b.n	8004284 <_printf_common+0x58>
 80042f4:	2301      	movs	r3, #1
 80042f6:	4622      	mov	r2, r4
 80042f8:	4649      	mov	r1, r9
 80042fa:	4638      	mov	r0, r7
 80042fc:	47c0      	blx	r8
 80042fe:	3001      	adds	r0, #1
 8004300:	d0e6      	beq.n	80042d0 <_printf_common+0xa4>
 8004302:	3601      	adds	r6, #1
 8004304:	e7d9      	b.n	80042ba <_printf_common+0x8e>
	...

08004308 <_printf_i>:
 8004308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	7e0f      	ldrb	r7, [r1, #24]
 800430e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004310:	2f78      	cmp	r7, #120	; 0x78
 8004312:	4691      	mov	r9, r2
 8004314:	4680      	mov	r8, r0
 8004316:	460c      	mov	r4, r1
 8004318:	469a      	mov	sl, r3
 800431a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800431e:	d807      	bhi.n	8004330 <_printf_i+0x28>
 8004320:	2f62      	cmp	r7, #98	; 0x62
 8004322:	d80a      	bhi.n	800433a <_printf_i+0x32>
 8004324:	2f00      	cmp	r7, #0
 8004326:	f000 80d8 	beq.w	80044da <_printf_i+0x1d2>
 800432a:	2f58      	cmp	r7, #88	; 0x58
 800432c:	f000 80a3 	beq.w	8004476 <_printf_i+0x16e>
 8004330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004338:	e03a      	b.n	80043b0 <_printf_i+0xa8>
 800433a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800433e:	2b15      	cmp	r3, #21
 8004340:	d8f6      	bhi.n	8004330 <_printf_i+0x28>
 8004342:	a101      	add	r1, pc, #4	; (adr r1, 8004348 <_printf_i+0x40>)
 8004344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004348:	080043a1 	.word	0x080043a1
 800434c:	080043b5 	.word	0x080043b5
 8004350:	08004331 	.word	0x08004331
 8004354:	08004331 	.word	0x08004331
 8004358:	08004331 	.word	0x08004331
 800435c:	08004331 	.word	0x08004331
 8004360:	080043b5 	.word	0x080043b5
 8004364:	08004331 	.word	0x08004331
 8004368:	08004331 	.word	0x08004331
 800436c:	08004331 	.word	0x08004331
 8004370:	08004331 	.word	0x08004331
 8004374:	080044c1 	.word	0x080044c1
 8004378:	080043e5 	.word	0x080043e5
 800437c:	080044a3 	.word	0x080044a3
 8004380:	08004331 	.word	0x08004331
 8004384:	08004331 	.word	0x08004331
 8004388:	080044e3 	.word	0x080044e3
 800438c:	08004331 	.word	0x08004331
 8004390:	080043e5 	.word	0x080043e5
 8004394:	08004331 	.word	0x08004331
 8004398:	08004331 	.word	0x08004331
 800439c:	080044ab 	.word	0x080044ab
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	1d1a      	adds	r2, r3, #4
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	602a      	str	r2, [r5, #0]
 80043a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0a3      	b.n	80044fc <_printf_i+0x1f4>
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	6829      	ldr	r1, [r5, #0]
 80043b8:	0606      	lsls	r6, r0, #24
 80043ba:	f101 0304 	add.w	r3, r1, #4
 80043be:	d50a      	bpl.n	80043d6 <_printf_i+0xce>
 80043c0:	680e      	ldr	r6, [r1, #0]
 80043c2:	602b      	str	r3, [r5, #0]
 80043c4:	2e00      	cmp	r6, #0
 80043c6:	da03      	bge.n	80043d0 <_printf_i+0xc8>
 80043c8:	232d      	movs	r3, #45	; 0x2d
 80043ca:	4276      	negs	r6, r6
 80043cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d0:	485e      	ldr	r0, [pc, #376]	; (800454c <_printf_i+0x244>)
 80043d2:	230a      	movs	r3, #10
 80043d4:	e019      	b.n	800440a <_printf_i+0x102>
 80043d6:	680e      	ldr	r6, [r1, #0]
 80043d8:	602b      	str	r3, [r5, #0]
 80043da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043de:	bf18      	it	ne
 80043e0:	b236      	sxthne	r6, r6
 80043e2:	e7ef      	b.n	80043c4 <_printf_i+0xbc>
 80043e4:	682b      	ldr	r3, [r5, #0]
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	1d19      	adds	r1, r3, #4
 80043ea:	6029      	str	r1, [r5, #0]
 80043ec:	0601      	lsls	r1, r0, #24
 80043ee:	d501      	bpl.n	80043f4 <_printf_i+0xec>
 80043f0:	681e      	ldr	r6, [r3, #0]
 80043f2:	e002      	b.n	80043fa <_printf_i+0xf2>
 80043f4:	0646      	lsls	r6, r0, #25
 80043f6:	d5fb      	bpl.n	80043f0 <_printf_i+0xe8>
 80043f8:	881e      	ldrh	r6, [r3, #0]
 80043fa:	4854      	ldr	r0, [pc, #336]	; (800454c <_printf_i+0x244>)
 80043fc:	2f6f      	cmp	r7, #111	; 0x6f
 80043fe:	bf0c      	ite	eq
 8004400:	2308      	moveq	r3, #8
 8004402:	230a      	movne	r3, #10
 8004404:	2100      	movs	r1, #0
 8004406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800440a:	6865      	ldr	r5, [r4, #4]
 800440c:	60a5      	str	r5, [r4, #8]
 800440e:	2d00      	cmp	r5, #0
 8004410:	bfa2      	ittt	ge
 8004412:	6821      	ldrge	r1, [r4, #0]
 8004414:	f021 0104 	bicge.w	r1, r1, #4
 8004418:	6021      	strge	r1, [r4, #0]
 800441a:	b90e      	cbnz	r6, 8004420 <_printf_i+0x118>
 800441c:	2d00      	cmp	r5, #0
 800441e:	d04d      	beq.n	80044bc <_printf_i+0x1b4>
 8004420:	4615      	mov	r5, r2
 8004422:	fbb6 f1f3 	udiv	r1, r6, r3
 8004426:	fb03 6711 	mls	r7, r3, r1, r6
 800442a:	5dc7      	ldrb	r7, [r0, r7]
 800442c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004430:	4637      	mov	r7, r6
 8004432:	42bb      	cmp	r3, r7
 8004434:	460e      	mov	r6, r1
 8004436:	d9f4      	bls.n	8004422 <_printf_i+0x11a>
 8004438:	2b08      	cmp	r3, #8
 800443a:	d10b      	bne.n	8004454 <_printf_i+0x14c>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	07de      	lsls	r6, r3, #31
 8004440:	d508      	bpl.n	8004454 <_printf_i+0x14c>
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	6861      	ldr	r1, [r4, #4]
 8004446:	4299      	cmp	r1, r3
 8004448:	bfde      	ittt	le
 800444a:	2330      	movle	r3, #48	; 0x30
 800444c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004450:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004454:	1b52      	subs	r2, r2, r5
 8004456:	6122      	str	r2, [r4, #16]
 8004458:	f8cd a000 	str.w	sl, [sp]
 800445c:	464b      	mov	r3, r9
 800445e:	aa03      	add	r2, sp, #12
 8004460:	4621      	mov	r1, r4
 8004462:	4640      	mov	r0, r8
 8004464:	f7ff fee2 	bl	800422c <_printf_common>
 8004468:	3001      	adds	r0, #1
 800446a:	d14c      	bne.n	8004506 <_printf_i+0x1fe>
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	b004      	add	sp, #16
 8004472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004476:	4835      	ldr	r0, [pc, #212]	; (800454c <_printf_i+0x244>)
 8004478:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800447c:	6829      	ldr	r1, [r5, #0]
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	f851 6b04 	ldr.w	r6, [r1], #4
 8004484:	6029      	str	r1, [r5, #0]
 8004486:	061d      	lsls	r5, r3, #24
 8004488:	d514      	bpl.n	80044b4 <_printf_i+0x1ac>
 800448a:	07df      	lsls	r7, r3, #31
 800448c:	bf44      	itt	mi
 800448e:	f043 0320 	orrmi.w	r3, r3, #32
 8004492:	6023      	strmi	r3, [r4, #0]
 8004494:	b91e      	cbnz	r6, 800449e <_printf_i+0x196>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	f023 0320 	bic.w	r3, r3, #32
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	2310      	movs	r3, #16
 80044a0:	e7b0      	b.n	8004404 <_printf_i+0xfc>
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	f043 0320 	orr.w	r3, r3, #32
 80044a8:	6023      	str	r3, [r4, #0]
 80044aa:	2378      	movs	r3, #120	; 0x78
 80044ac:	4828      	ldr	r0, [pc, #160]	; (8004550 <_printf_i+0x248>)
 80044ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044b2:	e7e3      	b.n	800447c <_printf_i+0x174>
 80044b4:	0659      	lsls	r1, r3, #25
 80044b6:	bf48      	it	mi
 80044b8:	b2b6      	uxthmi	r6, r6
 80044ba:	e7e6      	b.n	800448a <_printf_i+0x182>
 80044bc:	4615      	mov	r5, r2
 80044be:	e7bb      	b.n	8004438 <_printf_i+0x130>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	6826      	ldr	r6, [r4, #0]
 80044c4:	6961      	ldr	r1, [r4, #20]
 80044c6:	1d18      	adds	r0, r3, #4
 80044c8:	6028      	str	r0, [r5, #0]
 80044ca:	0635      	lsls	r5, r6, #24
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	d501      	bpl.n	80044d4 <_printf_i+0x1cc>
 80044d0:	6019      	str	r1, [r3, #0]
 80044d2:	e002      	b.n	80044da <_printf_i+0x1d2>
 80044d4:	0670      	lsls	r0, r6, #25
 80044d6:	d5fb      	bpl.n	80044d0 <_printf_i+0x1c8>
 80044d8:	8019      	strh	r1, [r3, #0]
 80044da:	2300      	movs	r3, #0
 80044dc:	6123      	str	r3, [r4, #16]
 80044de:	4615      	mov	r5, r2
 80044e0:	e7ba      	b.n	8004458 <_printf_i+0x150>
 80044e2:	682b      	ldr	r3, [r5, #0]
 80044e4:	1d1a      	adds	r2, r3, #4
 80044e6:	602a      	str	r2, [r5, #0]
 80044e8:	681d      	ldr	r5, [r3, #0]
 80044ea:	6862      	ldr	r2, [r4, #4]
 80044ec:	2100      	movs	r1, #0
 80044ee:	4628      	mov	r0, r5
 80044f0:	f7fb fe7e 	bl	80001f0 <memchr>
 80044f4:	b108      	cbz	r0, 80044fa <_printf_i+0x1f2>
 80044f6:	1b40      	subs	r0, r0, r5
 80044f8:	6060      	str	r0, [r4, #4]
 80044fa:	6863      	ldr	r3, [r4, #4]
 80044fc:	6123      	str	r3, [r4, #16]
 80044fe:	2300      	movs	r3, #0
 8004500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004504:	e7a8      	b.n	8004458 <_printf_i+0x150>
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	462a      	mov	r2, r5
 800450a:	4649      	mov	r1, r9
 800450c:	4640      	mov	r0, r8
 800450e:	47d0      	blx	sl
 8004510:	3001      	adds	r0, #1
 8004512:	d0ab      	beq.n	800446c <_printf_i+0x164>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	079b      	lsls	r3, r3, #30
 8004518:	d413      	bmi.n	8004542 <_printf_i+0x23a>
 800451a:	68e0      	ldr	r0, [r4, #12]
 800451c:	9b03      	ldr	r3, [sp, #12]
 800451e:	4298      	cmp	r0, r3
 8004520:	bfb8      	it	lt
 8004522:	4618      	movlt	r0, r3
 8004524:	e7a4      	b.n	8004470 <_printf_i+0x168>
 8004526:	2301      	movs	r3, #1
 8004528:	4632      	mov	r2, r6
 800452a:	4649      	mov	r1, r9
 800452c:	4640      	mov	r0, r8
 800452e:	47d0      	blx	sl
 8004530:	3001      	adds	r0, #1
 8004532:	d09b      	beq.n	800446c <_printf_i+0x164>
 8004534:	3501      	adds	r5, #1
 8004536:	68e3      	ldr	r3, [r4, #12]
 8004538:	9903      	ldr	r1, [sp, #12]
 800453a:	1a5b      	subs	r3, r3, r1
 800453c:	42ab      	cmp	r3, r5
 800453e:	dcf2      	bgt.n	8004526 <_printf_i+0x21e>
 8004540:	e7eb      	b.n	800451a <_printf_i+0x212>
 8004542:	2500      	movs	r5, #0
 8004544:	f104 0619 	add.w	r6, r4, #25
 8004548:	e7f5      	b.n	8004536 <_printf_i+0x22e>
 800454a:	bf00      	nop
 800454c:	08009656 	.word	0x08009656
 8004550:	08009667 	.word	0x08009667

08004554 <_scanf_float>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	b087      	sub	sp, #28
 800455a:	4617      	mov	r7, r2
 800455c:	9303      	str	r3, [sp, #12]
 800455e:	688b      	ldr	r3, [r1, #8]
 8004560:	1e5a      	subs	r2, r3, #1
 8004562:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004566:	bf83      	ittte	hi
 8004568:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800456c:	195b      	addhi	r3, r3, r5
 800456e:	9302      	strhi	r3, [sp, #8]
 8004570:	2300      	movls	r3, #0
 8004572:	bf86      	itte	hi
 8004574:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004578:	608b      	strhi	r3, [r1, #8]
 800457a:	9302      	strls	r3, [sp, #8]
 800457c:	680b      	ldr	r3, [r1, #0]
 800457e:	468b      	mov	fp, r1
 8004580:	2500      	movs	r5, #0
 8004582:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004586:	f84b 3b1c 	str.w	r3, [fp], #28
 800458a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800458e:	4680      	mov	r8, r0
 8004590:	460c      	mov	r4, r1
 8004592:	465e      	mov	r6, fp
 8004594:	46aa      	mov	sl, r5
 8004596:	46a9      	mov	r9, r5
 8004598:	9501      	str	r5, [sp, #4]
 800459a:	68a2      	ldr	r2, [r4, #8]
 800459c:	b152      	cbz	r2, 80045b4 <_scanf_float+0x60>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b4e      	cmp	r3, #78	; 0x4e
 80045a4:	d864      	bhi.n	8004670 <_scanf_float+0x11c>
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d83c      	bhi.n	8004624 <_scanf_float+0xd0>
 80045aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80045ae:	b2c8      	uxtb	r0, r1
 80045b0:	280e      	cmp	r0, #14
 80045b2:	d93a      	bls.n	800462a <_scanf_float+0xd6>
 80045b4:	f1b9 0f00 	cmp.w	r9, #0
 80045b8:	d003      	beq.n	80045c2 <_scanf_float+0x6e>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045c6:	f1ba 0f01 	cmp.w	sl, #1
 80045ca:	f200 8113 	bhi.w	80047f4 <_scanf_float+0x2a0>
 80045ce:	455e      	cmp	r6, fp
 80045d0:	f200 8105 	bhi.w	80047de <_scanf_float+0x28a>
 80045d4:	2501      	movs	r5, #1
 80045d6:	4628      	mov	r0, r5
 80045d8:	b007      	add	sp, #28
 80045da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80045e2:	2a0d      	cmp	r2, #13
 80045e4:	d8e6      	bhi.n	80045b4 <_scanf_float+0x60>
 80045e6:	a101      	add	r1, pc, #4	; (adr r1, 80045ec <_scanf_float+0x98>)
 80045e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045ec:	0800472b 	.word	0x0800472b
 80045f0:	080045b5 	.word	0x080045b5
 80045f4:	080045b5 	.word	0x080045b5
 80045f8:	080045b5 	.word	0x080045b5
 80045fc:	0800478b 	.word	0x0800478b
 8004600:	08004763 	.word	0x08004763
 8004604:	080045b5 	.word	0x080045b5
 8004608:	080045b5 	.word	0x080045b5
 800460c:	08004739 	.word	0x08004739
 8004610:	080045b5 	.word	0x080045b5
 8004614:	080045b5 	.word	0x080045b5
 8004618:	080045b5 	.word	0x080045b5
 800461c:	080045b5 	.word	0x080045b5
 8004620:	080046f1 	.word	0x080046f1
 8004624:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004628:	e7db      	b.n	80045e2 <_scanf_float+0x8e>
 800462a:	290e      	cmp	r1, #14
 800462c:	d8c2      	bhi.n	80045b4 <_scanf_float+0x60>
 800462e:	a001      	add	r0, pc, #4	; (adr r0, 8004634 <_scanf_float+0xe0>)
 8004630:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004634:	080046e3 	.word	0x080046e3
 8004638:	080045b5 	.word	0x080045b5
 800463c:	080046e3 	.word	0x080046e3
 8004640:	08004777 	.word	0x08004777
 8004644:	080045b5 	.word	0x080045b5
 8004648:	08004691 	.word	0x08004691
 800464c:	080046cd 	.word	0x080046cd
 8004650:	080046cd 	.word	0x080046cd
 8004654:	080046cd 	.word	0x080046cd
 8004658:	080046cd 	.word	0x080046cd
 800465c:	080046cd 	.word	0x080046cd
 8004660:	080046cd 	.word	0x080046cd
 8004664:	080046cd 	.word	0x080046cd
 8004668:	080046cd 	.word	0x080046cd
 800466c:	080046cd 	.word	0x080046cd
 8004670:	2b6e      	cmp	r3, #110	; 0x6e
 8004672:	d809      	bhi.n	8004688 <_scanf_float+0x134>
 8004674:	2b60      	cmp	r3, #96	; 0x60
 8004676:	d8b2      	bhi.n	80045de <_scanf_float+0x8a>
 8004678:	2b54      	cmp	r3, #84	; 0x54
 800467a:	d077      	beq.n	800476c <_scanf_float+0x218>
 800467c:	2b59      	cmp	r3, #89	; 0x59
 800467e:	d199      	bne.n	80045b4 <_scanf_float+0x60>
 8004680:	2d07      	cmp	r5, #7
 8004682:	d197      	bne.n	80045b4 <_scanf_float+0x60>
 8004684:	2508      	movs	r5, #8
 8004686:	e029      	b.n	80046dc <_scanf_float+0x188>
 8004688:	2b74      	cmp	r3, #116	; 0x74
 800468a:	d06f      	beq.n	800476c <_scanf_float+0x218>
 800468c:	2b79      	cmp	r3, #121	; 0x79
 800468e:	e7f6      	b.n	800467e <_scanf_float+0x12a>
 8004690:	6821      	ldr	r1, [r4, #0]
 8004692:	05c8      	lsls	r0, r1, #23
 8004694:	d51a      	bpl.n	80046cc <_scanf_float+0x178>
 8004696:	9b02      	ldr	r3, [sp, #8]
 8004698:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800469c:	6021      	str	r1, [r4, #0]
 800469e:	f109 0901 	add.w	r9, r9, #1
 80046a2:	b11b      	cbz	r3, 80046ac <_scanf_float+0x158>
 80046a4:	3b01      	subs	r3, #1
 80046a6:	3201      	adds	r2, #1
 80046a8:	9302      	str	r3, [sp, #8]
 80046aa:	60a2      	str	r2, [r4, #8]
 80046ac:	68a3      	ldr	r3, [r4, #8]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	60a3      	str	r3, [r4, #8]
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	3301      	adds	r3, #1
 80046b6:	6123      	str	r3, [r4, #16]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	f340 8084 	ble.w	80047cc <_scanf_float+0x278>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	3301      	adds	r3, #1
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	e766      	b.n	800459a <_scanf_float+0x46>
 80046cc:	eb1a 0f05 	cmn.w	sl, r5
 80046d0:	f47f af70 	bne.w	80045b4 <_scanf_float+0x60>
 80046d4:	6822      	ldr	r2, [r4, #0]
 80046d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80046da:	6022      	str	r2, [r4, #0]
 80046dc:	f806 3b01 	strb.w	r3, [r6], #1
 80046e0:	e7e4      	b.n	80046ac <_scanf_float+0x158>
 80046e2:	6822      	ldr	r2, [r4, #0]
 80046e4:	0610      	lsls	r0, r2, #24
 80046e6:	f57f af65 	bpl.w	80045b4 <_scanf_float+0x60>
 80046ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ee:	e7f4      	b.n	80046da <_scanf_float+0x186>
 80046f0:	f1ba 0f00 	cmp.w	sl, #0
 80046f4:	d10e      	bne.n	8004714 <_scanf_float+0x1c0>
 80046f6:	f1b9 0f00 	cmp.w	r9, #0
 80046fa:	d10e      	bne.n	800471a <_scanf_float+0x1c6>
 80046fc:	6822      	ldr	r2, [r4, #0]
 80046fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004702:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004706:	d108      	bne.n	800471a <_scanf_float+0x1c6>
 8004708:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800470c:	6022      	str	r2, [r4, #0]
 800470e:	f04f 0a01 	mov.w	sl, #1
 8004712:	e7e3      	b.n	80046dc <_scanf_float+0x188>
 8004714:	f1ba 0f02 	cmp.w	sl, #2
 8004718:	d055      	beq.n	80047c6 <_scanf_float+0x272>
 800471a:	2d01      	cmp	r5, #1
 800471c:	d002      	beq.n	8004724 <_scanf_float+0x1d0>
 800471e:	2d04      	cmp	r5, #4
 8004720:	f47f af48 	bne.w	80045b4 <_scanf_float+0x60>
 8004724:	3501      	adds	r5, #1
 8004726:	b2ed      	uxtb	r5, r5
 8004728:	e7d8      	b.n	80046dc <_scanf_float+0x188>
 800472a:	f1ba 0f01 	cmp.w	sl, #1
 800472e:	f47f af41 	bne.w	80045b4 <_scanf_float+0x60>
 8004732:	f04f 0a02 	mov.w	sl, #2
 8004736:	e7d1      	b.n	80046dc <_scanf_float+0x188>
 8004738:	b97d      	cbnz	r5, 800475a <_scanf_float+0x206>
 800473a:	f1b9 0f00 	cmp.w	r9, #0
 800473e:	f47f af3c 	bne.w	80045ba <_scanf_float+0x66>
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004748:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800474c:	f47f af39 	bne.w	80045c2 <_scanf_float+0x6e>
 8004750:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004754:	6022      	str	r2, [r4, #0]
 8004756:	2501      	movs	r5, #1
 8004758:	e7c0      	b.n	80046dc <_scanf_float+0x188>
 800475a:	2d03      	cmp	r5, #3
 800475c:	d0e2      	beq.n	8004724 <_scanf_float+0x1d0>
 800475e:	2d05      	cmp	r5, #5
 8004760:	e7de      	b.n	8004720 <_scanf_float+0x1cc>
 8004762:	2d02      	cmp	r5, #2
 8004764:	f47f af26 	bne.w	80045b4 <_scanf_float+0x60>
 8004768:	2503      	movs	r5, #3
 800476a:	e7b7      	b.n	80046dc <_scanf_float+0x188>
 800476c:	2d06      	cmp	r5, #6
 800476e:	f47f af21 	bne.w	80045b4 <_scanf_float+0x60>
 8004772:	2507      	movs	r5, #7
 8004774:	e7b2      	b.n	80046dc <_scanf_float+0x188>
 8004776:	6822      	ldr	r2, [r4, #0]
 8004778:	0591      	lsls	r1, r2, #22
 800477a:	f57f af1b 	bpl.w	80045b4 <_scanf_float+0x60>
 800477e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004782:	6022      	str	r2, [r4, #0]
 8004784:	f8cd 9004 	str.w	r9, [sp, #4]
 8004788:	e7a8      	b.n	80046dc <_scanf_float+0x188>
 800478a:	6822      	ldr	r2, [r4, #0]
 800478c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004790:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004794:	d006      	beq.n	80047a4 <_scanf_float+0x250>
 8004796:	0550      	lsls	r0, r2, #21
 8004798:	f57f af0c 	bpl.w	80045b4 <_scanf_float+0x60>
 800479c:	f1b9 0f00 	cmp.w	r9, #0
 80047a0:	f43f af0f 	beq.w	80045c2 <_scanf_float+0x6e>
 80047a4:	0591      	lsls	r1, r2, #22
 80047a6:	bf58      	it	pl
 80047a8:	9901      	ldrpl	r1, [sp, #4]
 80047aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80047ae:	bf58      	it	pl
 80047b0:	eba9 0101 	subpl.w	r1, r9, r1
 80047b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80047b8:	bf58      	it	pl
 80047ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80047be:	6022      	str	r2, [r4, #0]
 80047c0:	f04f 0900 	mov.w	r9, #0
 80047c4:	e78a      	b.n	80046dc <_scanf_float+0x188>
 80047c6:	f04f 0a03 	mov.w	sl, #3
 80047ca:	e787      	b.n	80046dc <_scanf_float+0x188>
 80047cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047d0:	4639      	mov	r1, r7
 80047d2:	4640      	mov	r0, r8
 80047d4:	4798      	blx	r3
 80047d6:	2800      	cmp	r0, #0
 80047d8:	f43f aedf 	beq.w	800459a <_scanf_float+0x46>
 80047dc:	e6ea      	b.n	80045b4 <_scanf_float+0x60>
 80047de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047e6:	463a      	mov	r2, r7
 80047e8:	4640      	mov	r0, r8
 80047ea:	4798      	blx	r3
 80047ec:	6923      	ldr	r3, [r4, #16]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	6123      	str	r3, [r4, #16]
 80047f2:	e6ec      	b.n	80045ce <_scanf_float+0x7a>
 80047f4:	1e6b      	subs	r3, r5, #1
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	d825      	bhi.n	8004846 <_scanf_float+0x2f2>
 80047fa:	2d02      	cmp	r5, #2
 80047fc:	d836      	bhi.n	800486c <_scanf_float+0x318>
 80047fe:	455e      	cmp	r6, fp
 8004800:	f67f aee8 	bls.w	80045d4 <_scanf_float+0x80>
 8004804:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004808:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800480c:	463a      	mov	r2, r7
 800480e:	4640      	mov	r0, r8
 8004810:	4798      	blx	r3
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	3b01      	subs	r3, #1
 8004816:	6123      	str	r3, [r4, #16]
 8004818:	e7f1      	b.n	80047fe <_scanf_float+0x2aa>
 800481a:	9802      	ldr	r0, [sp, #8]
 800481c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004820:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004824:	9002      	str	r0, [sp, #8]
 8004826:	463a      	mov	r2, r7
 8004828:	4640      	mov	r0, r8
 800482a:	4798      	blx	r3
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	3b01      	subs	r3, #1
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004836:	fa5f fa8a 	uxtb.w	sl, sl
 800483a:	f1ba 0f02 	cmp.w	sl, #2
 800483e:	d1ec      	bne.n	800481a <_scanf_float+0x2c6>
 8004840:	3d03      	subs	r5, #3
 8004842:	b2ed      	uxtb	r5, r5
 8004844:	1b76      	subs	r6, r6, r5
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	05da      	lsls	r2, r3, #23
 800484a:	d52f      	bpl.n	80048ac <_scanf_float+0x358>
 800484c:	055b      	lsls	r3, r3, #21
 800484e:	d510      	bpl.n	8004872 <_scanf_float+0x31e>
 8004850:	455e      	cmp	r6, fp
 8004852:	f67f aebf 	bls.w	80045d4 <_scanf_float+0x80>
 8004856:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800485a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800485e:	463a      	mov	r2, r7
 8004860:	4640      	mov	r0, r8
 8004862:	4798      	blx	r3
 8004864:	6923      	ldr	r3, [r4, #16]
 8004866:	3b01      	subs	r3, #1
 8004868:	6123      	str	r3, [r4, #16]
 800486a:	e7f1      	b.n	8004850 <_scanf_float+0x2fc>
 800486c:	46aa      	mov	sl, r5
 800486e:	9602      	str	r6, [sp, #8]
 8004870:	e7df      	b.n	8004832 <_scanf_float+0x2de>
 8004872:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	2965      	cmp	r1, #101	; 0x65
 800487a:	f103 33ff 	add.w	r3, r3, #4294967295
 800487e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004882:	6123      	str	r3, [r4, #16]
 8004884:	d00c      	beq.n	80048a0 <_scanf_float+0x34c>
 8004886:	2945      	cmp	r1, #69	; 0x45
 8004888:	d00a      	beq.n	80048a0 <_scanf_float+0x34c>
 800488a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800488e:	463a      	mov	r2, r7
 8004890:	4640      	mov	r0, r8
 8004892:	4798      	blx	r3
 8004894:	6923      	ldr	r3, [r4, #16]
 8004896:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800489a:	3b01      	subs	r3, #1
 800489c:	1eb5      	subs	r5, r6, #2
 800489e:	6123      	str	r3, [r4, #16]
 80048a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048a4:	463a      	mov	r2, r7
 80048a6:	4640      	mov	r0, r8
 80048a8:	4798      	blx	r3
 80048aa:	462e      	mov	r6, r5
 80048ac:	6825      	ldr	r5, [r4, #0]
 80048ae:	f015 0510 	ands.w	r5, r5, #16
 80048b2:	d159      	bne.n	8004968 <_scanf_float+0x414>
 80048b4:	7035      	strb	r5, [r6, #0]
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c0:	d11b      	bne.n	80048fa <_scanf_float+0x3a6>
 80048c2:	9b01      	ldr	r3, [sp, #4]
 80048c4:	454b      	cmp	r3, r9
 80048c6:	eba3 0209 	sub.w	r2, r3, r9
 80048ca:	d123      	bne.n	8004914 <_scanf_float+0x3c0>
 80048cc:	2200      	movs	r2, #0
 80048ce:	4659      	mov	r1, fp
 80048d0:	4640      	mov	r0, r8
 80048d2:	f000 fe97 	bl	8005604 <_strtod_r>
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	9b03      	ldr	r3, [sp, #12]
 80048da:	f012 0f02 	tst.w	r2, #2
 80048de:	ec57 6b10 	vmov	r6, r7, d0
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	d021      	beq.n	800492a <_scanf_float+0x3d6>
 80048e6:	9903      	ldr	r1, [sp, #12]
 80048e8:	1d1a      	adds	r2, r3, #4
 80048ea:	600a      	str	r2, [r1, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	e9c3 6700 	strd	r6, r7, [r3]
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	3301      	adds	r3, #1
 80048f6:	60e3      	str	r3, [r4, #12]
 80048f8:	e66d      	b.n	80045d6 <_scanf_float+0x82>
 80048fa:	9b04      	ldr	r3, [sp, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0e5      	beq.n	80048cc <_scanf_float+0x378>
 8004900:	9905      	ldr	r1, [sp, #20]
 8004902:	230a      	movs	r3, #10
 8004904:	462a      	mov	r2, r5
 8004906:	3101      	adds	r1, #1
 8004908:	4640      	mov	r0, r8
 800490a:	f000 ff03 	bl	8005714 <_strtol_r>
 800490e:	9b04      	ldr	r3, [sp, #16]
 8004910:	9e05      	ldr	r6, [sp, #20]
 8004912:	1ac2      	subs	r2, r0, r3
 8004914:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004918:	429e      	cmp	r6, r3
 800491a:	bf28      	it	cs
 800491c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004920:	4912      	ldr	r1, [pc, #72]	; (800496c <_scanf_float+0x418>)
 8004922:	4630      	mov	r0, r6
 8004924:	f000 f82c 	bl	8004980 <siprintf>
 8004928:	e7d0      	b.n	80048cc <_scanf_float+0x378>
 800492a:	9903      	ldr	r1, [sp, #12]
 800492c:	f012 0f04 	tst.w	r2, #4
 8004930:	f103 0204 	add.w	r2, r3, #4
 8004934:	600a      	str	r2, [r1, #0]
 8004936:	d1d9      	bne.n	80048ec <_scanf_float+0x398>
 8004938:	f8d3 8000 	ldr.w	r8, [r3]
 800493c:	ee10 2a10 	vmov	r2, s0
 8004940:	ee10 0a10 	vmov	r0, s0
 8004944:	463b      	mov	r3, r7
 8004946:	4639      	mov	r1, r7
 8004948:	f7fc f8f8 	bl	8000b3c <__aeabi_dcmpun>
 800494c:	b128      	cbz	r0, 800495a <_scanf_float+0x406>
 800494e:	4808      	ldr	r0, [pc, #32]	; (8004970 <_scanf_float+0x41c>)
 8004950:	f000 f810 	bl	8004974 <nanf>
 8004954:	ed88 0a00 	vstr	s0, [r8]
 8004958:	e7cb      	b.n	80048f2 <_scanf_float+0x39e>
 800495a:	4630      	mov	r0, r6
 800495c:	4639      	mov	r1, r7
 800495e:	f7fc f94b 	bl	8000bf8 <__aeabi_d2f>
 8004962:	f8c8 0000 	str.w	r0, [r8]
 8004966:	e7c4      	b.n	80048f2 <_scanf_float+0x39e>
 8004968:	2500      	movs	r5, #0
 800496a:	e634      	b.n	80045d6 <_scanf_float+0x82>
 800496c:	08009678 	.word	0x08009678
 8004970:	08009a80 	.word	0x08009a80

08004974 <nanf>:
 8004974:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800497c <nanf+0x8>
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	7fc00000 	.word	0x7fc00000

08004980 <siprintf>:
 8004980:	b40e      	push	{r1, r2, r3}
 8004982:	b500      	push	{lr}
 8004984:	b09c      	sub	sp, #112	; 0x70
 8004986:	ab1d      	add	r3, sp, #116	; 0x74
 8004988:	9002      	str	r0, [sp, #8]
 800498a:	9006      	str	r0, [sp, #24]
 800498c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004990:	4809      	ldr	r0, [pc, #36]	; (80049b8 <siprintf+0x38>)
 8004992:	9107      	str	r1, [sp, #28]
 8004994:	9104      	str	r1, [sp, #16]
 8004996:	4909      	ldr	r1, [pc, #36]	; (80049bc <siprintf+0x3c>)
 8004998:	f853 2b04 	ldr.w	r2, [r3], #4
 800499c:	9105      	str	r1, [sp, #20]
 800499e:	6800      	ldr	r0, [r0, #0]
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	a902      	add	r1, sp, #8
 80049a4:	f002 fee2 	bl	800776c <_svfiprintf_r>
 80049a8:	9b02      	ldr	r3, [sp, #8]
 80049aa:	2200      	movs	r2, #0
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	b01c      	add	sp, #112	; 0x70
 80049b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049b4:	b003      	add	sp, #12
 80049b6:	4770      	bx	lr
 80049b8:	20000010 	.word	0x20000010
 80049bc:	ffff0208 	.word	0xffff0208

080049c0 <sulp>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4604      	mov	r4, r0
 80049c4:	460d      	mov	r5, r1
 80049c6:	ec45 4b10 	vmov	d0, r4, r5
 80049ca:	4616      	mov	r6, r2
 80049cc:	f002 fc2c 	bl	8007228 <__ulp>
 80049d0:	ec51 0b10 	vmov	r0, r1, d0
 80049d4:	b17e      	cbz	r6, 80049f6 <sulp+0x36>
 80049d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80049da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80049de:	2b00      	cmp	r3, #0
 80049e0:	dd09      	ble.n	80049f6 <sulp+0x36>
 80049e2:	051b      	lsls	r3, r3, #20
 80049e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80049e8:	2400      	movs	r4, #0
 80049ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	f7fb fe09 	bl	8000608 <__aeabi_dmul>
 80049f6:	bd70      	pop	{r4, r5, r6, pc}

080049f8 <_strtod_l>:
 80049f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fc:	ed2d 8b02 	vpush	{d8}
 8004a00:	b09d      	sub	sp, #116	; 0x74
 8004a02:	461f      	mov	r7, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	9318      	str	r3, [sp, #96]	; 0x60
 8004a08:	4ba2      	ldr	r3, [pc, #648]	; (8004c94 <_strtod_l+0x29c>)
 8004a0a:	9213      	str	r2, [sp, #76]	; 0x4c
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	9305      	str	r3, [sp, #20]
 8004a10:	4604      	mov	r4, r0
 8004a12:	4618      	mov	r0, r3
 8004a14:	4688      	mov	r8, r1
 8004a16:	f7fb fbe3 	bl	80001e0 <strlen>
 8004a1a:	f04f 0a00 	mov.w	sl, #0
 8004a1e:	4605      	mov	r5, r0
 8004a20:	f04f 0b00 	mov.w	fp, #0
 8004a24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004a28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a2a:	781a      	ldrb	r2, [r3, #0]
 8004a2c:	2a2b      	cmp	r2, #43	; 0x2b
 8004a2e:	d04e      	beq.n	8004ace <_strtod_l+0xd6>
 8004a30:	d83b      	bhi.n	8004aaa <_strtod_l+0xb2>
 8004a32:	2a0d      	cmp	r2, #13
 8004a34:	d834      	bhi.n	8004aa0 <_strtod_l+0xa8>
 8004a36:	2a08      	cmp	r2, #8
 8004a38:	d834      	bhi.n	8004aa4 <_strtod_l+0xac>
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	d03e      	beq.n	8004abc <_strtod_l+0xc4>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	930a      	str	r3, [sp, #40]	; 0x28
 8004a42:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004a44:	7833      	ldrb	r3, [r6, #0]
 8004a46:	2b30      	cmp	r3, #48	; 0x30
 8004a48:	f040 80b0 	bne.w	8004bac <_strtod_l+0x1b4>
 8004a4c:	7873      	ldrb	r3, [r6, #1]
 8004a4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004a52:	2b58      	cmp	r3, #88	; 0x58
 8004a54:	d168      	bne.n	8004b28 <_strtod_l+0x130>
 8004a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	ab18      	add	r3, sp, #96	; 0x60
 8004a5c:	9702      	str	r7, [sp, #8]
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	4a8d      	ldr	r2, [pc, #564]	; (8004c98 <_strtod_l+0x2a0>)
 8004a62:	ab19      	add	r3, sp, #100	; 0x64
 8004a64:	a917      	add	r1, sp, #92	; 0x5c
 8004a66:	4620      	mov	r0, r4
 8004a68:	f001 fd38 	bl	80064dc <__gethex>
 8004a6c:	f010 0707 	ands.w	r7, r0, #7
 8004a70:	4605      	mov	r5, r0
 8004a72:	d005      	beq.n	8004a80 <_strtod_l+0x88>
 8004a74:	2f06      	cmp	r7, #6
 8004a76:	d12c      	bne.n	8004ad2 <_strtod_l+0xda>
 8004a78:	3601      	adds	r6, #1
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	9617      	str	r6, [sp, #92]	; 0x5c
 8004a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f040 8590 	bne.w	80055a8 <_strtod_l+0xbb0>
 8004a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a8a:	b1eb      	cbz	r3, 8004ac8 <_strtod_l+0xd0>
 8004a8c:	4652      	mov	r2, sl
 8004a8e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004a92:	ec43 2b10 	vmov	d0, r2, r3
 8004a96:	b01d      	add	sp, #116	; 0x74
 8004a98:	ecbd 8b02 	vpop	{d8}
 8004a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa0:	2a20      	cmp	r2, #32
 8004aa2:	d1cc      	bne.n	8004a3e <_strtod_l+0x46>
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8004aa8:	e7be      	b.n	8004a28 <_strtod_l+0x30>
 8004aaa:	2a2d      	cmp	r2, #45	; 0x2d
 8004aac:	d1c7      	bne.n	8004a3e <_strtod_l+0x46>
 8004aae:	2201      	movs	r2, #1
 8004ab0:	920a      	str	r2, [sp, #40]	; 0x28
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1c2      	bne.n	8004a42 <_strtod_l+0x4a>
 8004abc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004abe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 856e 	bne.w	80055a4 <_strtod_l+0xbac>
 8004ac8:	4652      	mov	r2, sl
 8004aca:	465b      	mov	r3, fp
 8004acc:	e7e1      	b.n	8004a92 <_strtod_l+0x9a>
 8004ace:	2200      	movs	r2, #0
 8004ad0:	e7ee      	b.n	8004ab0 <_strtod_l+0xb8>
 8004ad2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004ad4:	b13a      	cbz	r2, 8004ae6 <_strtod_l+0xee>
 8004ad6:	2135      	movs	r1, #53	; 0x35
 8004ad8:	a81a      	add	r0, sp, #104	; 0x68
 8004ada:	f002 fcb0 	bl	800743e <__copybits>
 8004ade:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f002 f86f 	bl	8006bc4 <_Bfree>
 8004ae6:	3f01      	subs	r7, #1
 8004ae8:	2f04      	cmp	r7, #4
 8004aea:	d806      	bhi.n	8004afa <_strtod_l+0x102>
 8004aec:	e8df f007 	tbb	[pc, r7]
 8004af0:	1714030a 	.word	0x1714030a
 8004af4:	0a          	.byte	0x0a
 8004af5:	00          	.byte	0x00
 8004af6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004afa:	0728      	lsls	r0, r5, #28
 8004afc:	d5c0      	bpl.n	8004a80 <_strtod_l+0x88>
 8004afe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004b02:	e7bd      	b.n	8004a80 <_strtod_l+0x88>
 8004b04:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004b08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004b0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004b12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004b16:	e7f0      	b.n	8004afa <_strtod_l+0x102>
 8004b18:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004c9c <_strtod_l+0x2a4>
 8004b1c:	e7ed      	b.n	8004afa <_strtod_l+0x102>
 8004b1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004b22:	f04f 3aff 	mov.w	sl, #4294967295
 8004b26:	e7e8      	b.n	8004afa <_strtod_l+0x102>
 8004b28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	2b30      	cmp	r3, #48	; 0x30
 8004b32:	d0f9      	beq.n	8004b28 <_strtod_l+0x130>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0a3      	beq.n	8004a80 <_strtod_l+0x88>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f04f 0900 	mov.w	r9, #0
 8004b3e:	9304      	str	r3, [sp, #16]
 8004b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b42:	9308      	str	r3, [sp, #32]
 8004b44:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b48:	464f      	mov	r7, r9
 8004b4a:	220a      	movs	r2, #10
 8004b4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004b4e:	7806      	ldrb	r6, [r0, #0]
 8004b50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004b54:	b2d9      	uxtb	r1, r3
 8004b56:	2909      	cmp	r1, #9
 8004b58:	d92a      	bls.n	8004bb0 <_strtod_l+0x1b8>
 8004b5a:	9905      	ldr	r1, [sp, #20]
 8004b5c:	462a      	mov	r2, r5
 8004b5e:	f002 ff1f 	bl	80079a0 <strncmp>
 8004b62:	b398      	cbz	r0, 8004bcc <_strtod_l+0x1d4>
 8004b64:	2000      	movs	r0, #0
 8004b66:	4632      	mov	r2, r6
 8004b68:	463d      	mov	r5, r7
 8004b6a:	9005      	str	r0, [sp, #20]
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2a65      	cmp	r2, #101	; 0x65
 8004b70:	d001      	beq.n	8004b76 <_strtod_l+0x17e>
 8004b72:	2a45      	cmp	r2, #69	; 0x45
 8004b74:	d118      	bne.n	8004ba8 <_strtod_l+0x1b0>
 8004b76:	b91d      	cbnz	r5, 8004b80 <_strtod_l+0x188>
 8004b78:	9a04      	ldr	r2, [sp, #16]
 8004b7a:	4302      	orrs	r2, r0
 8004b7c:	d09e      	beq.n	8004abc <_strtod_l+0xc4>
 8004b7e:	2500      	movs	r5, #0
 8004b80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004b84:	f108 0201 	add.w	r2, r8, #1
 8004b88:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b8a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004b8e:	2a2b      	cmp	r2, #43	; 0x2b
 8004b90:	d075      	beq.n	8004c7e <_strtod_l+0x286>
 8004b92:	2a2d      	cmp	r2, #45	; 0x2d
 8004b94:	d07b      	beq.n	8004c8e <_strtod_l+0x296>
 8004b96:	f04f 0c00 	mov.w	ip, #0
 8004b9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004b9e:	2909      	cmp	r1, #9
 8004ba0:	f240 8082 	bls.w	8004ca8 <_strtod_l+0x2b0>
 8004ba4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004ba8:	2600      	movs	r6, #0
 8004baa:	e09d      	b.n	8004ce8 <_strtod_l+0x2f0>
 8004bac:	2300      	movs	r3, #0
 8004bae:	e7c4      	b.n	8004b3a <_strtod_l+0x142>
 8004bb0:	2f08      	cmp	r7, #8
 8004bb2:	bfd8      	it	le
 8004bb4:	9907      	ldrle	r1, [sp, #28]
 8004bb6:	f100 0001 	add.w	r0, r0, #1
 8004bba:	bfda      	itte	le
 8004bbc:	fb02 3301 	mlale	r3, r2, r1, r3
 8004bc0:	9307      	strle	r3, [sp, #28]
 8004bc2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004bc6:	3701      	adds	r7, #1
 8004bc8:	9017      	str	r0, [sp, #92]	; 0x5c
 8004bca:	e7bf      	b.n	8004b4c <_strtod_l+0x154>
 8004bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bce:	195a      	adds	r2, r3, r5
 8004bd0:	9217      	str	r2, [sp, #92]	; 0x5c
 8004bd2:	5d5a      	ldrb	r2, [r3, r5]
 8004bd4:	2f00      	cmp	r7, #0
 8004bd6:	d037      	beq.n	8004c48 <_strtod_l+0x250>
 8004bd8:	9005      	str	r0, [sp, #20]
 8004bda:	463d      	mov	r5, r7
 8004bdc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004be0:	2b09      	cmp	r3, #9
 8004be2:	d912      	bls.n	8004c0a <_strtod_l+0x212>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e7c2      	b.n	8004b6e <_strtod_l+0x176>
 8004be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	9217      	str	r2, [sp, #92]	; 0x5c
 8004bee:	785a      	ldrb	r2, [r3, #1]
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	2a30      	cmp	r2, #48	; 0x30
 8004bf4:	d0f8      	beq.n	8004be8 <_strtod_l+0x1f0>
 8004bf6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	f200 84d9 	bhi.w	80055b2 <_strtod_l+0xbba>
 8004c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c02:	9005      	str	r0, [sp, #20]
 8004c04:	2000      	movs	r0, #0
 8004c06:	9308      	str	r3, [sp, #32]
 8004c08:	4605      	mov	r5, r0
 8004c0a:	3a30      	subs	r2, #48	; 0x30
 8004c0c:	f100 0301 	add.w	r3, r0, #1
 8004c10:	d014      	beq.n	8004c3c <_strtod_l+0x244>
 8004c12:	9905      	ldr	r1, [sp, #20]
 8004c14:	4419      	add	r1, r3
 8004c16:	9105      	str	r1, [sp, #20]
 8004c18:	462b      	mov	r3, r5
 8004c1a:	eb00 0e05 	add.w	lr, r0, r5
 8004c1e:	210a      	movs	r1, #10
 8004c20:	4573      	cmp	r3, lr
 8004c22:	d113      	bne.n	8004c4c <_strtod_l+0x254>
 8004c24:	182b      	adds	r3, r5, r0
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	f105 0501 	add.w	r5, r5, #1
 8004c2c:	4405      	add	r5, r0
 8004c2e:	dc1c      	bgt.n	8004c6a <_strtod_l+0x272>
 8004c30:	9907      	ldr	r1, [sp, #28]
 8004c32:	230a      	movs	r3, #10
 8004c34:	fb03 2301 	mla	r3, r3, r1, r2
 8004c38:	9307      	str	r3, [sp, #28]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004c3e:	1c51      	adds	r1, r2, #1
 8004c40:	9117      	str	r1, [sp, #92]	; 0x5c
 8004c42:	7852      	ldrb	r2, [r2, #1]
 8004c44:	4618      	mov	r0, r3
 8004c46:	e7c9      	b.n	8004bdc <_strtod_l+0x1e4>
 8004c48:	4638      	mov	r0, r7
 8004c4a:	e7d2      	b.n	8004bf2 <_strtod_l+0x1fa>
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	dc04      	bgt.n	8004c5a <_strtod_l+0x262>
 8004c50:	9e07      	ldr	r6, [sp, #28]
 8004c52:	434e      	muls	r6, r1
 8004c54:	9607      	str	r6, [sp, #28]
 8004c56:	3301      	adds	r3, #1
 8004c58:	e7e2      	b.n	8004c20 <_strtod_l+0x228>
 8004c5a:	f103 0c01 	add.w	ip, r3, #1
 8004c5e:	f1bc 0f10 	cmp.w	ip, #16
 8004c62:	bfd8      	it	le
 8004c64:	fb01 f909 	mulle.w	r9, r1, r9
 8004c68:	e7f5      	b.n	8004c56 <_strtod_l+0x25e>
 8004c6a:	2d10      	cmp	r5, #16
 8004c6c:	bfdc      	itt	le
 8004c6e:	230a      	movle	r3, #10
 8004c70:	fb03 2909 	mlale	r9, r3, r9, r2
 8004c74:	e7e1      	b.n	8004c3a <_strtod_l+0x242>
 8004c76:	2300      	movs	r3, #0
 8004c78:	9305      	str	r3, [sp, #20]
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e77c      	b.n	8004b78 <_strtod_l+0x180>
 8004c7e:	f04f 0c00 	mov.w	ip, #0
 8004c82:	f108 0202 	add.w	r2, r8, #2
 8004c86:	9217      	str	r2, [sp, #92]	; 0x5c
 8004c88:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004c8c:	e785      	b.n	8004b9a <_strtod_l+0x1a2>
 8004c8e:	f04f 0c01 	mov.w	ip, #1
 8004c92:	e7f6      	b.n	8004c82 <_strtod_l+0x28a>
 8004c94:	080098c8 	.word	0x080098c8
 8004c98:	08009680 	.word	0x08009680
 8004c9c:	7ff00000 	.word	0x7ff00000
 8004ca0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004ca2:	1c51      	adds	r1, r2, #1
 8004ca4:	9117      	str	r1, [sp, #92]	; 0x5c
 8004ca6:	7852      	ldrb	r2, [r2, #1]
 8004ca8:	2a30      	cmp	r2, #48	; 0x30
 8004caa:	d0f9      	beq.n	8004ca0 <_strtod_l+0x2a8>
 8004cac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004cb0:	2908      	cmp	r1, #8
 8004cb2:	f63f af79 	bhi.w	8004ba8 <_strtod_l+0x1b0>
 8004cb6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004cba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004cbc:	9206      	str	r2, [sp, #24]
 8004cbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004cc0:	1c51      	adds	r1, r2, #1
 8004cc2:	9117      	str	r1, [sp, #92]	; 0x5c
 8004cc4:	7852      	ldrb	r2, [r2, #1]
 8004cc6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004cca:	2e09      	cmp	r6, #9
 8004ccc:	d937      	bls.n	8004d3e <_strtod_l+0x346>
 8004cce:	9e06      	ldr	r6, [sp, #24]
 8004cd0:	1b89      	subs	r1, r1, r6
 8004cd2:	2908      	cmp	r1, #8
 8004cd4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004cd8:	dc02      	bgt.n	8004ce0 <_strtod_l+0x2e8>
 8004cda:	4576      	cmp	r6, lr
 8004cdc:	bfa8      	it	ge
 8004cde:	4676      	movge	r6, lr
 8004ce0:	f1bc 0f00 	cmp.w	ip, #0
 8004ce4:	d000      	beq.n	8004ce8 <_strtod_l+0x2f0>
 8004ce6:	4276      	negs	r6, r6
 8004ce8:	2d00      	cmp	r5, #0
 8004cea:	d14d      	bne.n	8004d88 <_strtod_l+0x390>
 8004cec:	9904      	ldr	r1, [sp, #16]
 8004cee:	4301      	orrs	r1, r0
 8004cf0:	f47f aec6 	bne.w	8004a80 <_strtod_l+0x88>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f47f aee1 	bne.w	8004abc <_strtod_l+0xc4>
 8004cfa:	2a69      	cmp	r2, #105	; 0x69
 8004cfc:	d027      	beq.n	8004d4e <_strtod_l+0x356>
 8004cfe:	dc24      	bgt.n	8004d4a <_strtod_l+0x352>
 8004d00:	2a49      	cmp	r2, #73	; 0x49
 8004d02:	d024      	beq.n	8004d4e <_strtod_l+0x356>
 8004d04:	2a4e      	cmp	r2, #78	; 0x4e
 8004d06:	f47f aed9 	bne.w	8004abc <_strtod_l+0xc4>
 8004d0a:	499f      	ldr	r1, [pc, #636]	; (8004f88 <_strtod_l+0x590>)
 8004d0c:	a817      	add	r0, sp, #92	; 0x5c
 8004d0e:	f001 fe3d 	bl	800698c <__match>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f43f aed2 	beq.w	8004abc <_strtod_l+0xc4>
 8004d18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b28      	cmp	r3, #40	; 0x28
 8004d1e:	d12d      	bne.n	8004d7c <_strtod_l+0x384>
 8004d20:	499a      	ldr	r1, [pc, #616]	; (8004f8c <_strtod_l+0x594>)
 8004d22:	aa1a      	add	r2, sp, #104	; 0x68
 8004d24:	a817      	add	r0, sp, #92	; 0x5c
 8004d26:	f001 fe45 	bl	80069b4 <__hexnan>
 8004d2a:	2805      	cmp	r0, #5
 8004d2c:	d126      	bne.n	8004d7c <_strtod_l+0x384>
 8004d2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d30:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004d34:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004d38:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004d3c:	e6a0      	b.n	8004a80 <_strtod_l+0x88>
 8004d3e:	210a      	movs	r1, #10
 8004d40:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004d44:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004d48:	e7b9      	b.n	8004cbe <_strtod_l+0x2c6>
 8004d4a:	2a6e      	cmp	r2, #110	; 0x6e
 8004d4c:	e7db      	b.n	8004d06 <_strtod_l+0x30e>
 8004d4e:	4990      	ldr	r1, [pc, #576]	; (8004f90 <_strtod_l+0x598>)
 8004d50:	a817      	add	r0, sp, #92	; 0x5c
 8004d52:	f001 fe1b 	bl	800698c <__match>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	f43f aeb0 	beq.w	8004abc <_strtod_l+0xc4>
 8004d5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d5e:	498d      	ldr	r1, [pc, #564]	; (8004f94 <_strtod_l+0x59c>)
 8004d60:	3b01      	subs	r3, #1
 8004d62:	a817      	add	r0, sp, #92	; 0x5c
 8004d64:	9317      	str	r3, [sp, #92]	; 0x5c
 8004d66:	f001 fe11 	bl	800698c <__match>
 8004d6a:	b910      	cbnz	r0, 8004d72 <_strtod_l+0x37a>
 8004d6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d6e:	3301      	adds	r3, #1
 8004d70:	9317      	str	r3, [sp, #92]	; 0x5c
 8004d72:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004fa4 <_strtod_l+0x5ac>
 8004d76:	f04f 0a00 	mov.w	sl, #0
 8004d7a:	e681      	b.n	8004a80 <_strtod_l+0x88>
 8004d7c:	4886      	ldr	r0, [pc, #536]	; (8004f98 <_strtod_l+0x5a0>)
 8004d7e:	f002 fdf7 	bl	8007970 <nan>
 8004d82:	ec5b ab10 	vmov	sl, fp, d0
 8004d86:	e67b      	b.n	8004a80 <_strtod_l+0x88>
 8004d88:	9b05      	ldr	r3, [sp, #20]
 8004d8a:	9807      	ldr	r0, [sp, #28]
 8004d8c:	1af3      	subs	r3, r6, r3
 8004d8e:	2f00      	cmp	r7, #0
 8004d90:	bf08      	it	eq
 8004d92:	462f      	moveq	r7, r5
 8004d94:	2d10      	cmp	r5, #16
 8004d96:	9306      	str	r3, [sp, #24]
 8004d98:	46a8      	mov	r8, r5
 8004d9a:	bfa8      	it	ge
 8004d9c:	f04f 0810 	movge.w	r8, #16
 8004da0:	f7fb fbb8 	bl	8000514 <__aeabi_ui2d>
 8004da4:	2d09      	cmp	r5, #9
 8004da6:	4682      	mov	sl, r0
 8004da8:	468b      	mov	fp, r1
 8004daa:	dd13      	ble.n	8004dd4 <_strtod_l+0x3dc>
 8004dac:	4b7b      	ldr	r3, [pc, #492]	; (8004f9c <_strtod_l+0x5a4>)
 8004dae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004db2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004db6:	f7fb fc27 	bl	8000608 <__aeabi_dmul>
 8004dba:	4682      	mov	sl, r0
 8004dbc:	4648      	mov	r0, r9
 8004dbe:	468b      	mov	fp, r1
 8004dc0:	f7fb fba8 	bl	8000514 <__aeabi_ui2d>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4650      	mov	r0, sl
 8004dca:	4659      	mov	r1, fp
 8004dcc:	f7fb fa66 	bl	800029c <__adddf3>
 8004dd0:	4682      	mov	sl, r0
 8004dd2:	468b      	mov	fp, r1
 8004dd4:	2d0f      	cmp	r5, #15
 8004dd6:	dc38      	bgt.n	8004e4a <_strtod_l+0x452>
 8004dd8:	9b06      	ldr	r3, [sp, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f43f ae50 	beq.w	8004a80 <_strtod_l+0x88>
 8004de0:	dd24      	ble.n	8004e2c <_strtod_l+0x434>
 8004de2:	2b16      	cmp	r3, #22
 8004de4:	dc0b      	bgt.n	8004dfe <_strtod_l+0x406>
 8004de6:	496d      	ldr	r1, [pc, #436]	; (8004f9c <_strtod_l+0x5a4>)
 8004de8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004df0:	4652      	mov	r2, sl
 8004df2:	465b      	mov	r3, fp
 8004df4:	f7fb fc08 	bl	8000608 <__aeabi_dmul>
 8004df8:	4682      	mov	sl, r0
 8004dfa:	468b      	mov	fp, r1
 8004dfc:	e640      	b.n	8004a80 <_strtod_l+0x88>
 8004dfe:	9a06      	ldr	r2, [sp, #24]
 8004e00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004e04:	4293      	cmp	r3, r2
 8004e06:	db20      	blt.n	8004e4a <_strtod_l+0x452>
 8004e08:	4c64      	ldr	r4, [pc, #400]	; (8004f9c <_strtod_l+0x5a4>)
 8004e0a:	f1c5 050f 	rsb	r5, r5, #15
 8004e0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004e12:	4652      	mov	r2, sl
 8004e14:	465b      	mov	r3, fp
 8004e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e1a:	f7fb fbf5 	bl	8000608 <__aeabi_dmul>
 8004e1e:	9b06      	ldr	r3, [sp, #24]
 8004e20:	1b5d      	subs	r5, r3, r5
 8004e22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004e26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004e2a:	e7e3      	b.n	8004df4 <_strtod_l+0x3fc>
 8004e2c:	9b06      	ldr	r3, [sp, #24]
 8004e2e:	3316      	adds	r3, #22
 8004e30:	db0b      	blt.n	8004e4a <_strtod_l+0x452>
 8004e32:	9b05      	ldr	r3, [sp, #20]
 8004e34:	1b9e      	subs	r6, r3, r6
 8004e36:	4b59      	ldr	r3, [pc, #356]	; (8004f9c <_strtod_l+0x5a4>)
 8004e38:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004e3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e40:	4650      	mov	r0, sl
 8004e42:	4659      	mov	r1, fp
 8004e44:	f7fb fd0a 	bl	800085c <__aeabi_ddiv>
 8004e48:	e7d6      	b.n	8004df8 <_strtod_l+0x400>
 8004e4a:	9b06      	ldr	r3, [sp, #24]
 8004e4c:	eba5 0808 	sub.w	r8, r5, r8
 8004e50:	4498      	add	r8, r3
 8004e52:	f1b8 0f00 	cmp.w	r8, #0
 8004e56:	dd74      	ble.n	8004f42 <_strtod_l+0x54a>
 8004e58:	f018 030f 	ands.w	r3, r8, #15
 8004e5c:	d00a      	beq.n	8004e74 <_strtod_l+0x47c>
 8004e5e:	494f      	ldr	r1, [pc, #316]	; (8004f9c <_strtod_l+0x5a4>)
 8004e60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004e64:	4652      	mov	r2, sl
 8004e66:	465b      	mov	r3, fp
 8004e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e6c:	f7fb fbcc 	bl	8000608 <__aeabi_dmul>
 8004e70:	4682      	mov	sl, r0
 8004e72:	468b      	mov	fp, r1
 8004e74:	f038 080f 	bics.w	r8, r8, #15
 8004e78:	d04f      	beq.n	8004f1a <_strtod_l+0x522>
 8004e7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004e7e:	dd22      	ble.n	8004ec6 <_strtod_l+0x4ce>
 8004e80:	2500      	movs	r5, #0
 8004e82:	462e      	mov	r6, r5
 8004e84:	9507      	str	r5, [sp, #28]
 8004e86:	9505      	str	r5, [sp, #20]
 8004e88:	2322      	movs	r3, #34	; 0x22
 8004e8a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004fa4 <_strtod_l+0x5ac>
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	f04f 0a00 	mov.w	sl, #0
 8004e94:	9b07      	ldr	r3, [sp, #28]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f43f adf2 	beq.w	8004a80 <_strtod_l+0x88>
 8004e9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f001 fe90 	bl	8006bc4 <_Bfree>
 8004ea4:	9905      	ldr	r1, [sp, #20]
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f001 fe8c 	bl	8006bc4 <_Bfree>
 8004eac:	4631      	mov	r1, r6
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f001 fe88 	bl	8006bc4 <_Bfree>
 8004eb4:	9907      	ldr	r1, [sp, #28]
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f001 fe84 	bl	8006bc4 <_Bfree>
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f001 fe80 	bl	8006bc4 <_Bfree>
 8004ec4:	e5dc      	b.n	8004a80 <_strtod_l+0x88>
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <_strtod_l+0x5a8>)
 8004ec8:	9304      	str	r3, [sp, #16]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004ed0:	4650      	mov	r0, sl
 8004ed2:	4659      	mov	r1, fp
 8004ed4:	4699      	mov	r9, r3
 8004ed6:	f1b8 0f01 	cmp.w	r8, #1
 8004eda:	dc21      	bgt.n	8004f20 <_strtod_l+0x528>
 8004edc:	b10b      	cbz	r3, 8004ee2 <_strtod_l+0x4ea>
 8004ede:	4682      	mov	sl, r0
 8004ee0:	468b      	mov	fp, r1
 8004ee2:	4b2f      	ldr	r3, [pc, #188]	; (8004fa0 <_strtod_l+0x5a8>)
 8004ee4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004ee8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004eec:	4652      	mov	r2, sl
 8004eee:	465b      	mov	r3, fp
 8004ef0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004ef4:	f7fb fb88 	bl	8000608 <__aeabi_dmul>
 8004ef8:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <_strtod_l+0x5ac>)
 8004efa:	460a      	mov	r2, r1
 8004efc:	400b      	ands	r3, r1
 8004efe:	492a      	ldr	r1, [pc, #168]	; (8004fa8 <_strtod_l+0x5b0>)
 8004f00:	428b      	cmp	r3, r1
 8004f02:	4682      	mov	sl, r0
 8004f04:	d8bc      	bhi.n	8004e80 <_strtod_l+0x488>
 8004f06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004f0a:	428b      	cmp	r3, r1
 8004f0c:	bf86      	itte	hi
 8004f0e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004fac <_strtod_l+0x5b4>
 8004f12:	f04f 3aff 	movhi.w	sl, #4294967295
 8004f16:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9304      	str	r3, [sp, #16]
 8004f1e:	e084      	b.n	800502a <_strtod_l+0x632>
 8004f20:	f018 0f01 	tst.w	r8, #1
 8004f24:	d005      	beq.n	8004f32 <_strtod_l+0x53a>
 8004f26:	9b04      	ldr	r3, [sp, #16]
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	f7fb fb6c 	bl	8000608 <__aeabi_dmul>
 8004f30:	2301      	movs	r3, #1
 8004f32:	9a04      	ldr	r2, [sp, #16]
 8004f34:	3208      	adds	r2, #8
 8004f36:	f109 0901 	add.w	r9, r9, #1
 8004f3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f3e:	9204      	str	r2, [sp, #16]
 8004f40:	e7c9      	b.n	8004ed6 <_strtod_l+0x4de>
 8004f42:	d0ea      	beq.n	8004f1a <_strtod_l+0x522>
 8004f44:	f1c8 0800 	rsb	r8, r8, #0
 8004f48:	f018 020f 	ands.w	r2, r8, #15
 8004f4c:	d00a      	beq.n	8004f64 <_strtod_l+0x56c>
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <_strtod_l+0x5a4>)
 8004f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f54:	4650      	mov	r0, sl
 8004f56:	4659      	mov	r1, fp
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f7fb fc7e 	bl	800085c <__aeabi_ddiv>
 8004f60:	4682      	mov	sl, r0
 8004f62:	468b      	mov	fp, r1
 8004f64:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004f68:	d0d7      	beq.n	8004f1a <_strtod_l+0x522>
 8004f6a:	f1b8 0f1f 	cmp.w	r8, #31
 8004f6e:	dd1f      	ble.n	8004fb0 <_strtod_l+0x5b8>
 8004f70:	2500      	movs	r5, #0
 8004f72:	462e      	mov	r6, r5
 8004f74:	9507      	str	r5, [sp, #28]
 8004f76:	9505      	str	r5, [sp, #20]
 8004f78:	2322      	movs	r3, #34	; 0x22
 8004f7a:	f04f 0a00 	mov.w	sl, #0
 8004f7e:	f04f 0b00 	mov.w	fp, #0
 8004f82:	6023      	str	r3, [r4, #0]
 8004f84:	e786      	b.n	8004e94 <_strtod_l+0x49c>
 8004f86:	bf00      	nop
 8004f88:	08009651 	.word	0x08009651
 8004f8c:	08009694 	.word	0x08009694
 8004f90:	08009649 	.word	0x08009649
 8004f94:	080097d4 	.word	0x080097d4
 8004f98:	08009a80 	.word	0x08009a80
 8004f9c:	08009960 	.word	0x08009960
 8004fa0:	08009938 	.word	0x08009938
 8004fa4:	7ff00000 	.word	0x7ff00000
 8004fa8:	7ca00000 	.word	0x7ca00000
 8004fac:	7fefffff 	.word	0x7fefffff
 8004fb0:	f018 0310 	ands.w	r3, r8, #16
 8004fb4:	bf18      	it	ne
 8004fb6:	236a      	movne	r3, #106	; 0x6a
 8004fb8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005368 <_strtod_l+0x970>
 8004fbc:	9304      	str	r3, [sp, #16]
 8004fbe:	4650      	mov	r0, sl
 8004fc0:	4659      	mov	r1, fp
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f018 0f01 	tst.w	r8, #1
 8004fc8:	d004      	beq.n	8004fd4 <_strtod_l+0x5dc>
 8004fca:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004fce:	f7fb fb1b 	bl	8000608 <__aeabi_dmul>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004fd8:	f109 0908 	add.w	r9, r9, #8
 8004fdc:	d1f2      	bne.n	8004fc4 <_strtod_l+0x5cc>
 8004fde:	b10b      	cbz	r3, 8004fe4 <_strtod_l+0x5ec>
 8004fe0:	4682      	mov	sl, r0
 8004fe2:	468b      	mov	fp, r1
 8004fe4:	9b04      	ldr	r3, [sp, #16]
 8004fe6:	b1c3      	cbz	r3, 800501a <_strtod_l+0x622>
 8004fe8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004fec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	4659      	mov	r1, fp
 8004ff4:	dd11      	ble.n	800501a <_strtod_l+0x622>
 8004ff6:	2b1f      	cmp	r3, #31
 8004ff8:	f340 8124 	ble.w	8005244 <_strtod_l+0x84c>
 8004ffc:	2b34      	cmp	r3, #52	; 0x34
 8004ffe:	bfde      	ittt	le
 8005000:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005004:	f04f 33ff 	movle.w	r3, #4294967295
 8005008:	fa03 f202 	lslle.w	r2, r3, r2
 800500c:	f04f 0a00 	mov.w	sl, #0
 8005010:	bfcc      	ite	gt
 8005012:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005016:	ea02 0b01 	andle.w	fp, r2, r1
 800501a:	2200      	movs	r2, #0
 800501c:	2300      	movs	r3, #0
 800501e:	4650      	mov	r0, sl
 8005020:	4659      	mov	r1, fp
 8005022:	f7fb fd59 	bl	8000ad8 <__aeabi_dcmpeq>
 8005026:	2800      	cmp	r0, #0
 8005028:	d1a2      	bne.n	8004f70 <_strtod_l+0x578>
 800502a:	9b07      	ldr	r3, [sp, #28]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	9908      	ldr	r1, [sp, #32]
 8005030:	462b      	mov	r3, r5
 8005032:	463a      	mov	r2, r7
 8005034:	4620      	mov	r0, r4
 8005036:	f001 fe2d 	bl	8006c94 <__s2b>
 800503a:	9007      	str	r0, [sp, #28]
 800503c:	2800      	cmp	r0, #0
 800503e:	f43f af1f 	beq.w	8004e80 <_strtod_l+0x488>
 8005042:	9b05      	ldr	r3, [sp, #20]
 8005044:	1b9e      	subs	r6, r3, r6
 8005046:	9b06      	ldr	r3, [sp, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	bfb4      	ite	lt
 800504c:	4633      	movlt	r3, r6
 800504e:	2300      	movge	r3, #0
 8005050:	930c      	str	r3, [sp, #48]	; 0x30
 8005052:	9b06      	ldr	r3, [sp, #24]
 8005054:	2500      	movs	r5, #0
 8005056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800505a:	9312      	str	r3, [sp, #72]	; 0x48
 800505c:	462e      	mov	r6, r5
 800505e:	9b07      	ldr	r3, [sp, #28]
 8005060:	4620      	mov	r0, r4
 8005062:	6859      	ldr	r1, [r3, #4]
 8005064:	f001 fd6e 	bl	8006b44 <_Balloc>
 8005068:	9005      	str	r0, [sp, #20]
 800506a:	2800      	cmp	r0, #0
 800506c:	f43f af0c 	beq.w	8004e88 <_strtod_l+0x490>
 8005070:	9b07      	ldr	r3, [sp, #28]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	3202      	adds	r2, #2
 8005076:	f103 010c 	add.w	r1, r3, #12
 800507a:	0092      	lsls	r2, r2, #2
 800507c:	300c      	adds	r0, #12
 800507e:	f001 fd53 	bl	8006b28 <memcpy>
 8005082:	ec4b ab10 	vmov	d0, sl, fp
 8005086:	aa1a      	add	r2, sp, #104	; 0x68
 8005088:	a919      	add	r1, sp, #100	; 0x64
 800508a:	4620      	mov	r0, r4
 800508c:	f002 f948 	bl	8007320 <__d2b>
 8005090:	ec4b ab18 	vmov	d8, sl, fp
 8005094:	9018      	str	r0, [sp, #96]	; 0x60
 8005096:	2800      	cmp	r0, #0
 8005098:	f43f aef6 	beq.w	8004e88 <_strtod_l+0x490>
 800509c:	2101      	movs	r1, #1
 800509e:	4620      	mov	r0, r4
 80050a0:	f001 fe92 	bl	8006dc8 <__i2b>
 80050a4:	4606      	mov	r6, r0
 80050a6:	2800      	cmp	r0, #0
 80050a8:	f43f aeee 	beq.w	8004e88 <_strtod_l+0x490>
 80050ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050ae:	9904      	ldr	r1, [sp, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bfab      	itete	ge
 80050b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80050b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80050b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80050ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80050be:	bfac      	ite	ge
 80050c0:	eb03 0902 	addge.w	r9, r3, r2
 80050c4:	1ad7      	sublt	r7, r2, r3
 80050c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80050c8:	eba3 0801 	sub.w	r8, r3, r1
 80050cc:	4490      	add	r8, r2
 80050ce:	4ba1      	ldr	r3, [pc, #644]	; (8005354 <_strtod_l+0x95c>)
 80050d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80050d4:	4598      	cmp	r8, r3
 80050d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80050da:	f280 80c7 	bge.w	800526c <_strtod_l+0x874>
 80050de:	eba3 0308 	sub.w	r3, r3, r8
 80050e2:	2b1f      	cmp	r3, #31
 80050e4:	eba2 0203 	sub.w	r2, r2, r3
 80050e8:	f04f 0101 	mov.w	r1, #1
 80050ec:	f300 80b1 	bgt.w	8005252 <_strtod_l+0x85a>
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	930d      	str	r3, [sp, #52]	; 0x34
 80050f6:	2300      	movs	r3, #0
 80050f8:	9308      	str	r3, [sp, #32]
 80050fa:	eb09 0802 	add.w	r8, r9, r2
 80050fe:	9b04      	ldr	r3, [sp, #16]
 8005100:	45c1      	cmp	r9, r8
 8005102:	4417      	add	r7, r2
 8005104:	441f      	add	r7, r3
 8005106:	464b      	mov	r3, r9
 8005108:	bfa8      	it	ge
 800510a:	4643      	movge	r3, r8
 800510c:	42bb      	cmp	r3, r7
 800510e:	bfa8      	it	ge
 8005110:	463b      	movge	r3, r7
 8005112:	2b00      	cmp	r3, #0
 8005114:	bfc2      	ittt	gt
 8005116:	eba8 0803 	subgt.w	r8, r8, r3
 800511a:	1aff      	subgt	r7, r7, r3
 800511c:	eba9 0903 	subgt.w	r9, r9, r3
 8005120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005122:	2b00      	cmp	r3, #0
 8005124:	dd17      	ble.n	8005156 <_strtod_l+0x75e>
 8005126:	4631      	mov	r1, r6
 8005128:	461a      	mov	r2, r3
 800512a:	4620      	mov	r0, r4
 800512c:	f001 ff0c 	bl	8006f48 <__pow5mult>
 8005130:	4606      	mov	r6, r0
 8005132:	2800      	cmp	r0, #0
 8005134:	f43f aea8 	beq.w	8004e88 <_strtod_l+0x490>
 8005138:	4601      	mov	r1, r0
 800513a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800513c:	4620      	mov	r0, r4
 800513e:	f001 fe59 	bl	8006df4 <__multiply>
 8005142:	900b      	str	r0, [sp, #44]	; 0x2c
 8005144:	2800      	cmp	r0, #0
 8005146:	f43f ae9f 	beq.w	8004e88 <_strtod_l+0x490>
 800514a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800514c:	4620      	mov	r0, r4
 800514e:	f001 fd39 	bl	8006bc4 <_Bfree>
 8005152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005154:	9318      	str	r3, [sp, #96]	; 0x60
 8005156:	f1b8 0f00 	cmp.w	r8, #0
 800515a:	f300 808c 	bgt.w	8005276 <_strtod_l+0x87e>
 800515e:	9b06      	ldr	r3, [sp, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	dd08      	ble.n	8005176 <_strtod_l+0x77e>
 8005164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005166:	9905      	ldr	r1, [sp, #20]
 8005168:	4620      	mov	r0, r4
 800516a:	f001 feed 	bl	8006f48 <__pow5mult>
 800516e:	9005      	str	r0, [sp, #20]
 8005170:	2800      	cmp	r0, #0
 8005172:	f43f ae89 	beq.w	8004e88 <_strtod_l+0x490>
 8005176:	2f00      	cmp	r7, #0
 8005178:	dd08      	ble.n	800518c <_strtod_l+0x794>
 800517a:	9905      	ldr	r1, [sp, #20]
 800517c:	463a      	mov	r2, r7
 800517e:	4620      	mov	r0, r4
 8005180:	f001 ff3c 	bl	8006ffc <__lshift>
 8005184:	9005      	str	r0, [sp, #20]
 8005186:	2800      	cmp	r0, #0
 8005188:	f43f ae7e 	beq.w	8004e88 <_strtod_l+0x490>
 800518c:	f1b9 0f00 	cmp.w	r9, #0
 8005190:	dd08      	ble.n	80051a4 <_strtod_l+0x7ac>
 8005192:	4631      	mov	r1, r6
 8005194:	464a      	mov	r2, r9
 8005196:	4620      	mov	r0, r4
 8005198:	f001 ff30 	bl	8006ffc <__lshift>
 800519c:	4606      	mov	r6, r0
 800519e:	2800      	cmp	r0, #0
 80051a0:	f43f ae72 	beq.w	8004e88 <_strtod_l+0x490>
 80051a4:	9a05      	ldr	r2, [sp, #20]
 80051a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80051a8:	4620      	mov	r0, r4
 80051aa:	f001 ffb3 	bl	8007114 <__mdiff>
 80051ae:	4605      	mov	r5, r0
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f43f ae69 	beq.w	8004e88 <_strtod_l+0x490>
 80051b6:	68c3      	ldr	r3, [r0, #12]
 80051b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80051ba:	2300      	movs	r3, #0
 80051bc:	60c3      	str	r3, [r0, #12]
 80051be:	4631      	mov	r1, r6
 80051c0:	f001 ff8c 	bl	80070dc <__mcmp>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	da60      	bge.n	800528a <_strtod_l+0x892>
 80051c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ca:	ea53 030a 	orrs.w	r3, r3, sl
 80051ce:	f040 8082 	bne.w	80052d6 <_strtod_l+0x8de>
 80051d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d17d      	bne.n	80052d6 <_strtod_l+0x8de>
 80051da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80051de:	0d1b      	lsrs	r3, r3, #20
 80051e0:	051b      	lsls	r3, r3, #20
 80051e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80051e6:	d976      	bls.n	80052d6 <_strtod_l+0x8de>
 80051e8:	696b      	ldr	r3, [r5, #20]
 80051ea:	b913      	cbnz	r3, 80051f2 <_strtod_l+0x7fa>
 80051ec:	692b      	ldr	r3, [r5, #16]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	dd71      	ble.n	80052d6 <_strtod_l+0x8de>
 80051f2:	4629      	mov	r1, r5
 80051f4:	2201      	movs	r2, #1
 80051f6:	4620      	mov	r0, r4
 80051f8:	f001 ff00 	bl	8006ffc <__lshift>
 80051fc:	4631      	mov	r1, r6
 80051fe:	4605      	mov	r5, r0
 8005200:	f001 ff6c 	bl	80070dc <__mcmp>
 8005204:	2800      	cmp	r0, #0
 8005206:	dd66      	ble.n	80052d6 <_strtod_l+0x8de>
 8005208:	9904      	ldr	r1, [sp, #16]
 800520a:	4a53      	ldr	r2, [pc, #332]	; (8005358 <_strtod_l+0x960>)
 800520c:	465b      	mov	r3, fp
 800520e:	2900      	cmp	r1, #0
 8005210:	f000 8081 	beq.w	8005316 <_strtod_l+0x91e>
 8005214:	ea02 010b 	and.w	r1, r2, fp
 8005218:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800521c:	dc7b      	bgt.n	8005316 <_strtod_l+0x91e>
 800521e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005222:	f77f aea9 	ble.w	8004f78 <_strtod_l+0x580>
 8005226:	4b4d      	ldr	r3, [pc, #308]	; (800535c <_strtod_l+0x964>)
 8005228:	4650      	mov	r0, sl
 800522a:	4659      	mov	r1, fp
 800522c:	2200      	movs	r2, #0
 800522e:	f7fb f9eb 	bl	8000608 <__aeabi_dmul>
 8005232:	460b      	mov	r3, r1
 8005234:	4303      	orrs	r3, r0
 8005236:	bf08      	it	eq
 8005238:	2322      	moveq	r3, #34	; 0x22
 800523a:	4682      	mov	sl, r0
 800523c:	468b      	mov	fp, r1
 800523e:	bf08      	it	eq
 8005240:	6023      	streq	r3, [r4, #0]
 8005242:	e62b      	b.n	8004e9c <_strtod_l+0x4a4>
 8005244:	f04f 32ff 	mov.w	r2, #4294967295
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	ea03 0a0a 	and.w	sl, r3, sl
 8005250:	e6e3      	b.n	800501a <_strtod_l+0x622>
 8005252:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005256:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800525a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800525e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005262:	fa01 f308 	lsl.w	r3, r1, r8
 8005266:	9308      	str	r3, [sp, #32]
 8005268:	910d      	str	r1, [sp, #52]	; 0x34
 800526a:	e746      	b.n	80050fa <_strtod_l+0x702>
 800526c:	2300      	movs	r3, #0
 800526e:	9308      	str	r3, [sp, #32]
 8005270:	2301      	movs	r3, #1
 8005272:	930d      	str	r3, [sp, #52]	; 0x34
 8005274:	e741      	b.n	80050fa <_strtod_l+0x702>
 8005276:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005278:	4642      	mov	r2, r8
 800527a:	4620      	mov	r0, r4
 800527c:	f001 febe 	bl	8006ffc <__lshift>
 8005280:	9018      	str	r0, [sp, #96]	; 0x60
 8005282:	2800      	cmp	r0, #0
 8005284:	f47f af6b 	bne.w	800515e <_strtod_l+0x766>
 8005288:	e5fe      	b.n	8004e88 <_strtod_l+0x490>
 800528a:	465f      	mov	r7, fp
 800528c:	d16e      	bne.n	800536c <_strtod_l+0x974>
 800528e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005290:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005294:	b342      	cbz	r2, 80052e8 <_strtod_l+0x8f0>
 8005296:	4a32      	ldr	r2, [pc, #200]	; (8005360 <_strtod_l+0x968>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d128      	bne.n	80052ee <_strtod_l+0x8f6>
 800529c:	9b04      	ldr	r3, [sp, #16]
 800529e:	4651      	mov	r1, sl
 80052a0:	b1eb      	cbz	r3, 80052de <_strtod_l+0x8e6>
 80052a2:	4b2d      	ldr	r3, [pc, #180]	; (8005358 <_strtod_l+0x960>)
 80052a4:	403b      	ands	r3, r7
 80052a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295
 80052ae:	d819      	bhi.n	80052e4 <_strtod_l+0x8ec>
 80052b0:	0d1b      	lsrs	r3, r3, #20
 80052b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	4299      	cmp	r1, r3
 80052bc:	d117      	bne.n	80052ee <_strtod_l+0x8f6>
 80052be:	4b29      	ldr	r3, [pc, #164]	; (8005364 <_strtod_l+0x96c>)
 80052c0:	429f      	cmp	r7, r3
 80052c2:	d102      	bne.n	80052ca <_strtod_l+0x8d2>
 80052c4:	3101      	adds	r1, #1
 80052c6:	f43f addf 	beq.w	8004e88 <_strtod_l+0x490>
 80052ca:	4b23      	ldr	r3, [pc, #140]	; (8005358 <_strtod_l+0x960>)
 80052cc:	403b      	ands	r3, r7
 80052ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80052d2:	f04f 0a00 	mov.w	sl, #0
 80052d6:	9b04      	ldr	r3, [sp, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1a4      	bne.n	8005226 <_strtod_l+0x82e>
 80052dc:	e5de      	b.n	8004e9c <_strtod_l+0x4a4>
 80052de:	f04f 33ff 	mov.w	r3, #4294967295
 80052e2:	e7ea      	b.n	80052ba <_strtod_l+0x8c2>
 80052e4:	4613      	mov	r3, r2
 80052e6:	e7e8      	b.n	80052ba <_strtod_l+0x8c2>
 80052e8:	ea53 030a 	orrs.w	r3, r3, sl
 80052ec:	d08c      	beq.n	8005208 <_strtod_l+0x810>
 80052ee:	9b08      	ldr	r3, [sp, #32]
 80052f0:	b1db      	cbz	r3, 800532a <_strtod_l+0x932>
 80052f2:	423b      	tst	r3, r7
 80052f4:	d0ef      	beq.n	80052d6 <_strtod_l+0x8de>
 80052f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052f8:	9a04      	ldr	r2, [sp, #16]
 80052fa:	4650      	mov	r0, sl
 80052fc:	4659      	mov	r1, fp
 80052fe:	b1c3      	cbz	r3, 8005332 <_strtod_l+0x93a>
 8005300:	f7ff fb5e 	bl	80049c0 <sulp>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	ec51 0b18 	vmov	r0, r1, d8
 800530c:	f7fa ffc6 	bl	800029c <__adddf3>
 8005310:	4682      	mov	sl, r0
 8005312:	468b      	mov	fp, r1
 8005314:	e7df      	b.n	80052d6 <_strtod_l+0x8de>
 8005316:	4013      	ands	r3, r2
 8005318:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800531c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005320:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005324:	f04f 3aff 	mov.w	sl, #4294967295
 8005328:	e7d5      	b.n	80052d6 <_strtod_l+0x8de>
 800532a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800532c:	ea13 0f0a 	tst.w	r3, sl
 8005330:	e7e0      	b.n	80052f4 <_strtod_l+0x8fc>
 8005332:	f7ff fb45 	bl	80049c0 <sulp>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	ec51 0b18 	vmov	r0, r1, d8
 800533e:	f7fa ffab 	bl	8000298 <__aeabi_dsub>
 8005342:	2200      	movs	r2, #0
 8005344:	2300      	movs	r3, #0
 8005346:	4682      	mov	sl, r0
 8005348:	468b      	mov	fp, r1
 800534a:	f7fb fbc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800534e:	2800      	cmp	r0, #0
 8005350:	d0c1      	beq.n	80052d6 <_strtod_l+0x8de>
 8005352:	e611      	b.n	8004f78 <_strtod_l+0x580>
 8005354:	fffffc02 	.word	0xfffffc02
 8005358:	7ff00000 	.word	0x7ff00000
 800535c:	39500000 	.word	0x39500000
 8005360:	000fffff 	.word	0x000fffff
 8005364:	7fefffff 	.word	0x7fefffff
 8005368:	080096a8 	.word	0x080096a8
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	f002 f832 	bl	80073d8 <__ratio>
 8005374:	ec59 8b10 	vmov	r8, r9, d0
 8005378:	ee10 0a10 	vmov	r0, s0
 800537c:	2200      	movs	r2, #0
 800537e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005382:	4649      	mov	r1, r9
 8005384:	f7fb fbbc 	bl	8000b00 <__aeabi_dcmple>
 8005388:	2800      	cmp	r0, #0
 800538a:	d07a      	beq.n	8005482 <_strtod_l+0xa8a>
 800538c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d04a      	beq.n	8005428 <_strtod_l+0xa30>
 8005392:	4b95      	ldr	r3, [pc, #596]	; (80055e8 <_strtod_l+0xbf0>)
 8005394:	2200      	movs	r2, #0
 8005396:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800539a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80055e8 <_strtod_l+0xbf0>
 800539e:	f04f 0800 	mov.w	r8, #0
 80053a2:	4b92      	ldr	r3, [pc, #584]	; (80055ec <_strtod_l+0xbf4>)
 80053a4:	403b      	ands	r3, r7
 80053a6:	930d      	str	r3, [sp, #52]	; 0x34
 80053a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053aa:	4b91      	ldr	r3, [pc, #580]	; (80055f0 <_strtod_l+0xbf8>)
 80053ac:	429a      	cmp	r2, r3
 80053ae:	f040 80b0 	bne.w	8005512 <_strtod_l+0xb1a>
 80053b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80053ba:	ec4b ab10 	vmov	d0, sl, fp
 80053be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80053c2:	f001 ff31 	bl	8007228 <__ulp>
 80053c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053ca:	ec53 2b10 	vmov	r2, r3, d0
 80053ce:	f7fb f91b 	bl	8000608 <__aeabi_dmul>
 80053d2:	4652      	mov	r2, sl
 80053d4:	465b      	mov	r3, fp
 80053d6:	f7fa ff61 	bl	800029c <__adddf3>
 80053da:	460b      	mov	r3, r1
 80053dc:	4983      	ldr	r1, [pc, #524]	; (80055ec <_strtod_l+0xbf4>)
 80053de:	4a85      	ldr	r2, [pc, #532]	; (80055f4 <_strtod_l+0xbfc>)
 80053e0:	4019      	ands	r1, r3
 80053e2:	4291      	cmp	r1, r2
 80053e4:	4682      	mov	sl, r0
 80053e6:	d960      	bls.n	80054aa <_strtod_l+0xab2>
 80053e8:	ee18 3a90 	vmov	r3, s17
 80053ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d104      	bne.n	80053fe <_strtod_l+0xa06>
 80053f4:	ee18 3a10 	vmov	r3, s16
 80053f8:	3301      	adds	r3, #1
 80053fa:	f43f ad45 	beq.w	8004e88 <_strtod_l+0x490>
 80053fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005600 <_strtod_l+0xc08>
 8005402:	f04f 3aff 	mov.w	sl, #4294967295
 8005406:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005408:	4620      	mov	r0, r4
 800540a:	f001 fbdb 	bl	8006bc4 <_Bfree>
 800540e:	9905      	ldr	r1, [sp, #20]
 8005410:	4620      	mov	r0, r4
 8005412:	f001 fbd7 	bl	8006bc4 <_Bfree>
 8005416:	4631      	mov	r1, r6
 8005418:	4620      	mov	r0, r4
 800541a:	f001 fbd3 	bl	8006bc4 <_Bfree>
 800541e:	4629      	mov	r1, r5
 8005420:	4620      	mov	r0, r4
 8005422:	f001 fbcf 	bl	8006bc4 <_Bfree>
 8005426:	e61a      	b.n	800505e <_strtod_l+0x666>
 8005428:	f1ba 0f00 	cmp.w	sl, #0
 800542c:	d11b      	bne.n	8005466 <_strtod_l+0xa6e>
 800542e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005432:	b9f3      	cbnz	r3, 8005472 <_strtod_l+0xa7a>
 8005434:	4b6c      	ldr	r3, [pc, #432]	; (80055e8 <_strtod_l+0xbf0>)
 8005436:	2200      	movs	r2, #0
 8005438:	4640      	mov	r0, r8
 800543a:	4649      	mov	r1, r9
 800543c:	f7fb fb56 	bl	8000aec <__aeabi_dcmplt>
 8005440:	b9d0      	cbnz	r0, 8005478 <_strtod_l+0xa80>
 8005442:	4640      	mov	r0, r8
 8005444:	4649      	mov	r1, r9
 8005446:	4b6c      	ldr	r3, [pc, #432]	; (80055f8 <_strtod_l+0xc00>)
 8005448:	2200      	movs	r2, #0
 800544a:	f7fb f8dd 	bl	8000608 <__aeabi_dmul>
 800544e:	4680      	mov	r8, r0
 8005450:	4689      	mov	r9, r1
 8005452:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005456:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800545a:	9315      	str	r3, [sp, #84]	; 0x54
 800545c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005460:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005464:	e79d      	b.n	80053a2 <_strtod_l+0x9aa>
 8005466:	f1ba 0f01 	cmp.w	sl, #1
 800546a:	d102      	bne.n	8005472 <_strtod_l+0xa7a>
 800546c:	2f00      	cmp	r7, #0
 800546e:	f43f ad83 	beq.w	8004f78 <_strtod_l+0x580>
 8005472:	4b62      	ldr	r3, [pc, #392]	; (80055fc <_strtod_l+0xc04>)
 8005474:	2200      	movs	r2, #0
 8005476:	e78e      	b.n	8005396 <_strtod_l+0x99e>
 8005478:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80055f8 <_strtod_l+0xc00>
 800547c:	f04f 0800 	mov.w	r8, #0
 8005480:	e7e7      	b.n	8005452 <_strtod_l+0xa5a>
 8005482:	4b5d      	ldr	r3, [pc, #372]	; (80055f8 <_strtod_l+0xc00>)
 8005484:	4640      	mov	r0, r8
 8005486:	4649      	mov	r1, r9
 8005488:	2200      	movs	r2, #0
 800548a:	f7fb f8bd 	bl	8000608 <__aeabi_dmul>
 800548e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005490:	4680      	mov	r8, r0
 8005492:	4689      	mov	r9, r1
 8005494:	b933      	cbnz	r3, 80054a4 <_strtod_l+0xaac>
 8005496:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800549a:	900e      	str	r0, [sp, #56]	; 0x38
 800549c:	930f      	str	r3, [sp, #60]	; 0x3c
 800549e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80054a2:	e7dd      	b.n	8005460 <_strtod_l+0xa68>
 80054a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80054a8:	e7f9      	b.n	800549e <_strtod_l+0xaa6>
 80054aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80054ae:	9b04      	ldr	r3, [sp, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1a8      	bne.n	8005406 <_strtod_l+0xa0e>
 80054b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80054b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054ba:	0d1b      	lsrs	r3, r3, #20
 80054bc:	051b      	lsls	r3, r3, #20
 80054be:	429a      	cmp	r2, r3
 80054c0:	d1a1      	bne.n	8005406 <_strtod_l+0xa0e>
 80054c2:	4640      	mov	r0, r8
 80054c4:	4649      	mov	r1, r9
 80054c6:	f7fb fbff 	bl	8000cc8 <__aeabi_d2lz>
 80054ca:	f7fb f86f 	bl	80005ac <__aeabi_l2d>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4640      	mov	r0, r8
 80054d4:	4649      	mov	r1, r9
 80054d6:	f7fa fedf 	bl	8000298 <__aeabi_dsub>
 80054da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054e0:	ea43 030a 	orr.w	r3, r3, sl
 80054e4:	4313      	orrs	r3, r2
 80054e6:	4680      	mov	r8, r0
 80054e8:	4689      	mov	r9, r1
 80054ea:	d055      	beq.n	8005598 <_strtod_l+0xba0>
 80054ec:	a336      	add	r3, pc, #216	; (adr r3, 80055c8 <_strtod_l+0xbd0>)
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	f7fb fafb 	bl	8000aec <__aeabi_dcmplt>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	f47f acd0 	bne.w	8004e9c <_strtod_l+0x4a4>
 80054fc:	a334      	add	r3, pc, #208	; (adr r3, 80055d0 <_strtod_l+0xbd8>)
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	4640      	mov	r0, r8
 8005504:	4649      	mov	r1, r9
 8005506:	f7fb fb0f 	bl	8000b28 <__aeabi_dcmpgt>
 800550a:	2800      	cmp	r0, #0
 800550c:	f43f af7b 	beq.w	8005406 <_strtod_l+0xa0e>
 8005510:	e4c4      	b.n	8004e9c <_strtod_l+0x4a4>
 8005512:	9b04      	ldr	r3, [sp, #16]
 8005514:	b333      	cbz	r3, 8005564 <_strtod_l+0xb6c>
 8005516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005518:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800551c:	d822      	bhi.n	8005564 <_strtod_l+0xb6c>
 800551e:	a32e      	add	r3, pc, #184	; (adr r3, 80055d8 <_strtod_l+0xbe0>)
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	4640      	mov	r0, r8
 8005526:	4649      	mov	r1, r9
 8005528:	f7fb faea 	bl	8000b00 <__aeabi_dcmple>
 800552c:	b1a0      	cbz	r0, 8005558 <_strtod_l+0xb60>
 800552e:	4649      	mov	r1, r9
 8005530:	4640      	mov	r0, r8
 8005532:	f7fb fb41 	bl	8000bb8 <__aeabi_d2uiz>
 8005536:	2801      	cmp	r0, #1
 8005538:	bf38      	it	cc
 800553a:	2001      	movcc	r0, #1
 800553c:	f7fa ffea 	bl	8000514 <__aeabi_ui2d>
 8005540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005542:	4680      	mov	r8, r0
 8005544:	4689      	mov	r9, r1
 8005546:	bb23      	cbnz	r3, 8005592 <_strtod_l+0xb9a>
 8005548:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800554c:	9010      	str	r0, [sp, #64]	; 0x40
 800554e:	9311      	str	r3, [sp, #68]	; 0x44
 8005550:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005554:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800555c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	9309      	str	r3, [sp, #36]	; 0x24
 8005564:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005568:	eeb0 0a48 	vmov.f32	s0, s16
 800556c:	eef0 0a68 	vmov.f32	s1, s17
 8005570:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005574:	f001 fe58 	bl	8007228 <__ulp>
 8005578:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800557c:	ec53 2b10 	vmov	r2, r3, d0
 8005580:	f7fb f842 	bl	8000608 <__aeabi_dmul>
 8005584:	ec53 2b18 	vmov	r2, r3, d8
 8005588:	f7fa fe88 	bl	800029c <__adddf3>
 800558c:	4682      	mov	sl, r0
 800558e:	468b      	mov	fp, r1
 8005590:	e78d      	b.n	80054ae <_strtod_l+0xab6>
 8005592:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005596:	e7db      	b.n	8005550 <_strtod_l+0xb58>
 8005598:	a311      	add	r3, pc, #68	; (adr r3, 80055e0 <_strtod_l+0xbe8>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fb faa5 	bl	8000aec <__aeabi_dcmplt>
 80055a2:	e7b2      	b.n	800550a <_strtod_l+0xb12>
 80055a4:	2300      	movs	r3, #0
 80055a6:	930a      	str	r3, [sp, #40]	; 0x28
 80055a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	f7ff ba6b 	b.w	8004a88 <_strtod_l+0x90>
 80055b2:	2a65      	cmp	r2, #101	; 0x65
 80055b4:	f43f ab5f 	beq.w	8004c76 <_strtod_l+0x27e>
 80055b8:	2a45      	cmp	r2, #69	; 0x45
 80055ba:	f43f ab5c 	beq.w	8004c76 <_strtod_l+0x27e>
 80055be:	2301      	movs	r3, #1
 80055c0:	f7ff bb94 	b.w	8004cec <_strtod_l+0x2f4>
 80055c4:	f3af 8000 	nop.w
 80055c8:	94a03595 	.word	0x94a03595
 80055cc:	3fdfffff 	.word	0x3fdfffff
 80055d0:	35afe535 	.word	0x35afe535
 80055d4:	3fe00000 	.word	0x3fe00000
 80055d8:	ffc00000 	.word	0xffc00000
 80055dc:	41dfffff 	.word	0x41dfffff
 80055e0:	94a03595 	.word	0x94a03595
 80055e4:	3fcfffff 	.word	0x3fcfffff
 80055e8:	3ff00000 	.word	0x3ff00000
 80055ec:	7ff00000 	.word	0x7ff00000
 80055f0:	7fe00000 	.word	0x7fe00000
 80055f4:	7c9fffff 	.word	0x7c9fffff
 80055f8:	3fe00000 	.word	0x3fe00000
 80055fc:	bff00000 	.word	0xbff00000
 8005600:	7fefffff 	.word	0x7fefffff

08005604 <_strtod_r>:
 8005604:	4b01      	ldr	r3, [pc, #4]	; (800560c <_strtod_r+0x8>)
 8005606:	f7ff b9f7 	b.w	80049f8 <_strtod_l>
 800560a:	bf00      	nop
 800560c:	20000078 	.word	0x20000078

08005610 <_strtol_l.constprop.0>:
 8005610:	2b01      	cmp	r3, #1
 8005612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005616:	d001      	beq.n	800561c <_strtol_l.constprop.0+0xc>
 8005618:	2b24      	cmp	r3, #36	; 0x24
 800561a:	d906      	bls.n	800562a <_strtol_l.constprop.0+0x1a>
 800561c:	f7fe fafe 	bl	8003c1c <__errno>
 8005620:	2316      	movs	r3, #22
 8005622:	6003      	str	r3, [r0, #0]
 8005624:	2000      	movs	r0, #0
 8005626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005710 <_strtol_l.constprop.0+0x100>
 800562e:	460d      	mov	r5, r1
 8005630:	462e      	mov	r6, r5
 8005632:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005636:	f814 700c 	ldrb.w	r7, [r4, ip]
 800563a:	f017 0708 	ands.w	r7, r7, #8
 800563e:	d1f7      	bne.n	8005630 <_strtol_l.constprop.0+0x20>
 8005640:	2c2d      	cmp	r4, #45	; 0x2d
 8005642:	d132      	bne.n	80056aa <_strtol_l.constprop.0+0x9a>
 8005644:	782c      	ldrb	r4, [r5, #0]
 8005646:	2701      	movs	r7, #1
 8005648:	1cb5      	adds	r5, r6, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d05b      	beq.n	8005706 <_strtol_l.constprop.0+0xf6>
 800564e:	2b10      	cmp	r3, #16
 8005650:	d109      	bne.n	8005666 <_strtol_l.constprop.0+0x56>
 8005652:	2c30      	cmp	r4, #48	; 0x30
 8005654:	d107      	bne.n	8005666 <_strtol_l.constprop.0+0x56>
 8005656:	782c      	ldrb	r4, [r5, #0]
 8005658:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800565c:	2c58      	cmp	r4, #88	; 0x58
 800565e:	d14d      	bne.n	80056fc <_strtol_l.constprop.0+0xec>
 8005660:	786c      	ldrb	r4, [r5, #1]
 8005662:	2310      	movs	r3, #16
 8005664:	3502      	adds	r5, #2
 8005666:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800566a:	f108 38ff 	add.w	r8, r8, #4294967295
 800566e:	f04f 0c00 	mov.w	ip, #0
 8005672:	fbb8 f9f3 	udiv	r9, r8, r3
 8005676:	4666      	mov	r6, ip
 8005678:	fb03 8a19 	mls	sl, r3, r9, r8
 800567c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005680:	f1be 0f09 	cmp.w	lr, #9
 8005684:	d816      	bhi.n	80056b4 <_strtol_l.constprop.0+0xa4>
 8005686:	4674      	mov	r4, lr
 8005688:	42a3      	cmp	r3, r4
 800568a:	dd24      	ble.n	80056d6 <_strtol_l.constprop.0+0xc6>
 800568c:	f1bc 0f00 	cmp.w	ip, #0
 8005690:	db1e      	blt.n	80056d0 <_strtol_l.constprop.0+0xc0>
 8005692:	45b1      	cmp	r9, r6
 8005694:	d31c      	bcc.n	80056d0 <_strtol_l.constprop.0+0xc0>
 8005696:	d101      	bne.n	800569c <_strtol_l.constprop.0+0x8c>
 8005698:	45a2      	cmp	sl, r4
 800569a:	db19      	blt.n	80056d0 <_strtol_l.constprop.0+0xc0>
 800569c:	fb06 4603 	mla	r6, r6, r3, r4
 80056a0:	f04f 0c01 	mov.w	ip, #1
 80056a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056a8:	e7e8      	b.n	800567c <_strtol_l.constprop.0+0x6c>
 80056aa:	2c2b      	cmp	r4, #43	; 0x2b
 80056ac:	bf04      	itt	eq
 80056ae:	782c      	ldrbeq	r4, [r5, #0]
 80056b0:	1cb5      	addeq	r5, r6, #2
 80056b2:	e7ca      	b.n	800564a <_strtol_l.constprop.0+0x3a>
 80056b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80056b8:	f1be 0f19 	cmp.w	lr, #25
 80056bc:	d801      	bhi.n	80056c2 <_strtol_l.constprop.0+0xb2>
 80056be:	3c37      	subs	r4, #55	; 0x37
 80056c0:	e7e2      	b.n	8005688 <_strtol_l.constprop.0+0x78>
 80056c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80056c6:	f1be 0f19 	cmp.w	lr, #25
 80056ca:	d804      	bhi.n	80056d6 <_strtol_l.constprop.0+0xc6>
 80056cc:	3c57      	subs	r4, #87	; 0x57
 80056ce:	e7db      	b.n	8005688 <_strtol_l.constprop.0+0x78>
 80056d0:	f04f 3cff 	mov.w	ip, #4294967295
 80056d4:	e7e6      	b.n	80056a4 <_strtol_l.constprop.0+0x94>
 80056d6:	f1bc 0f00 	cmp.w	ip, #0
 80056da:	da05      	bge.n	80056e8 <_strtol_l.constprop.0+0xd8>
 80056dc:	2322      	movs	r3, #34	; 0x22
 80056de:	6003      	str	r3, [r0, #0]
 80056e0:	4646      	mov	r6, r8
 80056e2:	b942      	cbnz	r2, 80056f6 <_strtol_l.constprop.0+0xe6>
 80056e4:	4630      	mov	r0, r6
 80056e6:	e79e      	b.n	8005626 <_strtol_l.constprop.0+0x16>
 80056e8:	b107      	cbz	r7, 80056ec <_strtol_l.constprop.0+0xdc>
 80056ea:	4276      	negs	r6, r6
 80056ec:	2a00      	cmp	r2, #0
 80056ee:	d0f9      	beq.n	80056e4 <_strtol_l.constprop.0+0xd4>
 80056f0:	f1bc 0f00 	cmp.w	ip, #0
 80056f4:	d000      	beq.n	80056f8 <_strtol_l.constprop.0+0xe8>
 80056f6:	1e69      	subs	r1, r5, #1
 80056f8:	6011      	str	r1, [r2, #0]
 80056fa:	e7f3      	b.n	80056e4 <_strtol_l.constprop.0+0xd4>
 80056fc:	2430      	movs	r4, #48	; 0x30
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1b1      	bne.n	8005666 <_strtol_l.constprop.0+0x56>
 8005702:	2308      	movs	r3, #8
 8005704:	e7af      	b.n	8005666 <_strtol_l.constprop.0+0x56>
 8005706:	2c30      	cmp	r4, #48	; 0x30
 8005708:	d0a5      	beq.n	8005656 <_strtol_l.constprop.0+0x46>
 800570a:	230a      	movs	r3, #10
 800570c:	e7ab      	b.n	8005666 <_strtol_l.constprop.0+0x56>
 800570e:	bf00      	nop
 8005710:	080096d1 	.word	0x080096d1

08005714 <_strtol_r>:
 8005714:	f7ff bf7c 	b.w	8005610 <_strtol_l.constprop.0>

08005718 <quorem>:
 8005718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	6903      	ldr	r3, [r0, #16]
 800571e:	690c      	ldr	r4, [r1, #16]
 8005720:	42a3      	cmp	r3, r4
 8005722:	4607      	mov	r7, r0
 8005724:	f2c0 8081 	blt.w	800582a <quorem+0x112>
 8005728:	3c01      	subs	r4, #1
 800572a:	f101 0814 	add.w	r8, r1, #20
 800572e:	f100 0514 	add.w	r5, r0, #20
 8005732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005736:	9301      	str	r3, [sp, #4]
 8005738:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800573c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005740:	3301      	adds	r3, #1
 8005742:	429a      	cmp	r2, r3
 8005744:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005748:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800574c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005750:	d331      	bcc.n	80057b6 <quorem+0x9e>
 8005752:	f04f 0e00 	mov.w	lr, #0
 8005756:	4640      	mov	r0, r8
 8005758:	46ac      	mov	ip, r5
 800575a:	46f2      	mov	sl, lr
 800575c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005760:	b293      	uxth	r3, r2
 8005762:	fb06 e303 	mla	r3, r6, r3, lr
 8005766:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800576a:	b29b      	uxth	r3, r3
 800576c:	ebaa 0303 	sub.w	r3, sl, r3
 8005770:	f8dc a000 	ldr.w	sl, [ip]
 8005774:	0c12      	lsrs	r2, r2, #16
 8005776:	fa13 f38a 	uxtah	r3, r3, sl
 800577a:	fb06 e202 	mla	r2, r6, r2, lr
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	9b00      	ldr	r3, [sp, #0]
 8005782:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005786:	b292      	uxth	r2, r2
 8005788:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800578c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005790:	f8bd 3000 	ldrh.w	r3, [sp]
 8005794:	4581      	cmp	r9, r0
 8005796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800579a:	f84c 3b04 	str.w	r3, [ip], #4
 800579e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80057a2:	d2db      	bcs.n	800575c <quorem+0x44>
 80057a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80057a8:	b92b      	cbnz	r3, 80057b6 <quorem+0x9e>
 80057aa:	9b01      	ldr	r3, [sp, #4]
 80057ac:	3b04      	subs	r3, #4
 80057ae:	429d      	cmp	r5, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	d32e      	bcc.n	8005812 <quorem+0xfa>
 80057b4:	613c      	str	r4, [r7, #16]
 80057b6:	4638      	mov	r0, r7
 80057b8:	f001 fc90 	bl	80070dc <__mcmp>
 80057bc:	2800      	cmp	r0, #0
 80057be:	db24      	blt.n	800580a <quorem+0xf2>
 80057c0:	3601      	adds	r6, #1
 80057c2:	4628      	mov	r0, r5
 80057c4:	f04f 0c00 	mov.w	ip, #0
 80057c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80057cc:	f8d0 e000 	ldr.w	lr, [r0]
 80057d0:	b293      	uxth	r3, r2
 80057d2:	ebac 0303 	sub.w	r3, ip, r3
 80057d6:	0c12      	lsrs	r2, r2, #16
 80057d8:	fa13 f38e 	uxtah	r3, r3, lr
 80057dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80057e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057ea:	45c1      	cmp	r9, r8
 80057ec:	f840 3b04 	str.w	r3, [r0], #4
 80057f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80057f4:	d2e8      	bcs.n	80057c8 <quorem+0xb0>
 80057f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057fe:	b922      	cbnz	r2, 800580a <quorem+0xf2>
 8005800:	3b04      	subs	r3, #4
 8005802:	429d      	cmp	r5, r3
 8005804:	461a      	mov	r2, r3
 8005806:	d30a      	bcc.n	800581e <quorem+0x106>
 8005808:	613c      	str	r4, [r7, #16]
 800580a:	4630      	mov	r0, r6
 800580c:	b003      	add	sp, #12
 800580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	3b04      	subs	r3, #4
 8005816:	2a00      	cmp	r2, #0
 8005818:	d1cc      	bne.n	80057b4 <quorem+0x9c>
 800581a:	3c01      	subs	r4, #1
 800581c:	e7c7      	b.n	80057ae <quorem+0x96>
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	3b04      	subs	r3, #4
 8005822:	2a00      	cmp	r2, #0
 8005824:	d1f0      	bne.n	8005808 <quorem+0xf0>
 8005826:	3c01      	subs	r4, #1
 8005828:	e7eb      	b.n	8005802 <quorem+0xea>
 800582a:	2000      	movs	r0, #0
 800582c:	e7ee      	b.n	800580c <quorem+0xf4>
	...

08005830 <_dtoa_r>:
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	ed2d 8b04 	vpush	{d8-d9}
 8005838:	ec57 6b10 	vmov	r6, r7, d0
 800583c:	b093      	sub	sp, #76	; 0x4c
 800583e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005840:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005844:	9106      	str	r1, [sp, #24]
 8005846:	ee10 aa10 	vmov	sl, s0
 800584a:	4604      	mov	r4, r0
 800584c:	9209      	str	r2, [sp, #36]	; 0x24
 800584e:	930c      	str	r3, [sp, #48]	; 0x30
 8005850:	46bb      	mov	fp, r7
 8005852:	b975      	cbnz	r5, 8005872 <_dtoa_r+0x42>
 8005854:	2010      	movs	r0, #16
 8005856:	f001 f94d 	bl	8006af4 <malloc>
 800585a:	4602      	mov	r2, r0
 800585c:	6260      	str	r0, [r4, #36]	; 0x24
 800585e:	b920      	cbnz	r0, 800586a <_dtoa_r+0x3a>
 8005860:	4ba7      	ldr	r3, [pc, #668]	; (8005b00 <_dtoa_r+0x2d0>)
 8005862:	21ea      	movs	r1, #234	; 0xea
 8005864:	48a7      	ldr	r0, [pc, #668]	; (8005b04 <_dtoa_r+0x2d4>)
 8005866:	f002 f8bd 	bl	80079e4 <__assert_func>
 800586a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800586e:	6005      	str	r5, [r0, #0]
 8005870:	60c5      	str	r5, [r0, #12]
 8005872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	b151      	cbz	r1, 800588e <_dtoa_r+0x5e>
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	604a      	str	r2, [r1, #4]
 800587c:	2301      	movs	r3, #1
 800587e:	4093      	lsls	r3, r2
 8005880:	608b      	str	r3, [r1, #8]
 8005882:	4620      	mov	r0, r4
 8005884:	f001 f99e 	bl	8006bc4 <_Bfree>
 8005888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	1e3b      	subs	r3, r7, #0
 8005890:	bfaa      	itet	ge
 8005892:	2300      	movge	r3, #0
 8005894:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005898:	f8c8 3000 	strge.w	r3, [r8]
 800589c:	4b9a      	ldr	r3, [pc, #616]	; (8005b08 <_dtoa_r+0x2d8>)
 800589e:	bfbc      	itt	lt
 80058a0:	2201      	movlt	r2, #1
 80058a2:	f8c8 2000 	strlt.w	r2, [r8]
 80058a6:	ea33 030b 	bics.w	r3, r3, fp
 80058aa:	d11b      	bne.n	80058e4 <_dtoa_r+0xb4>
 80058ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058b8:	4333      	orrs	r3, r6
 80058ba:	f000 8592 	beq.w	80063e2 <_dtoa_r+0xbb2>
 80058be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058c0:	b963      	cbnz	r3, 80058dc <_dtoa_r+0xac>
 80058c2:	4b92      	ldr	r3, [pc, #584]	; (8005b0c <_dtoa_r+0x2dc>)
 80058c4:	e022      	b.n	800590c <_dtoa_r+0xdc>
 80058c6:	4b92      	ldr	r3, [pc, #584]	; (8005b10 <_dtoa_r+0x2e0>)
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	3308      	adds	r3, #8
 80058cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	9801      	ldr	r0, [sp, #4]
 80058d2:	b013      	add	sp, #76	; 0x4c
 80058d4:	ecbd 8b04 	vpop	{d8-d9}
 80058d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058dc:	4b8b      	ldr	r3, [pc, #556]	; (8005b0c <_dtoa_r+0x2dc>)
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	3303      	adds	r3, #3
 80058e2:	e7f3      	b.n	80058cc <_dtoa_r+0x9c>
 80058e4:	2200      	movs	r2, #0
 80058e6:	2300      	movs	r3, #0
 80058e8:	4650      	mov	r0, sl
 80058ea:	4659      	mov	r1, fp
 80058ec:	f7fb f8f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80058f0:	ec4b ab19 	vmov	d9, sl, fp
 80058f4:	4680      	mov	r8, r0
 80058f6:	b158      	cbz	r0, 8005910 <_dtoa_r+0xe0>
 80058f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058fa:	2301      	movs	r3, #1
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 856b 	beq.w	80063dc <_dtoa_r+0xbac>
 8005906:	4883      	ldr	r0, [pc, #524]	; (8005b14 <_dtoa_r+0x2e4>)
 8005908:	6018      	str	r0, [r3, #0]
 800590a:	1e43      	subs	r3, r0, #1
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	e7df      	b.n	80058d0 <_dtoa_r+0xa0>
 8005910:	ec4b ab10 	vmov	d0, sl, fp
 8005914:	aa10      	add	r2, sp, #64	; 0x40
 8005916:	a911      	add	r1, sp, #68	; 0x44
 8005918:	4620      	mov	r0, r4
 800591a:	f001 fd01 	bl	8007320 <__d2b>
 800591e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005922:	ee08 0a10 	vmov	s16, r0
 8005926:	2d00      	cmp	r5, #0
 8005928:	f000 8084 	beq.w	8005a34 <_dtoa_r+0x204>
 800592c:	ee19 3a90 	vmov	r3, s19
 8005930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005934:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005938:	4656      	mov	r6, sl
 800593a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800593e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005942:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005946:	4b74      	ldr	r3, [pc, #464]	; (8005b18 <_dtoa_r+0x2e8>)
 8005948:	2200      	movs	r2, #0
 800594a:	4630      	mov	r0, r6
 800594c:	4639      	mov	r1, r7
 800594e:	f7fa fca3 	bl	8000298 <__aeabi_dsub>
 8005952:	a365      	add	r3, pc, #404	; (adr r3, 8005ae8 <_dtoa_r+0x2b8>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f7fa fe56 	bl	8000608 <__aeabi_dmul>
 800595c:	a364      	add	r3, pc, #400	; (adr r3, 8005af0 <_dtoa_r+0x2c0>)
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f7fa fc9b 	bl	800029c <__adddf3>
 8005966:	4606      	mov	r6, r0
 8005968:	4628      	mov	r0, r5
 800596a:	460f      	mov	r7, r1
 800596c:	f7fa fde2 	bl	8000534 <__aeabi_i2d>
 8005970:	a361      	add	r3, pc, #388	; (adr r3, 8005af8 <_dtoa_r+0x2c8>)
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f7fa fe47 	bl	8000608 <__aeabi_dmul>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4630      	mov	r0, r6
 8005980:	4639      	mov	r1, r7
 8005982:	f7fa fc8b 	bl	800029c <__adddf3>
 8005986:	4606      	mov	r6, r0
 8005988:	460f      	mov	r7, r1
 800598a:	f7fb f8ed 	bl	8000b68 <__aeabi_d2iz>
 800598e:	2200      	movs	r2, #0
 8005990:	9000      	str	r0, [sp, #0]
 8005992:	2300      	movs	r3, #0
 8005994:	4630      	mov	r0, r6
 8005996:	4639      	mov	r1, r7
 8005998:	f7fb f8a8 	bl	8000aec <__aeabi_dcmplt>
 800599c:	b150      	cbz	r0, 80059b4 <_dtoa_r+0x184>
 800599e:	9800      	ldr	r0, [sp, #0]
 80059a0:	f7fa fdc8 	bl	8000534 <__aeabi_i2d>
 80059a4:	4632      	mov	r2, r6
 80059a6:	463b      	mov	r3, r7
 80059a8:	f7fb f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80059ac:	b910      	cbnz	r0, 80059b4 <_dtoa_r+0x184>
 80059ae:	9b00      	ldr	r3, [sp, #0]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	9b00      	ldr	r3, [sp, #0]
 80059b6:	2b16      	cmp	r3, #22
 80059b8:	d85a      	bhi.n	8005a70 <_dtoa_r+0x240>
 80059ba:	9a00      	ldr	r2, [sp, #0]
 80059bc:	4b57      	ldr	r3, [pc, #348]	; (8005b1c <_dtoa_r+0x2ec>)
 80059be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	ec51 0b19 	vmov	r0, r1, d9
 80059ca:	f7fb f88f 	bl	8000aec <__aeabi_dcmplt>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d050      	beq.n	8005a74 <_dtoa_r+0x244>
 80059d2:	9b00      	ldr	r3, [sp, #0]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	2300      	movs	r3, #0
 80059da:	930b      	str	r3, [sp, #44]	; 0x2c
 80059dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059de:	1b5d      	subs	r5, r3, r5
 80059e0:	1e6b      	subs	r3, r5, #1
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	bf45      	ittet	mi
 80059e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80059ea:	9304      	strmi	r3, [sp, #16]
 80059ec:	2300      	movpl	r3, #0
 80059ee:	2300      	movmi	r3, #0
 80059f0:	bf4c      	ite	mi
 80059f2:	9305      	strmi	r3, [sp, #20]
 80059f4:	9304      	strpl	r3, [sp, #16]
 80059f6:	9b00      	ldr	r3, [sp, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	db3d      	blt.n	8005a78 <_dtoa_r+0x248>
 80059fc:	9b05      	ldr	r3, [sp, #20]
 80059fe:	9a00      	ldr	r2, [sp, #0]
 8005a00:	920a      	str	r2, [sp, #40]	; 0x28
 8005a02:	4413      	add	r3, r2
 8005a04:	9305      	str	r3, [sp, #20]
 8005a06:	2300      	movs	r3, #0
 8005a08:	9307      	str	r3, [sp, #28]
 8005a0a:	9b06      	ldr	r3, [sp, #24]
 8005a0c:	2b09      	cmp	r3, #9
 8005a0e:	f200 8089 	bhi.w	8005b24 <_dtoa_r+0x2f4>
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	bfc4      	itt	gt
 8005a16:	3b04      	subgt	r3, #4
 8005a18:	9306      	strgt	r3, [sp, #24]
 8005a1a:	9b06      	ldr	r3, [sp, #24]
 8005a1c:	f1a3 0302 	sub.w	r3, r3, #2
 8005a20:	bfcc      	ite	gt
 8005a22:	2500      	movgt	r5, #0
 8005a24:	2501      	movle	r5, #1
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	f200 8087 	bhi.w	8005b3a <_dtoa_r+0x30a>
 8005a2c:	e8df f003 	tbb	[pc, r3]
 8005a30:	59383a2d 	.word	0x59383a2d
 8005a34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005a38:	441d      	add	r5, r3
 8005a3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	bfc1      	itttt	gt
 8005a42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005a4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005a4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005a52:	bfda      	itte	le
 8005a54:	f1c3 0320 	rsble	r3, r3, #32
 8005a58:	fa06 f003 	lslle.w	r0, r6, r3
 8005a5c:	4318      	orrgt	r0, r3
 8005a5e:	f7fa fd59 	bl	8000514 <__aeabi_ui2d>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4606      	mov	r6, r0
 8005a66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005a6a:	3d01      	subs	r5, #1
 8005a6c:	930e      	str	r3, [sp, #56]	; 0x38
 8005a6e:	e76a      	b.n	8005946 <_dtoa_r+0x116>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e7b2      	b.n	80059da <_dtoa_r+0x1aa>
 8005a74:	900b      	str	r0, [sp, #44]	; 0x2c
 8005a76:	e7b1      	b.n	80059dc <_dtoa_r+0x1ac>
 8005a78:	9b04      	ldr	r3, [sp, #16]
 8005a7a:	9a00      	ldr	r2, [sp, #0]
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	9304      	str	r3, [sp, #16]
 8005a80:	4253      	negs	r3, r2
 8005a82:	9307      	str	r3, [sp, #28]
 8005a84:	2300      	movs	r3, #0
 8005a86:	930a      	str	r3, [sp, #40]	; 0x28
 8005a88:	e7bf      	b.n	8005a0a <_dtoa_r+0x1da>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9308      	str	r3, [sp, #32]
 8005a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dc55      	bgt.n	8005b40 <_dtoa_r+0x310>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a9e:	e00c      	b.n	8005aba <_dtoa_r+0x28a>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e7f3      	b.n	8005a8c <_dtoa_r+0x25c>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aa8:	9308      	str	r3, [sp, #32]
 8005aaa:	9b00      	ldr	r3, [sp, #0]
 8005aac:	4413      	add	r3, r2
 8005aae:	9302      	str	r3, [sp, #8]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	9303      	str	r3, [sp, #12]
 8005ab6:	bfb8      	it	lt
 8005ab8:	2301      	movlt	r3, #1
 8005aba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005abc:	2200      	movs	r2, #0
 8005abe:	6042      	str	r2, [r0, #4]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	f102 0614 	add.w	r6, r2, #20
 8005ac6:	429e      	cmp	r6, r3
 8005ac8:	6841      	ldr	r1, [r0, #4]
 8005aca:	d93d      	bls.n	8005b48 <_dtoa_r+0x318>
 8005acc:	4620      	mov	r0, r4
 8005ace:	f001 f839 	bl	8006b44 <_Balloc>
 8005ad2:	9001      	str	r0, [sp, #4]
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d13b      	bne.n	8005b50 <_dtoa_r+0x320>
 8005ad8:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <_dtoa_r+0x2f0>)
 8005ada:	4602      	mov	r2, r0
 8005adc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ae0:	e6c0      	b.n	8005864 <_dtoa_r+0x34>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e7df      	b.n	8005aa6 <_dtoa_r+0x276>
 8005ae6:	bf00      	nop
 8005ae8:	636f4361 	.word	0x636f4361
 8005aec:	3fd287a7 	.word	0x3fd287a7
 8005af0:	8b60c8b3 	.word	0x8b60c8b3
 8005af4:	3fc68a28 	.word	0x3fc68a28
 8005af8:	509f79fb 	.word	0x509f79fb
 8005afc:	3fd34413 	.word	0x3fd34413
 8005b00:	080097de 	.word	0x080097de
 8005b04:	080097f5 	.word	0x080097f5
 8005b08:	7ff00000 	.word	0x7ff00000
 8005b0c:	080097da 	.word	0x080097da
 8005b10:	080097d1 	.word	0x080097d1
 8005b14:	08009655 	.word	0x08009655
 8005b18:	3ff80000 	.word	0x3ff80000
 8005b1c:	08009960 	.word	0x08009960
 8005b20:	08009850 	.word	0x08009850
 8005b24:	2501      	movs	r5, #1
 8005b26:	2300      	movs	r3, #0
 8005b28:	9306      	str	r3, [sp, #24]
 8005b2a:	9508      	str	r5, [sp, #32]
 8005b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b34:	2200      	movs	r2, #0
 8005b36:	2312      	movs	r3, #18
 8005b38:	e7b0      	b.n	8005a9c <_dtoa_r+0x26c>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	9308      	str	r3, [sp, #32]
 8005b3e:	e7f5      	b.n	8005b2c <_dtoa_r+0x2fc>
 8005b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b46:	e7b8      	b.n	8005aba <_dtoa_r+0x28a>
 8005b48:	3101      	adds	r1, #1
 8005b4a:	6041      	str	r1, [r0, #4]
 8005b4c:	0052      	lsls	r2, r2, #1
 8005b4e:	e7b8      	b.n	8005ac2 <_dtoa_r+0x292>
 8005b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b52:	9a01      	ldr	r2, [sp, #4]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	9b03      	ldr	r3, [sp, #12]
 8005b58:	2b0e      	cmp	r3, #14
 8005b5a:	f200 809d 	bhi.w	8005c98 <_dtoa_r+0x468>
 8005b5e:	2d00      	cmp	r5, #0
 8005b60:	f000 809a 	beq.w	8005c98 <_dtoa_r+0x468>
 8005b64:	9b00      	ldr	r3, [sp, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	dd32      	ble.n	8005bd0 <_dtoa_r+0x3a0>
 8005b6a:	4ab7      	ldr	r2, [pc, #732]	; (8005e48 <_dtoa_r+0x618>)
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b78:	9b00      	ldr	r3, [sp, #0]
 8005b7a:	05d8      	lsls	r0, r3, #23
 8005b7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005b80:	d516      	bpl.n	8005bb0 <_dtoa_r+0x380>
 8005b82:	4bb2      	ldr	r3, [pc, #712]	; (8005e4c <_dtoa_r+0x61c>)
 8005b84:	ec51 0b19 	vmov	r0, r1, d9
 8005b88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b8c:	f7fa fe66 	bl	800085c <__aeabi_ddiv>
 8005b90:	f007 070f 	and.w	r7, r7, #15
 8005b94:	4682      	mov	sl, r0
 8005b96:	468b      	mov	fp, r1
 8005b98:	2503      	movs	r5, #3
 8005b9a:	4eac      	ldr	r6, [pc, #688]	; (8005e4c <_dtoa_r+0x61c>)
 8005b9c:	b957      	cbnz	r7, 8005bb4 <_dtoa_r+0x384>
 8005b9e:	4642      	mov	r2, r8
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	4650      	mov	r0, sl
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	f7fa fe59 	bl	800085c <__aeabi_ddiv>
 8005baa:	4682      	mov	sl, r0
 8005bac:	468b      	mov	fp, r1
 8005bae:	e028      	b.n	8005c02 <_dtoa_r+0x3d2>
 8005bb0:	2502      	movs	r5, #2
 8005bb2:	e7f2      	b.n	8005b9a <_dtoa_r+0x36a>
 8005bb4:	07f9      	lsls	r1, r7, #31
 8005bb6:	d508      	bpl.n	8005bca <_dtoa_r+0x39a>
 8005bb8:	4640      	mov	r0, r8
 8005bba:	4649      	mov	r1, r9
 8005bbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bc0:	f7fa fd22 	bl	8000608 <__aeabi_dmul>
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	4680      	mov	r8, r0
 8005bc8:	4689      	mov	r9, r1
 8005bca:	107f      	asrs	r7, r7, #1
 8005bcc:	3608      	adds	r6, #8
 8005bce:	e7e5      	b.n	8005b9c <_dtoa_r+0x36c>
 8005bd0:	f000 809b 	beq.w	8005d0a <_dtoa_r+0x4da>
 8005bd4:	9b00      	ldr	r3, [sp, #0]
 8005bd6:	4f9d      	ldr	r7, [pc, #628]	; (8005e4c <_dtoa_r+0x61c>)
 8005bd8:	425e      	negs	r6, r3
 8005bda:	4b9b      	ldr	r3, [pc, #620]	; (8005e48 <_dtoa_r+0x618>)
 8005bdc:	f006 020f 	and.w	r2, r6, #15
 8005be0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	ec51 0b19 	vmov	r0, r1, d9
 8005bec:	f7fa fd0c 	bl	8000608 <__aeabi_dmul>
 8005bf0:	1136      	asrs	r6, r6, #4
 8005bf2:	4682      	mov	sl, r0
 8005bf4:	468b      	mov	fp, r1
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2502      	movs	r5, #2
 8005bfa:	2e00      	cmp	r6, #0
 8005bfc:	d17a      	bne.n	8005cf4 <_dtoa_r+0x4c4>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1d3      	bne.n	8005baa <_dtoa_r+0x37a>
 8005c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8082 	beq.w	8005d0e <_dtoa_r+0x4de>
 8005c0a:	4b91      	ldr	r3, [pc, #580]	; (8005e50 <_dtoa_r+0x620>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4650      	mov	r0, sl
 8005c10:	4659      	mov	r1, fp
 8005c12:	f7fa ff6b 	bl	8000aec <__aeabi_dcmplt>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d079      	beq.n	8005d0e <_dtoa_r+0x4de>
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d076      	beq.n	8005d0e <_dtoa_r+0x4de>
 8005c20:	9b02      	ldr	r3, [sp, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	dd36      	ble.n	8005c94 <_dtoa_r+0x464>
 8005c26:	9b00      	ldr	r3, [sp, #0]
 8005c28:	4650      	mov	r0, sl
 8005c2a:	4659      	mov	r1, fp
 8005c2c:	1e5f      	subs	r7, r3, #1
 8005c2e:	2200      	movs	r2, #0
 8005c30:	4b88      	ldr	r3, [pc, #544]	; (8005e54 <_dtoa_r+0x624>)
 8005c32:	f7fa fce9 	bl	8000608 <__aeabi_dmul>
 8005c36:	9e02      	ldr	r6, [sp, #8]
 8005c38:	4682      	mov	sl, r0
 8005c3a:	468b      	mov	fp, r1
 8005c3c:	3501      	adds	r5, #1
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f7fa fc78 	bl	8000534 <__aeabi_i2d>
 8005c44:	4652      	mov	r2, sl
 8005c46:	465b      	mov	r3, fp
 8005c48:	f7fa fcde 	bl	8000608 <__aeabi_dmul>
 8005c4c:	4b82      	ldr	r3, [pc, #520]	; (8005e58 <_dtoa_r+0x628>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f7fa fb24 	bl	800029c <__adddf3>
 8005c54:	46d0      	mov	r8, sl
 8005c56:	46d9      	mov	r9, fp
 8005c58:	4682      	mov	sl, r0
 8005c5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005c5e:	2e00      	cmp	r6, #0
 8005c60:	d158      	bne.n	8005d14 <_dtoa_r+0x4e4>
 8005c62:	4b7e      	ldr	r3, [pc, #504]	; (8005e5c <_dtoa_r+0x62c>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	4640      	mov	r0, r8
 8005c68:	4649      	mov	r1, r9
 8005c6a:	f7fa fb15 	bl	8000298 <__aeabi_dsub>
 8005c6e:	4652      	mov	r2, sl
 8005c70:	465b      	mov	r3, fp
 8005c72:	4680      	mov	r8, r0
 8005c74:	4689      	mov	r9, r1
 8005c76:	f7fa ff57 	bl	8000b28 <__aeabi_dcmpgt>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	f040 8295 	bne.w	80061aa <_dtoa_r+0x97a>
 8005c80:	4652      	mov	r2, sl
 8005c82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005c86:	4640      	mov	r0, r8
 8005c88:	4649      	mov	r1, r9
 8005c8a:	f7fa ff2f 	bl	8000aec <__aeabi_dcmplt>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f040 8289 	bne.w	80061a6 <_dtoa_r+0x976>
 8005c94:	ec5b ab19 	vmov	sl, fp, d9
 8005c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f2c0 8148 	blt.w	8005f30 <_dtoa_r+0x700>
 8005ca0:	9a00      	ldr	r2, [sp, #0]
 8005ca2:	2a0e      	cmp	r2, #14
 8005ca4:	f300 8144 	bgt.w	8005f30 <_dtoa_r+0x700>
 8005ca8:	4b67      	ldr	r3, [pc, #412]	; (8005e48 <_dtoa_r+0x618>)
 8005caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f280 80d5 	bge.w	8005e64 <_dtoa_r+0x634>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f300 80d1 	bgt.w	8005e64 <_dtoa_r+0x634>
 8005cc2:	f040 826f 	bne.w	80061a4 <_dtoa_r+0x974>
 8005cc6:	4b65      	ldr	r3, [pc, #404]	; (8005e5c <_dtoa_r+0x62c>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4640      	mov	r0, r8
 8005ccc:	4649      	mov	r1, r9
 8005cce:	f7fa fc9b 	bl	8000608 <__aeabi_dmul>
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	465b      	mov	r3, fp
 8005cd6:	f7fa ff1d 	bl	8000b14 <__aeabi_dcmpge>
 8005cda:	9e03      	ldr	r6, [sp, #12]
 8005cdc:	4637      	mov	r7, r6
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	f040 8245 	bne.w	800616e <_dtoa_r+0x93e>
 8005ce4:	9d01      	ldr	r5, [sp, #4]
 8005ce6:	2331      	movs	r3, #49	; 0x31
 8005ce8:	f805 3b01 	strb.w	r3, [r5], #1
 8005cec:	9b00      	ldr	r3, [sp, #0]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	e240      	b.n	8006176 <_dtoa_r+0x946>
 8005cf4:	07f2      	lsls	r2, r6, #31
 8005cf6:	d505      	bpl.n	8005d04 <_dtoa_r+0x4d4>
 8005cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cfc:	f7fa fc84 	bl	8000608 <__aeabi_dmul>
 8005d00:	3501      	adds	r5, #1
 8005d02:	2301      	movs	r3, #1
 8005d04:	1076      	asrs	r6, r6, #1
 8005d06:	3708      	adds	r7, #8
 8005d08:	e777      	b.n	8005bfa <_dtoa_r+0x3ca>
 8005d0a:	2502      	movs	r5, #2
 8005d0c:	e779      	b.n	8005c02 <_dtoa_r+0x3d2>
 8005d0e:	9f00      	ldr	r7, [sp, #0]
 8005d10:	9e03      	ldr	r6, [sp, #12]
 8005d12:	e794      	b.n	8005c3e <_dtoa_r+0x40e>
 8005d14:	9901      	ldr	r1, [sp, #4]
 8005d16:	4b4c      	ldr	r3, [pc, #304]	; (8005e48 <_dtoa_r+0x618>)
 8005d18:	4431      	add	r1, r6
 8005d1a:	910d      	str	r1, [sp, #52]	; 0x34
 8005d1c:	9908      	ldr	r1, [sp, #32]
 8005d1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d26:	2900      	cmp	r1, #0
 8005d28:	d043      	beq.n	8005db2 <_dtoa_r+0x582>
 8005d2a:	494d      	ldr	r1, [pc, #308]	; (8005e60 <_dtoa_r+0x630>)
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	f7fa fd95 	bl	800085c <__aeabi_ddiv>
 8005d32:	4652      	mov	r2, sl
 8005d34:	465b      	mov	r3, fp
 8005d36:	f7fa faaf 	bl	8000298 <__aeabi_dsub>
 8005d3a:	9d01      	ldr	r5, [sp, #4]
 8005d3c:	4682      	mov	sl, r0
 8005d3e:	468b      	mov	fp, r1
 8005d40:	4649      	mov	r1, r9
 8005d42:	4640      	mov	r0, r8
 8005d44:	f7fa ff10 	bl	8000b68 <__aeabi_d2iz>
 8005d48:	4606      	mov	r6, r0
 8005d4a:	f7fa fbf3 	bl	8000534 <__aeabi_i2d>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4640      	mov	r0, r8
 8005d54:	4649      	mov	r1, r9
 8005d56:	f7fa fa9f 	bl	8000298 <__aeabi_dsub>
 8005d5a:	3630      	adds	r6, #48	; 0x30
 8005d5c:	f805 6b01 	strb.w	r6, [r5], #1
 8005d60:	4652      	mov	r2, sl
 8005d62:	465b      	mov	r3, fp
 8005d64:	4680      	mov	r8, r0
 8005d66:	4689      	mov	r9, r1
 8005d68:	f7fa fec0 	bl	8000aec <__aeabi_dcmplt>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d163      	bne.n	8005e38 <_dtoa_r+0x608>
 8005d70:	4642      	mov	r2, r8
 8005d72:	464b      	mov	r3, r9
 8005d74:	4936      	ldr	r1, [pc, #216]	; (8005e50 <_dtoa_r+0x620>)
 8005d76:	2000      	movs	r0, #0
 8005d78:	f7fa fa8e 	bl	8000298 <__aeabi_dsub>
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	465b      	mov	r3, fp
 8005d80:	f7fa feb4 	bl	8000aec <__aeabi_dcmplt>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	f040 80b5 	bne.w	8005ef4 <_dtoa_r+0x6c4>
 8005d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d8c:	429d      	cmp	r5, r3
 8005d8e:	d081      	beq.n	8005c94 <_dtoa_r+0x464>
 8005d90:	4b30      	ldr	r3, [pc, #192]	; (8005e54 <_dtoa_r+0x624>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	4650      	mov	r0, sl
 8005d96:	4659      	mov	r1, fp
 8005d98:	f7fa fc36 	bl	8000608 <__aeabi_dmul>
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	; (8005e54 <_dtoa_r+0x624>)
 8005d9e:	4682      	mov	sl, r0
 8005da0:	468b      	mov	fp, r1
 8005da2:	4640      	mov	r0, r8
 8005da4:	4649      	mov	r1, r9
 8005da6:	2200      	movs	r2, #0
 8005da8:	f7fa fc2e 	bl	8000608 <__aeabi_dmul>
 8005dac:	4680      	mov	r8, r0
 8005dae:	4689      	mov	r9, r1
 8005db0:	e7c6      	b.n	8005d40 <_dtoa_r+0x510>
 8005db2:	4650      	mov	r0, sl
 8005db4:	4659      	mov	r1, fp
 8005db6:	f7fa fc27 	bl	8000608 <__aeabi_dmul>
 8005dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dbc:	9d01      	ldr	r5, [sp, #4]
 8005dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dc0:	4682      	mov	sl, r0
 8005dc2:	468b      	mov	fp, r1
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	f7fa fece 	bl	8000b68 <__aeabi_d2iz>
 8005dcc:	4606      	mov	r6, r0
 8005dce:	f7fa fbb1 	bl	8000534 <__aeabi_i2d>
 8005dd2:	3630      	adds	r6, #48	; 0x30
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4640      	mov	r0, r8
 8005dda:	4649      	mov	r1, r9
 8005ddc:	f7fa fa5c 	bl	8000298 <__aeabi_dsub>
 8005de0:	f805 6b01 	strb.w	r6, [r5], #1
 8005de4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005de6:	429d      	cmp	r5, r3
 8005de8:	4680      	mov	r8, r0
 8005dea:	4689      	mov	r9, r1
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	d124      	bne.n	8005e3c <_dtoa_r+0x60c>
 8005df2:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <_dtoa_r+0x630>)
 8005df4:	4650      	mov	r0, sl
 8005df6:	4659      	mov	r1, fp
 8005df8:	f7fa fa50 	bl	800029c <__adddf3>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4640      	mov	r0, r8
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa fe90 	bl	8000b28 <__aeabi_dcmpgt>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d173      	bne.n	8005ef4 <_dtoa_r+0x6c4>
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	465b      	mov	r3, fp
 8005e10:	4913      	ldr	r1, [pc, #76]	; (8005e60 <_dtoa_r+0x630>)
 8005e12:	2000      	movs	r0, #0
 8005e14:	f7fa fa40 	bl	8000298 <__aeabi_dsub>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	4649      	mov	r1, r9
 8005e20:	f7fa fe64 	bl	8000aec <__aeabi_dcmplt>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	f43f af35 	beq.w	8005c94 <_dtoa_r+0x464>
 8005e2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005e2c:	1e6b      	subs	r3, r5, #1
 8005e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e34:	2b30      	cmp	r3, #48	; 0x30
 8005e36:	d0f8      	beq.n	8005e2a <_dtoa_r+0x5fa>
 8005e38:	9700      	str	r7, [sp, #0]
 8005e3a:	e049      	b.n	8005ed0 <_dtoa_r+0x6a0>
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <_dtoa_r+0x624>)
 8005e3e:	f7fa fbe3 	bl	8000608 <__aeabi_dmul>
 8005e42:	4680      	mov	r8, r0
 8005e44:	4689      	mov	r9, r1
 8005e46:	e7bd      	b.n	8005dc4 <_dtoa_r+0x594>
 8005e48:	08009960 	.word	0x08009960
 8005e4c:	08009938 	.word	0x08009938
 8005e50:	3ff00000 	.word	0x3ff00000
 8005e54:	40240000 	.word	0x40240000
 8005e58:	401c0000 	.word	0x401c0000
 8005e5c:	40140000 	.word	0x40140000
 8005e60:	3fe00000 	.word	0x3fe00000
 8005e64:	9d01      	ldr	r5, [sp, #4]
 8005e66:	4656      	mov	r6, sl
 8005e68:	465f      	mov	r7, fp
 8005e6a:	4642      	mov	r2, r8
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	4630      	mov	r0, r6
 8005e70:	4639      	mov	r1, r7
 8005e72:	f7fa fcf3 	bl	800085c <__aeabi_ddiv>
 8005e76:	f7fa fe77 	bl	8000b68 <__aeabi_d2iz>
 8005e7a:	4682      	mov	sl, r0
 8005e7c:	f7fa fb5a 	bl	8000534 <__aeabi_i2d>
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	f7fa fbc0 	bl	8000608 <__aeabi_dmul>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4639      	mov	r1, r7
 8005e90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005e94:	f7fa fa00 	bl	8000298 <__aeabi_dsub>
 8005e98:	f805 6b01 	strb.w	r6, [r5], #1
 8005e9c:	9e01      	ldr	r6, [sp, #4]
 8005e9e:	9f03      	ldr	r7, [sp, #12]
 8005ea0:	1bae      	subs	r6, r5, r6
 8005ea2:	42b7      	cmp	r7, r6
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	d135      	bne.n	8005f16 <_dtoa_r+0x6e6>
 8005eaa:	f7fa f9f7 	bl	800029c <__adddf3>
 8005eae:	4642      	mov	r2, r8
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	460f      	mov	r7, r1
 8005eb6:	f7fa fe37 	bl	8000b28 <__aeabi_dcmpgt>
 8005eba:	b9d0      	cbnz	r0, 8005ef2 <_dtoa_r+0x6c2>
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f7fa fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ec8:	b110      	cbz	r0, 8005ed0 <_dtoa_r+0x6a0>
 8005eca:	f01a 0f01 	tst.w	sl, #1
 8005ece:	d110      	bne.n	8005ef2 <_dtoa_r+0x6c2>
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	ee18 1a10 	vmov	r1, s16
 8005ed6:	f000 fe75 	bl	8006bc4 <_Bfree>
 8005eda:	2300      	movs	r3, #0
 8005edc:	9800      	ldr	r0, [sp, #0]
 8005ede:	702b      	strb	r3, [r5, #0]
 8005ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	6018      	str	r0, [r3, #0]
 8005ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f43f acf1 	beq.w	80058d0 <_dtoa_r+0xa0>
 8005eee:	601d      	str	r5, [r3, #0]
 8005ef0:	e4ee      	b.n	80058d0 <_dtoa_r+0xa0>
 8005ef2:	9f00      	ldr	r7, [sp, #0]
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	461d      	mov	r5, r3
 8005ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005efc:	2a39      	cmp	r2, #57	; 0x39
 8005efe:	d106      	bne.n	8005f0e <_dtoa_r+0x6de>
 8005f00:	9a01      	ldr	r2, [sp, #4]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d1f7      	bne.n	8005ef6 <_dtoa_r+0x6c6>
 8005f06:	9901      	ldr	r1, [sp, #4]
 8005f08:	2230      	movs	r2, #48	; 0x30
 8005f0a:	3701      	adds	r7, #1
 8005f0c:	700a      	strb	r2, [r1, #0]
 8005f0e:	781a      	ldrb	r2, [r3, #0]
 8005f10:	3201      	adds	r2, #1
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	e790      	b.n	8005e38 <_dtoa_r+0x608>
 8005f16:	4ba6      	ldr	r3, [pc, #664]	; (80061b0 <_dtoa_r+0x980>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f7fa fb75 	bl	8000608 <__aeabi_dmul>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2300      	movs	r3, #0
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	f7fa fdd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d09d      	beq.n	8005e6a <_dtoa_r+0x63a>
 8005f2e:	e7cf      	b.n	8005ed0 <_dtoa_r+0x6a0>
 8005f30:	9a08      	ldr	r2, [sp, #32]
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	f000 80d7 	beq.w	80060e6 <_dtoa_r+0x8b6>
 8005f38:	9a06      	ldr	r2, [sp, #24]
 8005f3a:	2a01      	cmp	r2, #1
 8005f3c:	f300 80ba 	bgt.w	80060b4 <_dtoa_r+0x884>
 8005f40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f42:	2a00      	cmp	r2, #0
 8005f44:	f000 80b2 	beq.w	80060ac <_dtoa_r+0x87c>
 8005f48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f4c:	9e07      	ldr	r6, [sp, #28]
 8005f4e:	9d04      	ldr	r5, [sp, #16]
 8005f50:	9a04      	ldr	r2, [sp, #16]
 8005f52:	441a      	add	r2, r3
 8005f54:	9204      	str	r2, [sp, #16]
 8005f56:	9a05      	ldr	r2, [sp, #20]
 8005f58:	2101      	movs	r1, #1
 8005f5a:	441a      	add	r2, r3
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	9205      	str	r2, [sp, #20]
 8005f60:	f000 ff32 	bl	8006dc8 <__i2b>
 8005f64:	4607      	mov	r7, r0
 8005f66:	2d00      	cmp	r5, #0
 8005f68:	dd0c      	ble.n	8005f84 <_dtoa_r+0x754>
 8005f6a:	9b05      	ldr	r3, [sp, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	dd09      	ble.n	8005f84 <_dtoa_r+0x754>
 8005f70:	42ab      	cmp	r3, r5
 8005f72:	9a04      	ldr	r2, [sp, #16]
 8005f74:	bfa8      	it	ge
 8005f76:	462b      	movge	r3, r5
 8005f78:	1ad2      	subs	r2, r2, r3
 8005f7a:	9204      	str	r2, [sp, #16]
 8005f7c:	9a05      	ldr	r2, [sp, #20]
 8005f7e:	1aed      	subs	r5, r5, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	9305      	str	r3, [sp, #20]
 8005f84:	9b07      	ldr	r3, [sp, #28]
 8005f86:	b31b      	cbz	r3, 8005fd0 <_dtoa_r+0x7a0>
 8005f88:	9b08      	ldr	r3, [sp, #32]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80af 	beq.w	80060ee <_dtoa_r+0x8be>
 8005f90:	2e00      	cmp	r6, #0
 8005f92:	dd13      	ble.n	8005fbc <_dtoa_r+0x78c>
 8005f94:	4639      	mov	r1, r7
 8005f96:	4632      	mov	r2, r6
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 ffd5 	bl	8006f48 <__pow5mult>
 8005f9e:	ee18 2a10 	vmov	r2, s16
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	4607      	mov	r7, r0
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f000 ff24 	bl	8006df4 <__multiply>
 8005fac:	ee18 1a10 	vmov	r1, s16
 8005fb0:	4680      	mov	r8, r0
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 fe06 	bl	8006bc4 <_Bfree>
 8005fb8:	ee08 8a10 	vmov	s16, r8
 8005fbc:	9b07      	ldr	r3, [sp, #28]
 8005fbe:	1b9a      	subs	r2, r3, r6
 8005fc0:	d006      	beq.n	8005fd0 <_dtoa_r+0x7a0>
 8005fc2:	ee18 1a10 	vmov	r1, s16
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f000 ffbe 	bl	8006f48 <__pow5mult>
 8005fcc:	ee08 0a10 	vmov	s16, r0
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 fef8 	bl	8006dc8 <__i2b>
 8005fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	4606      	mov	r6, r0
 8005fde:	f340 8088 	ble.w	80060f2 <_dtoa_r+0x8c2>
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4601      	mov	r1, r0
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 ffae 	bl	8006f48 <__pow5mult>
 8005fec:	9b06      	ldr	r3, [sp, #24]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	4606      	mov	r6, r0
 8005ff2:	f340 8081 	ble.w	80060f8 <_dtoa_r+0x8c8>
 8005ff6:	f04f 0800 	mov.w	r8, #0
 8005ffa:	6933      	ldr	r3, [r6, #16]
 8005ffc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006000:	6918      	ldr	r0, [r3, #16]
 8006002:	f000 fe91 	bl	8006d28 <__hi0bits>
 8006006:	f1c0 0020 	rsb	r0, r0, #32
 800600a:	9b05      	ldr	r3, [sp, #20]
 800600c:	4418      	add	r0, r3
 800600e:	f010 001f 	ands.w	r0, r0, #31
 8006012:	f000 8092 	beq.w	800613a <_dtoa_r+0x90a>
 8006016:	f1c0 0320 	rsb	r3, r0, #32
 800601a:	2b04      	cmp	r3, #4
 800601c:	f340 808a 	ble.w	8006134 <_dtoa_r+0x904>
 8006020:	f1c0 001c 	rsb	r0, r0, #28
 8006024:	9b04      	ldr	r3, [sp, #16]
 8006026:	4403      	add	r3, r0
 8006028:	9304      	str	r3, [sp, #16]
 800602a:	9b05      	ldr	r3, [sp, #20]
 800602c:	4403      	add	r3, r0
 800602e:	4405      	add	r5, r0
 8006030:	9305      	str	r3, [sp, #20]
 8006032:	9b04      	ldr	r3, [sp, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	dd07      	ble.n	8006048 <_dtoa_r+0x818>
 8006038:	ee18 1a10 	vmov	r1, s16
 800603c:	461a      	mov	r2, r3
 800603e:	4620      	mov	r0, r4
 8006040:	f000 ffdc 	bl	8006ffc <__lshift>
 8006044:	ee08 0a10 	vmov	s16, r0
 8006048:	9b05      	ldr	r3, [sp, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	dd05      	ble.n	800605a <_dtoa_r+0x82a>
 800604e:	4631      	mov	r1, r6
 8006050:	461a      	mov	r2, r3
 8006052:	4620      	mov	r0, r4
 8006054:	f000 ffd2 	bl	8006ffc <__lshift>
 8006058:	4606      	mov	r6, r0
 800605a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d06e      	beq.n	800613e <_dtoa_r+0x90e>
 8006060:	ee18 0a10 	vmov	r0, s16
 8006064:	4631      	mov	r1, r6
 8006066:	f001 f839 	bl	80070dc <__mcmp>
 800606a:	2800      	cmp	r0, #0
 800606c:	da67      	bge.n	800613e <_dtoa_r+0x90e>
 800606e:	9b00      	ldr	r3, [sp, #0]
 8006070:	3b01      	subs	r3, #1
 8006072:	ee18 1a10 	vmov	r1, s16
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	220a      	movs	r2, #10
 800607a:	2300      	movs	r3, #0
 800607c:	4620      	mov	r0, r4
 800607e:	f000 fdc3 	bl	8006c08 <__multadd>
 8006082:	9b08      	ldr	r3, [sp, #32]
 8006084:	ee08 0a10 	vmov	s16, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 81b1 	beq.w	80063f0 <_dtoa_r+0xbc0>
 800608e:	2300      	movs	r3, #0
 8006090:	4639      	mov	r1, r7
 8006092:	220a      	movs	r2, #10
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fdb7 	bl	8006c08 <__multadd>
 800609a:	9b02      	ldr	r3, [sp, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	4607      	mov	r7, r0
 80060a0:	f300 808e 	bgt.w	80061c0 <_dtoa_r+0x990>
 80060a4:	9b06      	ldr	r3, [sp, #24]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	dc51      	bgt.n	800614e <_dtoa_r+0x91e>
 80060aa:	e089      	b.n	80061c0 <_dtoa_r+0x990>
 80060ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060b2:	e74b      	b.n	8005f4c <_dtoa_r+0x71c>
 80060b4:	9b03      	ldr	r3, [sp, #12]
 80060b6:	1e5e      	subs	r6, r3, #1
 80060b8:	9b07      	ldr	r3, [sp, #28]
 80060ba:	42b3      	cmp	r3, r6
 80060bc:	bfbf      	itttt	lt
 80060be:	9b07      	ldrlt	r3, [sp, #28]
 80060c0:	9607      	strlt	r6, [sp, #28]
 80060c2:	1af2      	sublt	r2, r6, r3
 80060c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80060c6:	bfb6      	itet	lt
 80060c8:	189b      	addlt	r3, r3, r2
 80060ca:	1b9e      	subge	r6, r3, r6
 80060cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	bfb8      	it	lt
 80060d2:	2600      	movlt	r6, #0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bfb7      	itett	lt
 80060d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80060dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80060e0:	1a9d      	sublt	r5, r3, r2
 80060e2:	2300      	movlt	r3, #0
 80060e4:	e734      	b.n	8005f50 <_dtoa_r+0x720>
 80060e6:	9e07      	ldr	r6, [sp, #28]
 80060e8:	9d04      	ldr	r5, [sp, #16]
 80060ea:	9f08      	ldr	r7, [sp, #32]
 80060ec:	e73b      	b.n	8005f66 <_dtoa_r+0x736>
 80060ee:	9a07      	ldr	r2, [sp, #28]
 80060f0:	e767      	b.n	8005fc2 <_dtoa_r+0x792>
 80060f2:	9b06      	ldr	r3, [sp, #24]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	dc18      	bgt.n	800612a <_dtoa_r+0x8fa>
 80060f8:	f1ba 0f00 	cmp.w	sl, #0
 80060fc:	d115      	bne.n	800612a <_dtoa_r+0x8fa>
 80060fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006102:	b993      	cbnz	r3, 800612a <_dtoa_r+0x8fa>
 8006104:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006108:	0d1b      	lsrs	r3, r3, #20
 800610a:	051b      	lsls	r3, r3, #20
 800610c:	b183      	cbz	r3, 8006130 <_dtoa_r+0x900>
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	3301      	adds	r3, #1
 8006112:	9304      	str	r3, [sp, #16]
 8006114:	9b05      	ldr	r3, [sp, #20]
 8006116:	3301      	adds	r3, #1
 8006118:	9305      	str	r3, [sp, #20]
 800611a:	f04f 0801 	mov.w	r8, #1
 800611e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006120:	2b00      	cmp	r3, #0
 8006122:	f47f af6a 	bne.w	8005ffa <_dtoa_r+0x7ca>
 8006126:	2001      	movs	r0, #1
 8006128:	e76f      	b.n	800600a <_dtoa_r+0x7da>
 800612a:	f04f 0800 	mov.w	r8, #0
 800612e:	e7f6      	b.n	800611e <_dtoa_r+0x8ee>
 8006130:	4698      	mov	r8, r3
 8006132:	e7f4      	b.n	800611e <_dtoa_r+0x8ee>
 8006134:	f43f af7d 	beq.w	8006032 <_dtoa_r+0x802>
 8006138:	4618      	mov	r0, r3
 800613a:	301c      	adds	r0, #28
 800613c:	e772      	b.n	8006024 <_dtoa_r+0x7f4>
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	dc37      	bgt.n	80061b4 <_dtoa_r+0x984>
 8006144:	9b06      	ldr	r3, [sp, #24]
 8006146:	2b02      	cmp	r3, #2
 8006148:	dd34      	ble.n	80061b4 <_dtoa_r+0x984>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	9302      	str	r3, [sp, #8]
 800614e:	9b02      	ldr	r3, [sp, #8]
 8006150:	b96b      	cbnz	r3, 800616e <_dtoa_r+0x93e>
 8006152:	4631      	mov	r1, r6
 8006154:	2205      	movs	r2, #5
 8006156:	4620      	mov	r0, r4
 8006158:	f000 fd56 	bl	8006c08 <__multadd>
 800615c:	4601      	mov	r1, r0
 800615e:	4606      	mov	r6, r0
 8006160:	ee18 0a10 	vmov	r0, s16
 8006164:	f000 ffba 	bl	80070dc <__mcmp>
 8006168:	2800      	cmp	r0, #0
 800616a:	f73f adbb 	bgt.w	8005ce4 <_dtoa_r+0x4b4>
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	9d01      	ldr	r5, [sp, #4]
 8006172:	43db      	mvns	r3, r3
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	f04f 0800 	mov.w	r8, #0
 800617a:	4631      	mov	r1, r6
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fd21 	bl	8006bc4 <_Bfree>
 8006182:	2f00      	cmp	r7, #0
 8006184:	f43f aea4 	beq.w	8005ed0 <_dtoa_r+0x6a0>
 8006188:	f1b8 0f00 	cmp.w	r8, #0
 800618c:	d005      	beq.n	800619a <_dtoa_r+0x96a>
 800618e:	45b8      	cmp	r8, r7
 8006190:	d003      	beq.n	800619a <_dtoa_r+0x96a>
 8006192:	4641      	mov	r1, r8
 8006194:	4620      	mov	r0, r4
 8006196:	f000 fd15 	bl	8006bc4 <_Bfree>
 800619a:	4639      	mov	r1, r7
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fd11 	bl	8006bc4 <_Bfree>
 80061a2:	e695      	b.n	8005ed0 <_dtoa_r+0x6a0>
 80061a4:	2600      	movs	r6, #0
 80061a6:	4637      	mov	r7, r6
 80061a8:	e7e1      	b.n	800616e <_dtoa_r+0x93e>
 80061aa:	9700      	str	r7, [sp, #0]
 80061ac:	4637      	mov	r7, r6
 80061ae:	e599      	b.n	8005ce4 <_dtoa_r+0x4b4>
 80061b0:	40240000 	.word	0x40240000
 80061b4:	9b08      	ldr	r3, [sp, #32]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 80ca 	beq.w	8006350 <_dtoa_r+0xb20>
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	9302      	str	r3, [sp, #8]
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	dd05      	ble.n	80061d0 <_dtoa_r+0x9a0>
 80061c4:	4639      	mov	r1, r7
 80061c6:	462a      	mov	r2, r5
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 ff17 	bl	8006ffc <__lshift>
 80061ce:	4607      	mov	r7, r0
 80061d0:	f1b8 0f00 	cmp.w	r8, #0
 80061d4:	d05b      	beq.n	800628e <_dtoa_r+0xa5e>
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 fcb3 	bl	8006b44 <_Balloc>
 80061de:	4605      	mov	r5, r0
 80061e0:	b928      	cbnz	r0, 80061ee <_dtoa_r+0x9be>
 80061e2:	4b87      	ldr	r3, [pc, #540]	; (8006400 <_dtoa_r+0xbd0>)
 80061e4:	4602      	mov	r2, r0
 80061e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80061ea:	f7ff bb3b 	b.w	8005864 <_dtoa_r+0x34>
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	3202      	adds	r2, #2
 80061f2:	0092      	lsls	r2, r2, #2
 80061f4:	f107 010c 	add.w	r1, r7, #12
 80061f8:	300c      	adds	r0, #12
 80061fa:	f000 fc95 	bl	8006b28 <memcpy>
 80061fe:	2201      	movs	r2, #1
 8006200:	4629      	mov	r1, r5
 8006202:	4620      	mov	r0, r4
 8006204:	f000 fefa 	bl	8006ffc <__lshift>
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	f103 0901 	add.w	r9, r3, #1
 800620e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006212:	4413      	add	r3, r2
 8006214:	9305      	str	r3, [sp, #20]
 8006216:	f00a 0301 	and.w	r3, sl, #1
 800621a:	46b8      	mov	r8, r7
 800621c:	9304      	str	r3, [sp, #16]
 800621e:	4607      	mov	r7, r0
 8006220:	4631      	mov	r1, r6
 8006222:	ee18 0a10 	vmov	r0, s16
 8006226:	f7ff fa77 	bl	8005718 <quorem>
 800622a:	4641      	mov	r1, r8
 800622c:	9002      	str	r0, [sp, #8]
 800622e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006232:	ee18 0a10 	vmov	r0, s16
 8006236:	f000 ff51 	bl	80070dc <__mcmp>
 800623a:	463a      	mov	r2, r7
 800623c:	9003      	str	r0, [sp, #12]
 800623e:	4631      	mov	r1, r6
 8006240:	4620      	mov	r0, r4
 8006242:	f000 ff67 	bl	8007114 <__mdiff>
 8006246:	68c2      	ldr	r2, [r0, #12]
 8006248:	f109 3bff 	add.w	fp, r9, #4294967295
 800624c:	4605      	mov	r5, r0
 800624e:	bb02      	cbnz	r2, 8006292 <_dtoa_r+0xa62>
 8006250:	4601      	mov	r1, r0
 8006252:	ee18 0a10 	vmov	r0, s16
 8006256:	f000 ff41 	bl	80070dc <__mcmp>
 800625a:	4602      	mov	r2, r0
 800625c:	4629      	mov	r1, r5
 800625e:	4620      	mov	r0, r4
 8006260:	9207      	str	r2, [sp, #28]
 8006262:	f000 fcaf 	bl	8006bc4 <_Bfree>
 8006266:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800626a:	ea43 0102 	orr.w	r1, r3, r2
 800626e:	9b04      	ldr	r3, [sp, #16]
 8006270:	430b      	orrs	r3, r1
 8006272:	464d      	mov	r5, r9
 8006274:	d10f      	bne.n	8006296 <_dtoa_r+0xa66>
 8006276:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800627a:	d02a      	beq.n	80062d2 <_dtoa_r+0xaa2>
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	dd02      	ble.n	8006288 <_dtoa_r+0xa58>
 8006282:	9b02      	ldr	r3, [sp, #8]
 8006284:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006288:	f88b a000 	strb.w	sl, [fp]
 800628c:	e775      	b.n	800617a <_dtoa_r+0x94a>
 800628e:	4638      	mov	r0, r7
 8006290:	e7ba      	b.n	8006208 <_dtoa_r+0x9d8>
 8006292:	2201      	movs	r2, #1
 8006294:	e7e2      	b.n	800625c <_dtoa_r+0xa2c>
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	db04      	blt.n	80062a6 <_dtoa_r+0xa76>
 800629c:	9906      	ldr	r1, [sp, #24]
 800629e:	430b      	orrs	r3, r1
 80062a0:	9904      	ldr	r1, [sp, #16]
 80062a2:	430b      	orrs	r3, r1
 80062a4:	d122      	bne.n	80062ec <_dtoa_r+0xabc>
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	ddee      	ble.n	8006288 <_dtoa_r+0xa58>
 80062aa:	ee18 1a10 	vmov	r1, s16
 80062ae:	2201      	movs	r2, #1
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 fea3 	bl	8006ffc <__lshift>
 80062b6:	4631      	mov	r1, r6
 80062b8:	ee08 0a10 	vmov	s16, r0
 80062bc:	f000 ff0e 	bl	80070dc <__mcmp>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	dc03      	bgt.n	80062cc <_dtoa_r+0xa9c>
 80062c4:	d1e0      	bne.n	8006288 <_dtoa_r+0xa58>
 80062c6:	f01a 0f01 	tst.w	sl, #1
 80062ca:	d0dd      	beq.n	8006288 <_dtoa_r+0xa58>
 80062cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062d0:	d1d7      	bne.n	8006282 <_dtoa_r+0xa52>
 80062d2:	2339      	movs	r3, #57	; 0x39
 80062d4:	f88b 3000 	strb.w	r3, [fp]
 80062d8:	462b      	mov	r3, r5
 80062da:	461d      	mov	r5, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80062e2:	2a39      	cmp	r2, #57	; 0x39
 80062e4:	d071      	beq.n	80063ca <_dtoa_r+0xb9a>
 80062e6:	3201      	adds	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	e746      	b.n	800617a <_dtoa_r+0x94a>
 80062ec:	2a00      	cmp	r2, #0
 80062ee:	dd07      	ble.n	8006300 <_dtoa_r+0xad0>
 80062f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062f4:	d0ed      	beq.n	80062d2 <_dtoa_r+0xaa2>
 80062f6:	f10a 0301 	add.w	r3, sl, #1
 80062fa:	f88b 3000 	strb.w	r3, [fp]
 80062fe:	e73c      	b.n	800617a <_dtoa_r+0x94a>
 8006300:	9b05      	ldr	r3, [sp, #20]
 8006302:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006306:	4599      	cmp	r9, r3
 8006308:	d047      	beq.n	800639a <_dtoa_r+0xb6a>
 800630a:	ee18 1a10 	vmov	r1, s16
 800630e:	2300      	movs	r3, #0
 8006310:	220a      	movs	r2, #10
 8006312:	4620      	mov	r0, r4
 8006314:	f000 fc78 	bl	8006c08 <__multadd>
 8006318:	45b8      	cmp	r8, r7
 800631a:	ee08 0a10 	vmov	s16, r0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	f04f 020a 	mov.w	r2, #10
 8006326:	4641      	mov	r1, r8
 8006328:	4620      	mov	r0, r4
 800632a:	d106      	bne.n	800633a <_dtoa_r+0xb0a>
 800632c:	f000 fc6c 	bl	8006c08 <__multadd>
 8006330:	4680      	mov	r8, r0
 8006332:	4607      	mov	r7, r0
 8006334:	f109 0901 	add.w	r9, r9, #1
 8006338:	e772      	b.n	8006220 <_dtoa_r+0x9f0>
 800633a:	f000 fc65 	bl	8006c08 <__multadd>
 800633e:	4639      	mov	r1, r7
 8006340:	4680      	mov	r8, r0
 8006342:	2300      	movs	r3, #0
 8006344:	220a      	movs	r2, #10
 8006346:	4620      	mov	r0, r4
 8006348:	f000 fc5e 	bl	8006c08 <__multadd>
 800634c:	4607      	mov	r7, r0
 800634e:	e7f1      	b.n	8006334 <_dtoa_r+0xb04>
 8006350:	9b03      	ldr	r3, [sp, #12]
 8006352:	9302      	str	r3, [sp, #8]
 8006354:	9d01      	ldr	r5, [sp, #4]
 8006356:	ee18 0a10 	vmov	r0, s16
 800635a:	4631      	mov	r1, r6
 800635c:	f7ff f9dc 	bl	8005718 <quorem>
 8006360:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006364:	9b01      	ldr	r3, [sp, #4]
 8006366:	f805 ab01 	strb.w	sl, [r5], #1
 800636a:	1aea      	subs	r2, r5, r3
 800636c:	9b02      	ldr	r3, [sp, #8]
 800636e:	4293      	cmp	r3, r2
 8006370:	dd09      	ble.n	8006386 <_dtoa_r+0xb56>
 8006372:	ee18 1a10 	vmov	r1, s16
 8006376:	2300      	movs	r3, #0
 8006378:	220a      	movs	r2, #10
 800637a:	4620      	mov	r0, r4
 800637c:	f000 fc44 	bl	8006c08 <__multadd>
 8006380:	ee08 0a10 	vmov	s16, r0
 8006384:	e7e7      	b.n	8006356 <_dtoa_r+0xb26>
 8006386:	9b02      	ldr	r3, [sp, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	bfc8      	it	gt
 800638c:	461d      	movgt	r5, r3
 800638e:	9b01      	ldr	r3, [sp, #4]
 8006390:	bfd8      	it	le
 8006392:	2501      	movle	r5, #1
 8006394:	441d      	add	r5, r3
 8006396:	f04f 0800 	mov.w	r8, #0
 800639a:	ee18 1a10 	vmov	r1, s16
 800639e:	2201      	movs	r2, #1
 80063a0:	4620      	mov	r0, r4
 80063a2:	f000 fe2b 	bl	8006ffc <__lshift>
 80063a6:	4631      	mov	r1, r6
 80063a8:	ee08 0a10 	vmov	s16, r0
 80063ac:	f000 fe96 	bl	80070dc <__mcmp>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	dc91      	bgt.n	80062d8 <_dtoa_r+0xaa8>
 80063b4:	d102      	bne.n	80063bc <_dtoa_r+0xb8c>
 80063b6:	f01a 0f01 	tst.w	sl, #1
 80063ba:	d18d      	bne.n	80062d8 <_dtoa_r+0xaa8>
 80063bc:	462b      	mov	r3, r5
 80063be:	461d      	mov	r5, r3
 80063c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063c4:	2a30      	cmp	r2, #48	; 0x30
 80063c6:	d0fa      	beq.n	80063be <_dtoa_r+0xb8e>
 80063c8:	e6d7      	b.n	800617a <_dtoa_r+0x94a>
 80063ca:	9a01      	ldr	r2, [sp, #4]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d184      	bne.n	80062da <_dtoa_r+0xaaa>
 80063d0:	9b00      	ldr	r3, [sp, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	2331      	movs	r3, #49	; 0x31
 80063d8:	7013      	strb	r3, [r2, #0]
 80063da:	e6ce      	b.n	800617a <_dtoa_r+0x94a>
 80063dc:	4b09      	ldr	r3, [pc, #36]	; (8006404 <_dtoa_r+0xbd4>)
 80063de:	f7ff ba95 	b.w	800590c <_dtoa_r+0xdc>
 80063e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f47f aa6e 	bne.w	80058c6 <_dtoa_r+0x96>
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <_dtoa_r+0xbd8>)
 80063ec:	f7ff ba8e 	b.w	800590c <_dtoa_r+0xdc>
 80063f0:	9b02      	ldr	r3, [sp, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dcae      	bgt.n	8006354 <_dtoa_r+0xb24>
 80063f6:	9b06      	ldr	r3, [sp, #24]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	f73f aea8 	bgt.w	800614e <_dtoa_r+0x91e>
 80063fe:	e7a9      	b.n	8006354 <_dtoa_r+0xb24>
 8006400:	08009850 	.word	0x08009850
 8006404:	08009654 	.word	0x08009654
 8006408:	080097d1 	.word	0x080097d1

0800640c <rshift>:
 800640c:	6903      	ldr	r3, [r0, #16]
 800640e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006412:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006416:	ea4f 1261 	mov.w	r2, r1, asr #5
 800641a:	f100 0414 	add.w	r4, r0, #20
 800641e:	dd45      	ble.n	80064ac <rshift+0xa0>
 8006420:	f011 011f 	ands.w	r1, r1, #31
 8006424:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006428:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800642c:	d10c      	bne.n	8006448 <rshift+0x3c>
 800642e:	f100 0710 	add.w	r7, r0, #16
 8006432:	4629      	mov	r1, r5
 8006434:	42b1      	cmp	r1, r6
 8006436:	d334      	bcc.n	80064a2 <rshift+0x96>
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	1eea      	subs	r2, r5, #3
 800643e:	4296      	cmp	r6, r2
 8006440:	bf38      	it	cc
 8006442:	2300      	movcc	r3, #0
 8006444:	4423      	add	r3, r4
 8006446:	e015      	b.n	8006474 <rshift+0x68>
 8006448:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800644c:	f1c1 0820 	rsb	r8, r1, #32
 8006450:	40cf      	lsrs	r7, r1
 8006452:	f105 0e04 	add.w	lr, r5, #4
 8006456:	46a1      	mov	r9, r4
 8006458:	4576      	cmp	r6, lr
 800645a:	46f4      	mov	ip, lr
 800645c:	d815      	bhi.n	800648a <rshift+0x7e>
 800645e:	1a9a      	subs	r2, r3, r2
 8006460:	0092      	lsls	r2, r2, #2
 8006462:	3a04      	subs	r2, #4
 8006464:	3501      	adds	r5, #1
 8006466:	42ae      	cmp	r6, r5
 8006468:	bf38      	it	cc
 800646a:	2200      	movcc	r2, #0
 800646c:	18a3      	adds	r3, r4, r2
 800646e:	50a7      	str	r7, [r4, r2]
 8006470:	b107      	cbz	r7, 8006474 <rshift+0x68>
 8006472:	3304      	adds	r3, #4
 8006474:	1b1a      	subs	r2, r3, r4
 8006476:	42a3      	cmp	r3, r4
 8006478:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800647c:	bf08      	it	eq
 800647e:	2300      	moveq	r3, #0
 8006480:	6102      	str	r2, [r0, #16]
 8006482:	bf08      	it	eq
 8006484:	6143      	streq	r3, [r0, #20]
 8006486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800648a:	f8dc c000 	ldr.w	ip, [ip]
 800648e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006492:	ea4c 0707 	orr.w	r7, ip, r7
 8006496:	f849 7b04 	str.w	r7, [r9], #4
 800649a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800649e:	40cf      	lsrs	r7, r1
 80064a0:	e7da      	b.n	8006458 <rshift+0x4c>
 80064a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80064a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80064aa:	e7c3      	b.n	8006434 <rshift+0x28>
 80064ac:	4623      	mov	r3, r4
 80064ae:	e7e1      	b.n	8006474 <rshift+0x68>

080064b0 <__hexdig_fun>:
 80064b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80064b4:	2b09      	cmp	r3, #9
 80064b6:	d802      	bhi.n	80064be <__hexdig_fun+0xe>
 80064b8:	3820      	subs	r0, #32
 80064ba:	b2c0      	uxtb	r0, r0
 80064bc:	4770      	bx	lr
 80064be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d801      	bhi.n	80064ca <__hexdig_fun+0x1a>
 80064c6:	3847      	subs	r0, #71	; 0x47
 80064c8:	e7f7      	b.n	80064ba <__hexdig_fun+0xa>
 80064ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80064ce:	2b05      	cmp	r3, #5
 80064d0:	d801      	bhi.n	80064d6 <__hexdig_fun+0x26>
 80064d2:	3827      	subs	r0, #39	; 0x27
 80064d4:	e7f1      	b.n	80064ba <__hexdig_fun+0xa>
 80064d6:	2000      	movs	r0, #0
 80064d8:	4770      	bx	lr
	...

080064dc <__gethex>:
 80064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	ed2d 8b02 	vpush	{d8}
 80064e4:	b089      	sub	sp, #36	; 0x24
 80064e6:	ee08 0a10 	vmov	s16, r0
 80064ea:	9304      	str	r3, [sp, #16]
 80064ec:	4bb4      	ldr	r3, [pc, #720]	; (80067c0 <__gethex+0x2e4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	4618      	mov	r0, r3
 80064f4:	468b      	mov	fp, r1
 80064f6:	4690      	mov	r8, r2
 80064f8:	f7f9 fe72 	bl	80001e0 <strlen>
 80064fc:	9b01      	ldr	r3, [sp, #4]
 80064fe:	f8db 2000 	ldr.w	r2, [fp]
 8006502:	4403      	add	r3, r0
 8006504:	4682      	mov	sl, r0
 8006506:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800650a:	9305      	str	r3, [sp, #20]
 800650c:	1c93      	adds	r3, r2, #2
 800650e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006512:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006516:	32fe      	adds	r2, #254	; 0xfe
 8006518:	18d1      	adds	r1, r2, r3
 800651a:	461f      	mov	r7, r3
 800651c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006520:	9100      	str	r1, [sp, #0]
 8006522:	2830      	cmp	r0, #48	; 0x30
 8006524:	d0f8      	beq.n	8006518 <__gethex+0x3c>
 8006526:	f7ff ffc3 	bl	80064b0 <__hexdig_fun>
 800652a:	4604      	mov	r4, r0
 800652c:	2800      	cmp	r0, #0
 800652e:	d13a      	bne.n	80065a6 <__gethex+0xca>
 8006530:	9901      	ldr	r1, [sp, #4]
 8006532:	4652      	mov	r2, sl
 8006534:	4638      	mov	r0, r7
 8006536:	f001 fa33 	bl	80079a0 <strncmp>
 800653a:	4605      	mov	r5, r0
 800653c:	2800      	cmp	r0, #0
 800653e:	d168      	bne.n	8006612 <__gethex+0x136>
 8006540:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006544:	eb07 060a 	add.w	r6, r7, sl
 8006548:	f7ff ffb2 	bl	80064b0 <__hexdig_fun>
 800654c:	2800      	cmp	r0, #0
 800654e:	d062      	beq.n	8006616 <__gethex+0x13a>
 8006550:	4633      	mov	r3, r6
 8006552:	7818      	ldrb	r0, [r3, #0]
 8006554:	2830      	cmp	r0, #48	; 0x30
 8006556:	461f      	mov	r7, r3
 8006558:	f103 0301 	add.w	r3, r3, #1
 800655c:	d0f9      	beq.n	8006552 <__gethex+0x76>
 800655e:	f7ff ffa7 	bl	80064b0 <__hexdig_fun>
 8006562:	2301      	movs	r3, #1
 8006564:	fab0 f480 	clz	r4, r0
 8006568:	0964      	lsrs	r4, r4, #5
 800656a:	4635      	mov	r5, r6
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	463a      	mov	r2, r7
 8006570:	4616      	mov	r6, r2
 8006572:	3201      	adds	r2, #1
 8006574:	7830      	ldrb	r0, [r6, #0]
 8006576:	f7ff ff9b 	bl	80064b0 <__hexdig_fun>
 800657a:	2800      	cmp	r0, #0
 800657c:	d1f8      	bne.n	8006570 <__gethex+0x94>
 800657e:	9901      	ldr	r1, [sp, #4]
 8006580:	4652      	mov	r2, sl
 8006582:	4630      	mov	r0, r6
 8006584:	f001 fa0c 	bl	80079a0 <strncmp>
 8006588:	b980      	cbnz	r0, 80065ac <__gethex+0xd0>
 800658a:	b94d      	cbnz	r5, 80065a0 <__gethex+0xc4>
 800658c:	eb06 050a 	add.w	r5, r6, sl
 8006590:	462a      	mov	r2, r5
 8006592:	4616      	mov	r6, r2
 8006594:	3201      	adds	r2, #1
 8006596:	7830      	ldrb	r0, [r6, #0]
 8006598:	f7ff ff8a 	bl	80064b0 <__hexdig_fun>
 800659c:	2800      	cmp	r0, #0
 800659e:	d1f8      	bne.n	8006592 <__gethex+0xb6>
 80065a0:	1bad      	subs	r5, r5, r6
 80065a2:	00ad      	lsls	r5, r5, #2
 80065a4:	e004      	b.n	80065b0 <__gethex+0xd4>
 80065a6:	2400      	movs	r4, #0
 80065a8:	4625      	mov	r5, r4
 80065aa:	e7e0      	b.n	800656e <__gethex+0x92>
 80065ac:	2d00      	cmp	r5, #0
 80065ae:	d1f7      	bne.n	80065a0 <__gethex+0xc4>
 80065b0:	7833      	ldrb	r3, [r6, #0]
 80065b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065b6:	2b50      	cmp	r3, #80	; 0x50
 80065b8:	d13b      	bne.n	8006632 <__gethex+0x156>
 80065ba:	7873      	ldrb	r3, [r6, #1]
 80065bc:	2b2b      	cmp	r3, #43	; 0x2b
 80065be:	d02c      	beq.n	800661a <__gethex+0x13e>
 80065c0:	2b2d      	cmp	r3, #45	; 0x2d
 80065c2:	d02e      	beq.n	8006622 <__gethex+0x146>
 80065c4:	1c71      	adds	r1, r6, #1
 80065c6:	f04f 0900 	mov.w	r9, #0
 80065ca:	7808      	ldrb	r0, [r1, #0]
 80065cc:	f7ff ff70 	bl	80064b0 <__hexdig_fun>
 80065d0:	1e43      	subs	r3, r0, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b18      	cmp	r3, #24
 80065d6:	d82c      	bhi.n	8006632 <__gethex+0x156>
 80065d8:	f1a0 0210 	sub.w	r2, r0, #16
 80065dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80065e0:	f7ff ff66 	bl	80064b0 <__hexdig_fun>
 80065e4:	1e43      	subs	r3, r0, #1
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b18      	cmp	r3, #24
 80065ea:	d91d      	bls.n	8006628 <__gethex+0x14c>
 80065ec:	f1b9 0f00 	cmp.w	r9, #0
 80065f0:	d000      	beq.n	80065f4 <__gethex+0x118>
 80065f2:	4252      	negs	r2, r2
 80065f4:	4415      	add	r5, r2
 80065f6:	f8cb 1000 	str.w	r1, [fp]
 80065fa:	b1e4      	cbz	r4, 8006636 <__gethex+0x15a>
 80065fc:	9b00      	ldr	r3, [sp, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bf14      	ite	ne
 8006602:	2700      	movne	r7, #0
 8006604:	2706      	moveq	r7, #6
 8006606:	4638      	mov	r0, r7
 8006608:	b009      	add	sp, #36	; 0x24
 800660a:	ecbd 8b02 	vpop	{d8}
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006612:	463e      	mov	r6, r7
 8006614:	4625      	mov	r5, r4
 8006616:	2401      	movs	r4, #1
 8006618:	e7ca      	b.n	80065b0 <__gethex+0xd4>
 800661a:	f04f 0900 	mov.w	r9, #0
 800661e:	1cb1      	adds	r1, r6, #2
 8006620:	e7d3      	b.n	80065ca <__gethex+0xee>
 8006622:	f04f 0901 	mov.w	r9, #1
 8006626:	e7fa      	b.n	800661e <__gethex+0x142>
 8006628:	230a      	movs	r3, #10
 800662a:	fb03 0202 	mla	r2, r3, r2, r0
 800662e:	3a10      	subs	r2, #16
 8006630:	e7d4      	b.n	80065dc <__gethex+0x100>
 8006632:	4631      	mov	r1, r6
 8006634:	e7df      	b.n	80065f6 <__gethex+0x11a>
 8006636:	1bf3      	subs	r3, r6, r7
 8006638:	3b01      	subs	r3, #1
 800663a:	4621      	mov	r1, r4
 800663c:	2b07      	cmp	r3, #7
 800663e:	dc0b      	bgt.n	8006658 <__gethex+0x17c>
 8006640:	ee18 0a10 	vmov	r0, s16
 8006644:	f000 fa7e 	bl	8006b44 <_Balloc>
 8006648:	4604      	mov	r4, r0
 800664a:	b940      	cbnz	r0, 800665e <__gethex+0x182>
 800664c:	4b5d      	ldr	r3, [pc, #372]	; (80067c4 <__gethex+0x2e8>)
 800664e:	4602      	mov	r2, r0
 8006650:	21de      	movs	r1, #222	; 0xde
 8006652:	485d      	ldr	r0, [pc, #372]	; (80067c8 <__gethex+0x2ec>)
 8006654:	f001 f9c6 	bl	80079e4 <__assert_func>
 8006658:	3101      	adds	r1, #1
 800665a:	105b      	asrs	r3, r3, #1
 800665c:	e7ee      	b.n	800663c <__gethex+0x160>
 800665e:	f100 0914 	add.w	r9, r0, #20
 8006662:	f04f 0b00 	mov.w	fp, #0
 8006666:	f1ca 0301 	rsb	r3, sl, #1
 800666a:	f8cd 9008 	str.w	r9, [sp, #8]
 800666e:	f8cd b000 	str.w	fp, [sp]
 8006672:	9306      	str	r3, [sp, #24]
 8006674:	42b7      	cmp	r7, r6
 8006676:	d340      	bcc.n	80066fa <__gethex+0x21e>
 8006678:	9802      	ldr	r0, [sp, #8]
 800667a:	9b00      	ldr	r3, [sp, #0]
 800667c:	f840 3b04 	str.w	r3, [r0], #4
 8006680:	eba0 0009 	sub.w	r0, r0, r9
 8006684:	1080      	asrs	r0, r0, #2
 8006686:	0146      	lsls	r6, r0, #5
 8006688:	6120      	str	r0, [r4, #16]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fb4c 	bl	8006d28 <__hi0bits>
 8006690:	1a30      	subs	r0, r6, r0
 8006692:	f8d8 6000 	ldr.w	r6, [r8]
 8006696:	42b0      	cmp	r0, r6
 8006698:	dd63      	ble.n	8006762 <__gethex+0x286>
 800669a:	1b87      	subs	r7, r0, r6
 800669c:	4639      	mov	r1, r7
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 fef0 	bl	8007484 <__any_on>
 80066a4:	4682      	mov	sl, r0
 80066a6:	b1a8      	cbz	r0, 80066d4 <__gethex+0x1f8>
 80066a8:	1e7b      	subs	r3, r7, #1
 80066aa:	1159      	asrs	r1, r3, #5
 80066ac:	f003 021f 	and.w	r2, r3, #31
 80066b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80066b4:	f04f 0a01 	mov.w	sl, #1
 80066b8:	fa0a f202 	lsl.w	r2, sl, r2
 80066bc:	420a      	tst	r2, r1
 80066be:	d009      	beq.n	80066d4 <__gethex+0x1f8>
 80066c0:	4553      	cmp	r3, sl
 80066c2:	dd05      	ble.n	80066d0 <__gethex+0x1f4>
 80066c4:	1eb9      	subs	r1, r7, #2
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 fedc 	bl	8007484 <__any_on>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d145      	bne.n	800675c <__gethex+0x280>
 80066d0:	f04f 0a02 	mov.w	sl, #2
 80066d4:	4639      	mov	r1, r7
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7ff fe98 	bl	800640c <rshift>
 80066dc:	443d      	add	r5, r7
 80066de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066e2:	42ab      	cmp	r3, r5
 80066e4:	da4c      	bge.n	8006780 <__gethex+0x2a4>
 80066e6:	ee18 0a10 	vmov	r0, s16
 80066ea:	4621      	mov	r1, r4
 80066ec:	f000 fa6a 	bl	8006bc4 <_Bfree>
 80066f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80066f2:	2300      	movs	r3, #0
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	27a3      	movs	r7, #163	; 0xa3
 80066f8:	e785      	b.n	8006606 <__gethex+0x12a>
 80066fa:	1e73      	subs	r3, r6, #1
 80066fc:	9a05      	ldr	r2, [sp, #20]
 80066fe:	9303      	str	r3, [sp, #12]
 8006700:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006704:	4293      	cmp	r3, r2
 8006706:	d019      	beq.n	800673c <__gethex+0x260>
 8006708:	f1bb 0f20 	cmp.w	fp, #32
 800670c:	d107      	bne.n	800671e <__gethex+0x242>
 800670e:	9b02      	ldr	r3, [sp, #8]
 8006710:	9a00      	ldr	r2, [sp, #0]
 8006712:	f843 2b04 	str.w	r2, [r3], #4
 8006716:	9302      	str	r3, [sp, #8]
 8006718:	2300      	movs	r3, #0
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	469b      	mov	fp, r3
 800671e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006722:	f7ff fec5 	bl	80064b0 <__hexdig_fun>
 8006726:	9b00      	ldr	r3, [sp, #0]
 8006728:	f000 000f 	and.w	r0, r0, #15
 800672c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006730:	4303      	orrs	r3, r0
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	f10b 0b04 	add.w	fp, fp, #4
 8006738:	9b03      	ldr	r3, [sp, #12]
 800673a:	e00d      	b.n	8006758 <__gethex+0x27c>
 800673c:	9b03      	ldr	r3, [sp, #12]
 800673e:	9a06      	ldr	r2, [sp, #24]
 8006740:	4413      	add	r3, r2
 8006742:	42bb      	cmp	r3, r7
 8006744:	d3e0      	bcc.n	8006708 <__gethex+0x22c>
 8006746:	4618      	mov	r0, r3
 8006748:	9901      	ldr	r1, [sp, #4]
 800674a:	9307      	str	r3, [sp, #28]
 800674c:	4652      	mov	r2, sl
 800674e:	f001 f927 	bl	80079a0 <strncmp>
 8006752:	9b07      	ldr	r3, [sp, #28]
 8006754:	2800      	cmp	r0, #0
 8006756:	d1d7      	bne.n	8006708 <__gethex+0x22c>
 8006758:	461e      	mov	r6, r3
 800675a:	e78b      	b.n	8006674 <__gethex+0x198>
 800675c:	f04f 0a03 	mov.w	sl, #3
 8006760:	e7b8      	b.n	80066d4 <__gethex+0x1f8>
 8006762:	da0a      	bge.n	800677a <__gethex+0x29e>
 8006764:	1a37      	subs	r7, r6, r0
 8006766:	4621      	mov	r1, r4
 8006768:	ee18 0a10 	vmov	r0, s16
 800676c:	463a      	mov	r2, r7
 800676e:	f000 fc45 	bl	8006ffc <__lshift>
 8006772:	1bed      	subs	r5, r5, r7
 8006774:	4604      	mov	r4, r0
 8006776:	f100 0914 	add.w	r9, r0, #20
 800677a:	f04f 0a00 	mov.w	sl, #0
 800677e:	e7ae      	b.n	80066de <__gethex+0x202>
 8006780:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006784:	42a8      	cmp	r0, r5
 8006786:	dd72      	ble.n	800686e <__gethex+0x392>
 8006788:	1b45      	subs	r5, r0, r5
 800678a:	42ae      	cmp	r6, r5
 800678c:	dc36      	bgt.n	80067fc <__gethex+0x320>
 800678e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d02a      	beq.n	80067ec <__gethex+0x310>
 8006796:	2b03      	cmp	r3, #3
 8006798:	d02c      	beq.n	80067f4 <__gethex+0x318>
 800679a:	2b01      	cmp	r3, #1
 800679c:	d11c      	bne.n	80067d8 <__gethex+0x2fc>
 800679e:	42ae      	cmp	r6, r5
 80067a0:	d11a      	bne.n	80067d8 <__gethex+0x2fc>
 80067a2:	2e01      	cmp	r6, #1
 80067a4:	d112      	bne.n	80067cc <__gethex+0x2f0>
 80067a6:	9a04      	ldr	r2, [sp, #16]
 80067a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	2301      	movs	r3, #1
 80067b0:	6123      	str	r3, [r4, #16]
 80067b2:	f8c9 3000 	str.w	r3, [r9]
 80067b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067b8:	2762      	movs	r7, #98	; 0x62
 80067ba:	601c      	str	r4, [r3, #0]
 80067bc:	e723      	b.n	8006606 <__gethex+0x12a>
 80067be:	bf00      	nop
 80067c0:	080098c8 	.word	0x080098c8
 80067c4:	08009850 	.word	0x08009850
 80067c8:	08009861 	.word	0x08009861
 80067cc:	1e71      	subs	r1, r6, #1
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 fe58 	bl	8007484 <__any_on>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d1e6      	bne.n	80067a6 <__gethex+0x2ca>
 80067d8:	ee18 0a10 	vmov	r0, s16
 80067dc:	4621      	mov	r1, r4
 80067de:	f000 f9f1 	bl	8006bc4 <_Bfree>
 80067e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80067e4:	2300      	movs	r3, #0
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	2750      	movs	r7, #80	; 0x50
 80067ea:	e70c      	b.n	8006606 <__gethex+0x12a>
 80067ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f2      	bne.n	80067d8 <__gethex+0x2fc>
 80067f2:	e7d8      	b.n	80067a6 <__gethex+0x2ca>
 80067f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1d5      	bne.n	80067a6 <__gethex+0x2ca>
 80067fa:	e7ed      	b.n	80067d8 <__gethex+0x2fc>
 80067fc:	1e6f      	subs	r7, r5, #1
 80067fe:	f1ba 0f00 	cmp.w	sl, #0
 8006802:	d131      	bne.n	8006868 <__gethex+0x38c>
 8006804:	b127      	cbz	r7, 8006810 <__gethex+0x334>
 8006806:	4639      	mov	r1, r7
 8006808:	4620      	mov	r0, r4
 800680a:	f000 fe3b 	bl	8007484 <__any_on>
 800680e:	4682      	mov	sl, r0
 8006810:	117b      	asrs	r3, r7, #5
 8006812:	2101      	movs	r1, #1
 8006814:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006818:	f007 071f 	and.w	r7, r7, #31
 800681c:	fa01 f707 	lsl.w	r7, r1, r7
 8006820:	421f      	tst	r7, r3
 8006822:	4629      	mov	r1, r5
 8006824:	4620      	mov	r0, r4
 8006826:	bf18      	it	ne
 8006828:	f04a 0a02 	orrne.w	sl, sl, #2
 800682c:	1b76      	subs	r6, r6, r5
 800682e:	f7ff fded 	bl	800640c <rshift>
 8006832:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006836:	2702      	movs	r7, #2
 8006838:	f1ba 0f00 	cmp.w	sl, #0
 800683c:	d048      	beq.n	80068d0 <__gethex+0x3f4>
 800683e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d015      	beq.n	8006872 <__gethex+0x396>
 8006846:	2b03      	cmp	r3, #3
 8006848:	d017      	beq.n	800687a <__gethex+0x39e>
 800684a:	2b01      	cmp	r3, #1
 800684c:	d109      	bne.n	8006862 <__gethex+0x386>
 800684e:	f01a 0f02 	tst.w	sl, #2
 8006852:	d006      	beq.n	8006862 <__gethex+0x386>
 8006854:	f8d9 0000 	ldr.w	r0, [r9]
 8006858:	ea4a 0a00 	orr.w	sl, sl, r0
 800685c:	f01a 0f01 	tst.w	sl, #1
 8006860:	d10e      	bne.n	8006880 <__gethex+0x3a4>
 8006862:	f047 0710 	orr.w	r7, r7, #16
 8006866:	e033      	b.n	80068d0 <__gethex+0x3f4>
 8006868:	f04f 0a01 	mov.w	sl, #1
 800686c:	e7d0      	b.n	8006810 <__gethex+0x334>
 800686e:	2701      	movs	r7, #1
 8006870:	e7e2      	b.n	8006838 <__gethex+0x35c>
 8006872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006874:	f1c3 0301 	rsb	r3, r3, #1
 8006878:	9315      	str	r3, [sp, #84]	; 0x54
 800687a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0f0      	beq.n	8006862 <__gethex+0x386>
 8006880:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006884:	f104 0314 	add.w	r3, r4, #20
 8006888:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800688c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006890:	f04f 0c00 	mov.w	ip, #0
 8006894:	4618      	mov	r0, r3
 8006896:	f853 2b04 	ldr.w	r2, [r3], #4
 800689a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800689e:	d01c      	beq.n	80068da <__gethex+0x3fe>
 80068a0:	3201      	adds	r2, #1
 80068a2:	6002      	str	r2, [r0, #0]
 80068a4:	2f02      	cmp	r7, #2
 80068a6:	f104 0314 	add.w	r3, r4, #20
 80068aa:	d13f      	bne.n	800692c <__gethex+0x450>
 80068ac:	f8d8 2000 	ldr.w	r2, [r8]
 80068b0:	3a01      	subs	r2, #1
 80068b2:	42b2      	cmp	r2, r6
 80068b4:	d10a      	bne.n	80068cc <__gethex+0x3f0>
 80068b6:	1171      	asrs	r1, r6, #5
 80068b8:	2201      	movs	r2, #1
 80068ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068be:	f006 061f 	and.w	r6, r6, #31
 80068c2:	fa02 f606 	lsl.w	r6, r2, r6
 80068c6:	421e      	tst	r6, r3
 80068c8:	bf18      	it	ne
 80068ca:	4617      	movne	r7, r2
 80068cc:	f047 0720 	orr.w	r7, r7, #32
 80068d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068d2:	601c      	str	r4, [r3, #0]
 80068d4:	9b04      	ldr	r3, [sp, #16]
 80068d6:	601d      	str	r5, [r3, #0]
 80068d8:	e695      	b.n	8006606 <__gethex+0x12a>
 80068da:	4299      	cmp	r1, r3
 80068dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80068e0:	d8d8      	bhi.n	8006894 <__gethex+0x3b8>
 80068e2:	68a3      	ldr	r3, [r4, #8]
 80068e4:	459b      	cmp	fp, r3
 80068e6:	db19      	blt.n	800691c <__gethex+0x440>
 80068e8:	6861      	ldr	r1, [r4, #4]
 80068ea:	ee18 0a10 	vmov	r0, s16
 80068ee:	3101      	adds	r1, #1
 80068f0:	f000 f928 	bl	8006b44 <_Balloc>
 80068f4:	4681      	mov	r9, r0
 80068f6:	b918      	cbnz	r0, 8006900 <__gethex+0x424>
 80068f8:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <__gethex+0x488>)
 80068fa:	4602      	mov	r2, r0
 80068fc:	2184      	movs	r1, #132	; 0x84
 80068fe:	e6a8      	b.n	8006652 <__gethex+0x176>
 8006900:	6922      	ldr	r2, [r4, #16]
 8006902:	3202      	adds	r2, #2
 8006904:	f104 010c 	add.w	r1, r4, #12
 8006908:	0092      	lsls	r2, r2, #2
 800690a:	300c      	adds	r0, #12
 800690c:	f000 f90c 	bl	8006b28 <memcpy>
 8006910:	4621      	mov	r1, r4
 8006912:	ee18 0a10 	vmov	r0, s16
 8006916:	f000 f955 	bl	8006bc4 <_Bfree>
 800691a:	464c      	mov	r4, r9
 800691c:	6923      	ldr	r3, [r4, #16]
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006924:	6122      	str	r2, [r4, #16]
 8006926:	2201      	movs	r2, #1
 8006928:	615a      	str	r2, [r3, #20]
 800692a:	e7bb      	b.n	80068a4 <__gethex+0x3c8>
 800692c:	6922      	ldr	r2, [r4, #16]
 800692e:	455a      	cmp	r2, fp
 8006930:	dd0b      	ble.n	800694a <__gethex+0x46e>
 8006932:	2101      	movs	r1, #1
 8006934:	4620      	mov	r0, r4
 8006936:	f7ff fd69 	bl	800640c <rshift>
 800693a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800693e:	3501      	adds	r5, #1
 8006940:	42ab      	cmp	r3, r5
 8006942:	f6ff aed0 	blt.w	80066e6 <__gethex+0x20a>
 8006946:	2701      	movs	r7, #1
 8006948:	e7c0      	b.n	80068cc <__gethex+0x3f0>
 800694a:	f016 061f 	ands.w	r6, r6, #31
 800694e:	d0fa      	beq.n	8006946 <__gethex+0x46a>
 8006950:	4453      	add	r3, sl
 8006952:	f1c6 0620 	rsb	r6, r6, #32
 8006956:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800695a:	f000 f9e5 	bl	8006d28 <__hi0bits>
 800695e:	42b0      	cmp	r0, r6
 8006960:	dbe7      	blt.n	8006932 <__gethex+0x456>
 8006962:	e7f0      	b.n	8006946 <__gethex+0x46a>
 8006964:	08009850 	.word	0x08009850

08006968 <L_shift>:
 8006968:	f1c2 0208 	rsb	r2, r2, #8
 800696c:	0092      	lsls	r2, r2, #2
 800696e:	b570      	push	{r4, r5, r6, lr}
 8006970:	f1c2 0620 	rsb	r6, r2, #32
 8006974:	6843      	ldr	r3, [r0, #4]
 8006976:	6804      	ldr	r4, [r0, #0]
 8006978:	fa03 f506 	lsl.w	r5, r3, r6
 800697c:	432c      	orrs	r4, r5
 800697e:	40d3      	lsrs	r3, r2
 8006980:	6004      	str	r4, [r0, #0]
 8006982:	f840 3f04 	str.w	r3, [r0, #4]!
 8006986:	4288      	cmp	r0, r1
 8006988:	d3f4      	bcc.n	8006974 <L_shift+0xc>
 800698a:	bd70      	pop	{r4, r5, r6, pc}

0800698c <__match>:
 800698c:	b530      	push	{r4, r5, lr}
 800698e:	6803      	ldr	r3, [r0, #0]
 8006990:	3301      	adds	r3, #1
 8006992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006996:	b914      	cbnz	r4, 800699e <__match+0x12>
 8006998:	6003      	str	r3, [r0, #0]
 800699a:	2001      	movs	r0, #1
 800699c:	bd30      	pop	{r4, r5, pc}
 800699e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80069a6:	2d19      	cmp	r5, #25
 80069a8:	bf98      	it	ls
 80069aa:	3220      	addls	r2, #32
 80069ac:	42a2      	cmp	r2, r4
 80069ae:	d0f0      	beq.n	8006992 <__match+0x6>
 80069b0:	2000      	movs	r0, #0
 80069b2:	e7f3      	b.n	800699c <__match+0x10>

080069b4 <__hexnan>:
 80069b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b8:	680b      	ldr	r3, [r1, #0]
 80069ba:	115e      	asrs	r6, r3, #5
 80069bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80069c0:	f013 031f 	ands.w	r3, r3, #31
 80069c4:	b087      	sub	sp, #28
 80069c6:	bf18      	it	ne
 80069c8:	3604      	addne	r6, #4
 80069ca:	2500      	movs	r5, #0
 80069cc:	1f37      	subs	r7, r6, #4
 80069ce:	4690      	mov	r8, r2
 80069d0:	6802      	ldr	r2, [r0, #0]
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	4682      	mov	sl, r0
 80069d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80069da:	46b9      	mov	r9, r7
 80069dc:	463c      	mov	r4, r7
 80069de:	9502      	str	r5, [sp, #8]
 80069e0:	46ab      	mov	fp, r5
 80069e2:	7851      	ldrb	r1, [r2, #1]
 80069e4:	1c53      	adds	r3, r2, #1
 80069e6:	9303      	str	r3, [sp, #12]
 80069e8:	b341      	cbz	r1, 8006a3c <__hexnan+0x88>
 80069ea:	4608      	mov	r0, r1
 80069ec:	9205      	str	r2, [sp, #20]
 80069ee:	9104      	str	r1, [sp, #16]
 80069f0:	f7ff fd5e 	bl	80064b0 <__hexdig_fun>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d14f      	bne.n	8006a98 <__hexnan+0xe4>
 80069f8:	9904      	ldr	r1, [sp, #16]
 80069fa:	9a05      	ldr	r2, [sp, #20]
 80069fc:	2920      	cmp	r1, #32
 80069fe:	d818      	bhi.n	8006a32 <__hexnan+0x7e>
 8006a00:	9b02      	ldr	r3, [sp, #8]
 8006a02:	459b      	cmp	fp, r3
 8006a04:	dd13      	ble.n	8006a2e <__hexnan+0x7a>
 8006a06:	454c      	cmp	r4, r9
 8006a08:	d206      	bcs.n	8006a18 <__hexnan+0x64>
 8006a0a:	2d07      	cmp	r5, #7
 8006a0c:	dc04      	bgt.n	8006a18 <__hexnan+0x64>
 8006a0e:	462a      	mov	r2, r5
 8006a10:	4649      	mov	r1, r9
 8006a12:	4620      	mov	r0, r4
 8006a14:	f7ff ffa8 	bl	8006968 <L_shift>
 8006a18:	4544      	cmp	r4, r8
 8006a1a:	d950      	bls.n	8006abe <__hexnan+0x10a>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f1a4 0904 	sub.w	r9, r4, #4
 8006a22:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a26:	f8cd b008 	str.w	fp, [sp, #8]
 8006a2a:	464c      	mov	r4, r9
 8006a2c:	461d      	mov	r5, r3
 8006a2e:	9a03      	ldr	r2, [sp, #12]
 8006a30:	e7d7      	b.n	80069e2 <__hexnan+0x2e>
 8006a32:	2929      	cmp	r1, #41	; 0x29
 8006a34:	d156      	bne.n	8006ae4 <__hexnan+0x130>
 8006a36:	3202      	adds	r2, #2
 8006a38:	f8ca 2000 	str.w	r2, [sl]
 8006a3c:	f1bb 0f00 	cmp.w	fp, #0
 8006a40:	d050      	beq.n	8006ae4 <__hexnan+0x130>
 8006a42:	454c      	cmp	r4, r9
 8006a44:	d206      	bcs.n	8006a54 <__hexnan+0xa0>
 8006a46:	2d07      	cmp	r5, #7
 8006a48:	dc04      	bgt.n	8006a54 <__hexnan+0xa0>
 8006a4a:	462a      	mov	r2, r5
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f7ff ff8a 	bl	8006968 <L_shift>
 8006a54:	4544      	cmp	r4, r8
 8006a56:	d934      	bls.n	8006ac2 <__hexnan+0x10e>
 8006a58:	f1a8 0204 	sub.w	r2, r8, #4
 8006a5c:	4623      	mov	r3, r4
 8006a5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006a62:	f842 1f04 	str.w	r1, [r2, #4]!
 8006a66:	429f      	cmp	r7, r3
 8006a68:	d2f9      	bcs.n	8006a5e <__hexnan+0xaa>
 8006a6a:	1b3b      	subs	r3, r7, r4
 8006a6c:	f023 0303 	bic.w	r3, r3, #3
 8006a70:	3304      	adds	r3, #4
 8006a72:	3401      	adds	r4, #1
 8006a74:	3e03      	subs	r6, #3
 8006a76:	42b4      	cmp	r4, r6
 8006a78:	bf88      	it	hi
 8006a7a:	2304      	movhi	r3, #4
 8006a7c:	4443      	add	r3, r8
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f843 2b04 	str.w	r2, [r3], #4
 8006a84:	429f      	cmp	r7, r3
 8006a86:	d2fb      	bcs.n	8006a80 <__hexnan+0xcc>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	b91b      	cbnz	r3, 8006a94 <__hexnan+0xe0>
 8006a8c:	4547      	cmp	r7, r8
 8006a8e:	d127      	bne.n	8006ae0 <__hexnan+0x12c>
 8006a90:	2301      	movs	r3, #1
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	2005      	movs	r0, #5
 8006a96:	e026      	b.n	8006ae6 <__hexnan+0x132>
 8006a98:	3501      	adds	r5, #1
 8006a9a:	2d08      	cmp	r5, #8
 8006a9c:	f10b 0b01 	add.w	fp, fp, #1
 8006aa0:	dd06      	ble.n	8006ab0 <__hexnan+0xfc>
 8006aa2:	4544      	cmp	r4, r8
 8006aa4:	d9c3      	bls.n	8006a2e <__hexnan+0x7a>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006aac:	2501      	movs	r5, #1
 8006aae:	3c04      	subs	r4, #4
 8006ab0:	6822      	ldr	r2, [r4, #0]
 8006ab2:	f000 000f 	and.w	r0, r0, #15
 8006ab6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006aba:	6022      	str	r2, [r4, #0]
 8006abc:	e7b7      	b.n	8006a2e <__hexnan+0x7a>
 8006abe:	2508      	movs	r5, #8
 8006ac0:	e7b5      	b.n	8006a2e <__hexnan+0x7a>
 8006ac2:	9b01      	ldr	r3, [sp, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0df      	beq.n	8006a88 <__hexnan+0xd4>
 8006ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8006acc:	f1c3 0320 	rsb	r3, r3, #32
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ad8:	401a      	ands	r2, r3
 8006ada:	f846 2c04 	str.w	r2, [r6, #-4]
 8006ade:	e7d3      	b.n	8006a88 <__hexnan+0xd4>
 8006ae0:	3f04      	subs	r7, #4
 8006ae2:	e7d1      	b.n	8006a88 <__hexnan+0xd4>
 8006ae4:	2004      	movs	r0, #4
 8006ae6:	b007      	add	sp, #28
 8006ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006aec <_localeconv_r>:
 8006aec:	4800      	ldr	r0, [pc, #0]	; (8006af0 <_localeconv_r+0x4>)
 8006aee:	4770      	bx	lr
 8006af0:	20000168 	.word	0x20000168

08006af4 <malloc>:
 8006af4:	4b02      	ldr	r3, [pc, #8]	; (8006b00 <malloc+0xc>)
 8006af6:	4601      	mov	r1, r0
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	f000 bd67 	b.w	80075cc <_malloc_r>
 8006afe:	bf00      	nop
 8006b00:	20000010 	.word	0x20000010

08006b04 <__ascii_mbtowc>:
 8006b04:	b082      	sub	sp, #8
 8006b06:	b901      	cbnz	r1, 8006b0a <__ascii_mbtowc+0x6>
 8006b08:	a901      	add	r1, sp, #4
 8006b0a:	b142      	cbz	r2, 8006b1e <__ascii_mbtowc+0x1a>
 8006b0c:	b14b      	cbz	r3, 8006b22 <__ascii_mbtowc+0x1e>
 8006b0e:	7813      	ldrb	r3, [r2, #0]
 8006b10:	600b      	str	r3, [r1, #0]
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	1e10      	subs	r0, r2, #0
 8006b16:	bf18      	it	ne
 8006b18:	2001      	movne	r0, #1
 8006b1a:	b002      	add	sp, #8
 8006b1c:	4770      	bx	lr
 8006b1e:	4610      	mov	r0, r2
 8006b20:	e7fb      	b.n	8006b1a <__ascii_mbtowc+0x16>
 8006b22:	f06f 0001 	mvn.w	r0, #1
 8006b26:	e7f8      	b.n	8006b1a <__ascii_mbtowc+0x16>

08006b28 <memcpy>:
 8006b28:	440a      	add	r2, r1
 8006b2a:	4291      	cmp	r1, r2
 8006b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b30:	d100      	bne.n	8006b34 <memcpy+0xc>
 8006b32:	4770      	bx	lr
 8006b34:	b510      	push	{r4, lr}
 8006b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b3e:	4291      	cmp	r1, r2
 8006b40:	d1f9      	bne.n	8006b36 <memcpy+0xe>
 8006b42:	bd10      	pop	{r4, pc}

08006b44 <_Balloc>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b48:	4604      	mov	r4, r0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	b976      	cbnz	r6, 8006b6c <_Balloc+0x28>
 8006b4e:	2010      	movs	r0, #16
 8006b50:	f7ff ffd0 	bl	8006af4 <malloc>
 8006b54:	4602      	mov	r2, r0
 8006b56:	6260      	str	r0, [r4, #36]	; 0x24
 8006b58:	b920      	cbnz	r0, 8006b64 <_Balloc+0x20>
 8006b5a:	4b18      	ldr	r3, [pc, #96]	; (8006bbc <_Balloc+0x78>)
 8006b5c:	4818      	ldr	r0, [pc, #96]	; (8006bc0 <_Balloc+0x7c>)
 8006b5e:	2166      	movs	r1, #102	; 0x66
 8006b60:	f000 ff40 	bl	80079e4 <__assert_func>
 8006b64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b68:	6006      	str	r6, [r0, #0]
 8006b6a:	60c6      	str	r6, [r0, #12]
 8006b6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b6e:	68f3      	ldr	r3, [r6, #12]
 8006b70:	b183      	cbz	r3, 8006b94 <_Balloc+0x50>
 8006b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b7a:	b9b8      	cbnz	r0, 8006bac <_Balloc+0x68>
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b82:	1d72      	adds	r2, r6, #5
 8006b84:	0092      	lsls	r2, r2, #2
 8006b86:	4620      	mov	r0, r4
 8006b88:	f000 fc9d 	bl	80074c6 <_calloc_r>
 8006b8c:	b160      	cbz	r0, 8006ba8 <_Balloc+0x64>
 8006b8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b92:	e00e      	b.n	8006bb2 <_Balloc+0x6e>
 8006b94:	2221      	movs	r2, #33	; 0x21
 8006b96:	2104      	movs	r1, #4
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fc94 	bl	80074c6 <_calloc_r>
 8006b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ba0:	60f0      	str	r0, [r6, #12]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e4      	bne.n	8006b72 <_Balloc+0x2e>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	bd70      	pop	{r4, r5, r6, pc}
 8006bac:	6802      	ldr	r2, [r0, #0]
 8006bae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bb8:	e7f7      	b.n	8006baa <_Balloc+0x66>
 8006bba:	bf00      	nop
 8006bbc:	080097de 	.word	0x080097de
 8006bc0:	080098dc 	.word	0x080098dc

08006bc4 <_Bfree>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bc8:	4605      	mov	r5, r0
 8006bca:	460c      	mov	r4, r1
 8006bcc:	b976      	cbnz	r6, 8006bec <_Bfree+0x28>
 8006bce:	2010      	movs	r0, #16
 8006bd0:	f7ff ff90 	bl	8006af4 <malloc>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	6268      	str	r0, [r5, #36]	; 0x24
 8006bd8:	b920      	cbnz	r0, 8006be4 <_Bfree+0x20>
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <_Bfree+0x3c>)
 8006bdc:	4809      	ldr	r0, [pc, #36]	; (8006c04 <_Bfree+0x40>)
 8006bde:	218a      	movs	r1, #138	; 0x8a
 8006be0:	f000 ff00 	bl	80079e4 <__assert_func>
 8006be4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006be8:	6006      	str	r6, [r0, #0]
 8006bea:	60c6      	str	r6, [r0, #12]
 8006bec:	b13c      	cbz	r4, 8006bfe <_Bfree+0x3a>
 8006bee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006bf0:	6862      	ldr	r2, [r4, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bf8:	6021      	str	r1, [r4, #0]
 8006bfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bfe:	bd70      	pop	{r4, r5, r6, pc}
 8006c00:	080097de 	.word	0x080097de
 8006c04:	080098dc 	.word	0x080098dc

08006c08 <__multadd>:
 8006c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0c:	690d      	ldr	r5, [r1, #16]
 8006c0e:	4607      	mov	r7, r0
 8006c10:	460c      	mov	r4, r1
 8006c12:	461e      	mov	r6, r3
 8006c14:	f101 0c14 	add.w	ip, r1, #20
 8006c18:	2000      	movs	r0, #0
 8006c1a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c1e:	b299      	uxth	r1, r3
 8006c20:	fb02 6101 	mla	r1, r2, r1, r6
 8006c24:	0c1e      	lsrs	r6, r3, #16
 8006c26:	0c0b      	lsrs	r3, r1, #16
 8006c28:	fb02 3306 	mla	r3, r2, r6, r3
 8006c2c:	b289      	uxth	r1, r1
 8006c2e:	3001      	adds	r0, #1
 8006c30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c34:	4285      	cmp	r5, r0
 8006c36:	f84c 1b04 	str.w	r1, [ip], #4
 8006c3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c3e:	dcec      	bgt.n	8006c1a <__multadd+0x12>
 8006c40:	b30e      	cbz	r6, 8006c86 <__multadd+0x7e>
 8006c42:	68a3      	ldr	r3, [r4, #8]
 8006c44:	42ab      	cmp	r3, r5
 8006c46:	dc19      	bgt.n	8006c7c <__multadd+0x74>
 8006c48:	6861      	ldr	r1, [r4, #4]
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	3101      	adds	r1, #1
 8006c4e:	f7ff ff79 	bl	8006b44 <_Balloc>
 8006c52:	4680      	mov	r8, r0
 8006c54:	b928      	cbnz	r0, 8006c62 <__multadd+0x5a>
 8006c56:	4602      	mov	r2, r0
 8006c58:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <__multadd+0x84>)
 8006c5a:	480d      	ldr	r0, [pc, #52]	; (8006c90 <__multadd+0x88>)
 8006c5c:	21b5      	movs	r1, #181	; 0xb5
 8006c5e:	f000 fec1 	bl	80079e4 <__assert_func>
 8006c62:	6922      	ldr	r2, [r4, #16]
 8006c64:	3202      	adds	r2, #2
 8006c66:	f104 010c 	add.w	r1, r4, #12
 8006c6a:	0092      	lsls	r2, r2, #2
 8006c6c:	300c      	adds	r0, #12
 8006c6e:	f7ff ff5b 	bl	8006b28 <memcpy>
 8006c72:	4621      	mov	r1, r4
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7ff ffa5 	bl	8006bc4 <_Bfree>
 8006c7a:	4644      	mov	r4, r8
 8006c7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c80:	3501      	adds	r5, #1
 8006c82:	615e      	str	r6, [r3, #20]
 8006c84:	6125      	str	r5, [r4, #16]
 8006c86:	4620      	mov	r0, r4
 8006c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c8c:	08009850 	.word	0x08009850
 8006c90:	080098dc 	.word	0x080098dc

08006c94 <__s2b>:
 8006c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c98:	460c      	mov	r4, r1
 8006c9a:	4615      	mov	r5, r2
 8006c9c:	461f      	mov	r7, r3
 8006c9e:	2209      	movs	r2, #9
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ca8:	2100      	movs	r1, #0
 8006caa:	2201      	movs	r2, #1
 8006cac:	429a      	cmp	r2, r3
 8006cae:	db09      	blt.n	8006cc4 <__s2b+0x30>
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7ff ff47 	bl	8006b44 <_Balloc>
 8006cb6:	b940      	cbnz	r0, 8006cca <__s2b+0x36>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <__s2b+0x8c>)
 8006cbc:	4819      	ldr	r0, [pc, #100]	; (8006d24 <__s2b+0x90>)
 8006cbe:	21ce      	movs	r1, #206	; 0xce
 8006cc0:	f000 fe90 	bl	80079e4 <__assert_func>
 8006cc4:	0052      	lsls	r2, r2, #1
 8006cc6:	3101      	adds	r1, #1
 8006cc8:	e7f0      	b.n	8006cac <__s2b+0x18>
 8006cca:	9b08      	ldr	r3, [sp, #32]
 8006ccc:	6143      	str	r3, [r0, #20]
 8006cce:	2d09      	cmp	r5, #9
 8006cd0:	f04f 0301 	mov.w	r3, #1
 8006cd4:	6103      	str	r3, [r0, #16]
 8006cd6:	dd16      	ble.n	8006d06 <__s2b+0x72>
 8006cd8:	f104 0909 	add.w	r9, r4, #9
 8006cdc:	46c8      	mov	r8, r9
 8006cde:	442c      	add	r4, r5
 8006ce0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006ce4:	4601      	mov	r1, r0
 8006ce6:	3b30      	subs	r3, #48	; 0x30
 8006ce8:	220a      	movs	r2, #10
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7ff ff8c 	bl	8006c08 <__multadd>
 8006cf0:	45a0      	cmp	r8, r4
 8006cf2:	d1f5      	bne.n	8006ce0 <__s2b+0x4c>
 8006cf4:	f1a5 0408 	sub.w	r4, r5, #8
 8006cf8:	444c      	add	r4, r9
 8006cfa:	1b2d      	subs	r5, r5, r4
 8006cfc:	1963      	adds	r3, r4, r5
 8006cfe:	42bb      	cmp	r3, r7
 8006d00:	db04      	blt.n	8006d0c <__s2b+0x78>
 8006d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d06:	340a      	adds	r4, #10
 8006d08:	2509      	movs	r5, #9
 8006d0a:	e7f6      	b.n	8006cfa <__s2b+0x66>
 8006d0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d10:	4601      	mov	r1, r0
 8006d12:	3b30      	subs	r3, #48	; 0x30
 8006d14:	220a      	movs	r2, #10
 8006d16:	4630      	mov	r0, r6
 8006d18:	f7ff ff76 	bl	8006c08 <__multadd>
 8006d1c:	e7ee      	b.n	8006cfc <__s2b+0x68>
 8006d1e:	bf00      	nop
 8006d20:	08009850 	.word	0x08009850
 8006d24:	080098dc 	.word	0x080098dc

08006d28 <__hi0bits>:
 8006d28:	0c03      	lsrs	r3, r0, #16
 8006d2a:	041b      	lsls	r3, r3, #16
 8006d2c:	b9d3      	cbnz	r3, 8006d64 <__hi0bits+0x3c>
 8006d2e:	0400      	lsls	r0, r0, #16
 8006d30:	2310      	movs	r3, #16
 8006d32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d36:	bf04      	itt	eq
 8006d38:	0200      	lsleq	r0, r0, #8
 8006d3a:	3308      	addeq	r3, #8
 8006d3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d40:	bf04      	itt	eq
 8006d42:	0100      	lsleq	r0, r0, #4
 8006d44:	3304      	addeq	r3, #4
 8006d46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d4a:	bf04      	itt	eq
 8006d4c:	0080      	lsleq	r0, r0, #2
 8006d4e:	3302      	addeq	r3, #2
 8006d50:	2800      	cmp	r0, #0
 8006d52:	db05      	blt.n	8006d60 <__hi0bits+0x38>
 8006d54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d58:	f103 0301 	add.w	r3, r3, #1
 8006d5c:	bf08      	it	eq
 8006d5e:	2320      	moveq	r3, #32
 8006d60:	4618      	mov	r0, r3
 8006d62:	4770      	bx	lr
 8006d64:	2300      	movs	r3, #0
 8006d66:	e7e4      	b.n	8006d32 <__hi0bits+0xa>

08006d68 <__lo0bits>:
 8006d68:	6803      	ldr	r3, [r0, #0]
 8006d6a:	f013 0207 	ands.w	r2, r3, #7
 8006d6e:	4601      	mov	r1, r0
 8006d70:	d00b      	beq.n	8006d8a <__lo0bits+0x22>
 8006d72:	07da      	lsls	r2, r3, #31
 8006d74:	d423      	bmi.n	8006dbe <__lo0bits+0x56>
 8006d76:	0798      	lsls	r0, r3, #30
 8006d78:	bf49      	itett	mi
 8006d7a:	085b      	lsrmi	r3, r3, #1
 8006d7c:	089b      	lsrpl	r3, r3, #2
 8006d7e:	2001      	movmi	r0, #1
 8006d80:	600b      	strmi	r3, [r1, #0]
 8006d82:	bf5c      	itt	pl
 8006d84:	600b      	strpl	r3, [r1, #0]
 8006d86:	2002      	movpl	r0, #2
 8006d88:	4770      	bx	lr
 8006d8a:	b298      	uxth	r0, r3
 8006d8c:	b9a8      	cbnz	r0, 8006dba <__lo0bits+0x52>
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	2010      	movs	r0, #16
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	b90a      	cbnz	r2, 8006d9a <__lo0bits+0x32>
 8006d96:	3008      	adds	r0, #8
 8006d98:	0a1b      	lsrs	r3, r3, #8
 8006d9a:	071a      	lsls	r2, r3, #28
 8006d9c:	bf04      	itt	eq
 8006d9e:	091b      	lsreq	r3, r3, #4
 8006da0:	3004      	addeq	r0, #4
 8006da2:	079a      	lsls	r2, r3, #30
 8006da4:	bf04      	itt	eq
 8006da6:	089b      	lsreq	r3, r3, #2
 8006da8:	3002      	addeq	r0, #2
 8006daa:	07da      	lsls	r2, r3, #31
 8006dac:	d403      	bmi.n	8006db6 <__lo0bits+0x4e>
 8006dae:	085b      	lsrs	r3, r3, #1
 8006db0:	f100 0001 	add.w	r0, r0, #1
 8006db4:	d005      	beq.n	8006dc2 <__lo0bits+0x5a>
 8006db6:	600b      	str	r3, [r1, #0]
 8006db8:	4770      	bx	lr
 8006dba:	4610      	mov	r0, r2
 8006dbc:	e7e9      	b.n	8006d92 <__lo0bits+0x2a>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	4770      	bx	lr
 8006dc2:	2020      	movs	r0, #32
 8006dc4:	4770      	bx	lr
	...

08006dc8 <__i2b>:
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	460c      	mov	r4, r1
 8006dcc:	2101      	movs	r1, #1
 8006dce:	f7ff feb9 	bl	8006b44 <_Balloc>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	b928      	cbnz	r0, 8006de2 <__i2b+0x1a>
 8006dd6:	4b05      	ldr	r3, [pc, #20]	; (8006dec <__i2b+0x24>)
 8006dd8:	4805      	ldr	r0, [pc, #20]	; (8006df0 <__i2b+0x28>)
 8006dda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006dde:	f000 fe01 	bl	80079e4 <__assert_func>
 8006de2:	2301      	movs	r3, #1
 8006de4:	6144      	str	r4, [r0, #20]
 8006de6:	6103      	str	r3, [r0, #16]
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	bf00      	nop
 8006dec:	08009850 	.word	0x08009850
 8006df0:	080098dc 	.word	0x080098dc

08006df4 <__multiply>:
 8006df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df8:	4691      	mov	r9, r2
 8006dfa:	690a      	ldr	r2, [r1, #16]
 8006dfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	bfb8      	it	lt
 8006e04:	460b      	movlt	r3, r1
 8006e06:	460c      	mov	r4, r1
 8006e08:	bfbc      	itt	lt
 8006e0a:	464c      	movlt	r4, r9
 8006e0c:	4699      	movlt	r9, r3
 8006e0e:	6927      	ldr	r7, [r4, #16]
 8006e10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e14:	68a3      	ldr	r3, [r4, #8]
 8006e16:	6861      	ldr	r1, [r4, #4]
 8006e18:	eb07 060a 	add.w	r6, r7, sl
 8006e1c:	42b3      	cmp	r3, r6
 8006e1e:	b085      	sub	sp, #20
 8006e20:	bfb8      	it	lt
 8006e22:	3101      	addlt	r1, #1
 8006e24:	f7ff fe8e 	bl	8006b44 <_Balloc>
 8006e28:	b930      	cbnz	r0, 8006e38 <__multiply+0x44>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	4b44      	ldr	r3, [pc, #272]	; (8006f40 <__multiply+0x14c>)
 8006e2e:	4845      	ldr	r0, [pc, #276]	; (8006f44 <__multiply+0x150>)
 8006e30:	f240 115d 	movw	r1, #349	; 0x15d
 8006e34:	f000 fdd6 	bl	80079e4 <__assert_func>
 8006e38:	f100 0514 	add.w	r5, r0, #20
 8006e3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e40:	462b      	mov	r3, r5
 8006e42:	2200      	movs	r2, #0
 8006e44:	4543      	cmp	r3, r8
 8006e46:	d321      	bcc.n	8006e8c <__multiply+0x98>
 8006e48:	f104 0314 	add.w	r3, r4, #20
 8006e4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e50:	f109 0314 	add.w	r3, r9, #20
 8006e54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e58:	9202      	str	r2, [sp, #8]
 8006e5a:	1b3a      	subs	r2, r7, r4
 8006e5c:	3a15      	subs	r2, #21
 8006e5e:	f022 0203 	bic.w	r2, r2, #3
 8006e62:	3204      	adds	r2, #4
 8006e64:	f104 0115 	add.w	r1, r4, #21
 8006e68:	428f      	cmp	r7, r1
 8006e6a:	bf38      	it	cc
 8006e6c:	2204      	movcc	r2, #4
 8006e6e:	9201      	str	r2, [sp, #4]
 8006e70:	9a02      	ldr	r2, [sp, #8]
 8006e72:	9303      	str	r3, [sp, #12]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d80c      	bhi.n	8006e92 <__multiply+0x9e>
 8006e78:	2e00      	cmp	r6, #0
 8006e7a:	dd03      	ble.n	8006e84 <__multiply+0x90>
 8006e7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d05a      	beq.n	8006f3a <__multiply+0x146>
 8006e84:	6106      	str	r6, [r0, #16]
 8006e86:	b005      	add	sp, #20
 8006e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8c:	f843 2b04 	str.w	r2, [r3], #4
 8006e90:	e7d8      	b.n	8006e44 <__multiply+0x50>
 8006e92:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e96:	f1ba 0f00 	cmp.w	sl, #0
 8006e9a:	d024      	beq.n	8006ee6 <__multiply+0xf2>
 8006e9c:	f104 0e14 	add.w	lr, r4, #20
 8006ea0:	46a9      	mov	r9, r5
 8006ea2:	f04f 0c00 	mov.w	ip, #0
 8006ea6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006eaa:	f8d9 1000 	ldr.w	r1, [r9]
 8006eae:	fa1f fb82 	uxth.w	fp, r2
 8006eb2:	b289      	uxth	r1, r1
 8006eb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006eb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006ebc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ec0:	4461      	add	r1, ip
 8006ec2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ec6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006eca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ece:	b289      	uxth	r1, r1
 8006ed0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ed4:	4577      	cmp	r7, lr
 8006ed6:	f849 1b04 	str.w	r1, [r9], #4
 8006eda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ede:	d8e2      	bhi.n	8006ea6 <__multiply+0xb2>
 8006ee0:	9a01      	ldr	r2, [sp, #4]
 8006ee2:	f845 c002 	str.w	ip, [r5, r2]
 8006ee6:	9a03      	ldr	r2, [sp, #12]
 8006ee8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006eec:	3304      	adds	r3, #4
 8006eee:	f1b9 0f00 	cmp.w	r9, #0
 8006ef2:	d020      	beq.n	8006f36 <__multiply+0x142>
 8006ef4:	6829      	ldr	r1, [r5, #0]
 8006ef6:	f104 0c14 	add.w	ip, r4, #20
 8006efa:	46ae      	mov	lr, r5
 8006efc:	f04f 0a00 	mov.w	sl, #0
 8006f00:	f8bc b000 	ldrh.w	fp, [ip]
 8006f04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f08:	fb09 220b 	mla	r2, r9, fp, r2
 8006f0c:	4492      	add	sl, r2
 8006f0e:	b289      	uxth	r1, r1
 8006f10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006f14:	f84e 1b04 	str.w	r1, [lr], #4
 8006f18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f1c:	f8be 1000 	ldrh.w	r1, [lr]
 8006f20:	0c12      	lsrs	r2, r2, #16
 8006f22:	fb09 1102 	mla	r1, r9, r2, r1
 8006f26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f2a:	4567      	cmp	r7, ip
 8006f2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f30:	d8e6      	bhi.n	8006f00 <__multiply+0x10c>
 8006f32:	9a01      	ldr	r2, [sp, #4]
 8006f34:	50a9      	str	r1, [r5, r2]
 8006f36:	3504      	adds	r5, #4
 8006f38:	e79a      	b.n	8006e70 <__multiply+0x7c>
 8006f3a:	3e01      	subs	r6, #1
 8006f3c:	e79c      	b.n	8006e78 <__multiply+0x84>
 8006f3e:	bf00      	nop
 8006f40:	08009850 	.word	0x08009850
 8006f44:	080098dc 	.word	0x080098dc

08006f48 <__pow5mult>:
 8006f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f4c:	4615      	mov	r5, r2
 8006f4e:	f012 0203 	ands.w	r2, r2, #3
 8006f52:	4606      	mov	r6, r0
 8006f54:	460f      	mov	r7, r1
 8006f56:	d007      	beq.n	8006f68 <__pow5mult+0x20>
 8006f58:	4c25      	ldr	r4, [pc, #148]	; (8006ff0 <__pow5mult+0xa8>)
 8006f5a:	3a01      	subs	r2, #1
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f62:	f7ff fe51 	bl	8006c08 <__multadd>
 8006f66:	4607      	mov	r7, r0
 8006f68:	10ad      	asrs	r5, r5, #2
 8006f6a:	d03d      	beq.n	8006fe8 <__pow5mult+0xa0>
 8006f6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f6e:	b97c      	cbnz	r4, 8006f90 <__pow5mult+0x48>
 8006f70:	2010      	movs	r0, #16
 8006f72:	f7ff fdbf 	bl	8006af4 <malloc>
 8006f76:	4602      	mov	r2, r0
 8006f78:	6270      	str	r0, [r6, #36]	; 0x24
 8006f7a:	b928      	cbnz	r0, 8006f88 <__pow5mult+0x40>
 8006f7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <__pow5mult+0xac>)
 8006f7e:	481e      	ldr	r0, [pc, #120]	; (8006ff8 <__pow5mult+0xb0>)
 8006f80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f84:	f000 fd2e 	bl	80079e4 <__assert_func>
 8006f88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f8c:	6004      	str	r4, [r0, #0]
 8006f8e:	60c4      	str	r4, [r0, #12]
 8006f90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f98:	b94c      	cbnz	r4, 8006fae <__pow5mult+0x66>
 8006f9a:	f240 2171 	movw	r1, #625	; 0x271
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7ff ff12 	bl	8006dc8 <__i2b>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006faa:	4604      	mov	r4, r0
 8006fac:	6003      	str	r3, [r0, #0]
 8006fae:	f04f 0900 	mov.w	r9, #0
 8006fb2:	07eb      	lsls	r3, r5, #31
 8006fb4:	d50a      	bpl.n	8006fcc <__pow5mult+0x84>
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4622      	mov	r2, r4
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7ff ff1a 	bl	8006df4 <__multiply>
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f7ff fdfd 	bl	8006bc4 <_Bfree>
 8006fca:	4647      	mov	r7, r8
 8006fcc:	106d      	asrs	r5, r5, #1
 8006fce:	d00b      	beq.n	8006fe8 <__pow5mult+0xa0>
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	b938      	cbnz	r0, 8006fe4 <__pow5mult+0x9c>
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7ff ff0b 	bl	8006df4 <__multiply>
 8006fde:	6020      	str	r0, [r4, #0]
 8006fe0:	f8c0 9000 	str.w	r9, [r0]
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	e7e4      	b.n	8006fb2 <__pow5mult+0x6a>
 8006fe8:	4638      	mov	r0, r7
 8006fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fee:	bf00      	nop
 8006ff0:	08009a28 	.word	0x08009a28
 8006ff4:	080097de 	.word	0x080097de
 8006ff8:	080098dc 	.word	0x080098dc

08006ffc <__lshift>:
 8006ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007000:	460c      	mov	r4, r1
 8007002:	6849      	ldr	r1, [r1, #4]
 8007004:	6923      	ldr	r3, [r4, #16]
 8007006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800700a:	68a3      	ldr	r3, [r4, #8]
 800700c:	4607      	mov	r7, r0
 800700e:	4691      	mov	r9, r2
 8007010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007014:	f108 0601 	add.w	r6, r8, #1
 8007018:	42b3      	cmp	r3, r6
 800701a:	db0b      	blt.n	8007034 <__lshift+0x38>
 800701c:	4638      	mov	r0, r7
 800701e:	f7ff fd91 	bl	8006b44 <_Balloc>
 8007022:	4605      	mov	r5, r0
 8007024:	b948      	cbnz	r0, 800703a <__lshift+0x3e>
 8007026:	4602      	mov	r2, r0
 8007028:	4b2a      	ldr	r3, [pc, #168]	; (80070d4 <__lshift+0xd8>)
 800702a:	482b      	ldr	r0, [pc, #172]	; (80070d8 <__lshift+0xdc>)
 800702c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007030:	f000 fcd8 	bl	80079e4 <__assert_func>
 8007034:	3101      	adds	r1, #1
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	e7ee      	b.n	8007018 <__lshift+0x1c>
 800703a:	2300      	movs	r3, #0
 800703c:	f100 0114 	add.w	r1, r0, #20
 8007040:	f100 0210 	add.w	r2, r0, #16
 8007044:	4618      	mov	r0, r3
 8007046:	4553      	cmp	r3, sl
 8007048:	db37      	blt.n	80070ba <__lshift+0xbe>
 800704a:	6920      	ldr	r0, [r4, #16]
 800704c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007050:	f104 0314 	add.w	r3, r4, #20
 8007054:	f019 091f 	ands.w	r9, r9, #31
 8007058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800705c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007060:	d02f      	beq.n	80070c2 <__lshift+0xc6>
 8007062:	f1c9 0e20 	rsb	lr, r9, #32
 8007066:	468a      	mov	sl, r1
 8007068:	f04f 0c00 	mov.w	ip, #0
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	fa02 f209 	lsl.w	r2, r2, r9
 8007072:	ea42 020c 	orr.w	r2, r2, ip
 8007076:	f84a 2b04 	str.w	r2, [sl], #4
 800707a:	f853 2b04 	ldr.w	r2, [r3], #4
 800707e:	4298      	cmp	r0, r3
 8007080:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007084:	d8f2      	bhi.n	800706c <__lshift+0x70>
 8007086:	1b03      	subs	r3, r0, r4
 8007088:	3b15      	subs	r3, #21
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	3304      	adds	r3, #4
 8007090:	f104 0215 	add.w	r2, r4, #21
 8007094:	4290      	cmp	r0, r2
 8007096:	bf38      	it	cc
 8007098:	2304      	movcc	r3, #4
 800709a:	f841 c003 	str.w	ip, [r1, r3]
 800709e:	f1bc 0f00 	cmp.w	ip, #0
 80070a2:	d001      	beq.n	80070a8 <__lshift+0xac>
 80070a4:	f108 0602 	add.w	r6, r8, #2
 80070a8:	3e01      	subs	r6, #1
 80070aa:	4638      	mov	r0, r7
 80070ac:	612e      	str	r6, [r5, #16]
 80070ae:	4621      	mov	r1, r4
 80070b0:	f7ff fd88 	bl	8006bc4 <_Bfree>
 80070b4:	4628      	mov	r0, r5
 80070b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80070be:	3301      	adds	r3, #1
 80070c0:	e7c1      	b.n	8007046 <__lshift+0x4a>
 80070c2:	3904      	subs	r1, #4
 80070c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80070cc:	4298      	cmp	r0, r3
 80070ce:	d8f9      	bhi.n	80070c4 <__lshift+0xc8>
 80070d0:	e7ea      	b.n	80070a8 <__lshift+0xac>
 80070d2:	bf00      	nop
 80070d4:	08009850 	.word	0x08009850
 80070d8:	080098dc 	.word	0x080098dc

080070dc <__mcmp>:
 80070dc:	b530      	push	{r4, r5, lr}
 80070de:	6902      	ldr	r2, [r0, #16]
 80070e0:	690c      	ldr	r4, [r1, #16]
 80070e2:	1b12      	subs	r2, r2, r4
 80070e4:	d10e      	bne.n	8007104 <__mcmp+0x28>
 80070e6:	f100 0314 	add.w	r3, r0, #20
 80070ea:	3114      	adds	r1, #20
 80070ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070fc:	42a5      	cmp	r5, r4
 80070fe:	d003      	beq.n	8007108 <__mcmp+0x2c>
 8007100:	d305      	bcc.n	800710e <__mcmp+0x32>
 8007102:	2201      	movs	r2, #1
 8007104:	4610      	mov	r0, r2
 8007106:	bd30      	pop	{r4, r5, pc}
 8007108:	4283      	cmp	r3, r0
 800710a:	d3f3      	bcc.n	80070f4 <__mcmp+0x18>
 800710c:	e7fa      	b.n	8007104 <__mcmp+0x28>
 800710e:	f04f 32ff 	mov.w	r2, #4294967295
 8007112:	e7f7      	b.n	8007104 <__mcmp+0x28>

08007114 <__mdiff>:
 8007114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	460c      	mov	r4, r1
 800711a:	4606      	mov	r6, r0
 800711c:	4611      	mov	r1, r2
 800711e:	4620      	mov	r0, r4
 8007120:	4690      	mov	r8, r2
 8007122:	f7ff ffdb 	bl	80070dc <__mcmp>
 8007126:	1e05      	subs	r5, r0, #0
 8007128:	d110      	bne.n	800714c <__mdiff+0x38>
 800712a:	4629      	mov	r1, r5
 800712c:	4630      	mov	r0, r6
 800712e:	f7ff fd09 	bl	8006b44 <_Balloc>
 8007132:	b930      	cbnz	r0, 8007142 <__mdiff+0x2e>
 8007134:	4b3a      	ldr	r3, [pc, #232]	; (8007220 <__mdiff+0x10c>)
 8007136:	4602      	mov	r2, r0
 8007138:	f240 2132 	movw	r1, #562	; 0x232
 800713c:	4839      	ldr	r0, [pc, #228]	; (8007224 <__mdiff+0x110>)
 800713e:	f000 fc51 	bl	80079e4 <__assert_func>
 8007142:	2301      	movs	r3, #1
 8007144:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714c:	bfa4      	itt	ge
 800714e:	4643      	movge	r3, r8
 8007150:	46a0      	movge	r8, r4
 8007152:	4630      	mov	r0, r6
 8007154:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007158:	bfa6      	itte	ge
 800715a:	461c      	movge	r4, r3
 800715c:	2500      	movge	r5, #0
 800715e:	2501      	movlt	r5, #1
 8007160:	f7ff fcf0 	bl	8006b44 <_Balloc>
 8007164:	b920      	cbnz	r0, 8007170 <__mdiff+0x5c>
 8007166:	4b2e      	ldr	r3, [pc, #184]	; (8007220 <__mdiff+0x10c>)
 8007168:	4602      	mov	r2, r0
 800716a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800716e:	e7e5      	b.n	800713c <__mdiff+0x28>
 8007170:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007174:	6926      	ldr	r6, [r4, #16]
 8007176:	60c5      	str	r5, [r0, #12]
 8007178:	f104 0914 	add.w	r9, r4, #20
 800717c:	f108 0514 	add.w	r5, r8, #20
 8007180:	f100 0e14 	add.w	lr, r0, #20
 8007184:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007188:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800718c:	f108 0210 	add.w	r2, r8, #16
 8007190:	46f2      	mov	sl, lr
 8007192:	2100      	movs	r1, #0
 8007194:	f859 3b04 	ldr.w	r3, [r9], #4
 8007198:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800719c:	fa1f f883 	uxth.w	r8, r3
 80071a0:	fa11 f18b 	uxtah	r1, r1, fp
 80071a4:	0c1b      	lsrs	r3, r3, #16
 80071a6:	eba1 0808 	sub.w	r8, r1, r8
 80071aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071b2:	fa1f f888 	uxth.w	r8, r8
 80071b6:	1419      	asrs	r1, r3, #16
 80071b8:	454e      	cmp	r6, r9
 80071ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071be:	f84a 3b04 	str.w	r3, [sl], #4
 80071c2:	d8e7      	bhi.n	8007194 <__mdiff+0x80>
 80071c4:	1b33      	subs	r3, r6, r4
 80071c6:	3b15      	subs	r3, #21
 80071c8:	f023 0303 	bic.w	r3, r3, #3
 80071cc:	3304      	adds	r3, #4
 80071ce:	3415      	adds	r4, #21
 80071d0:	42a6      	cmp	r6, r4
 80071d2:	bf38      	it	cc
 80071d4:	2304      	movcc	r3, #4
 80071d6:	441d      	add	r5, r3
 80071d8:	4473      	add	r3, lr
 80071da:	469e      	mov	lr, r3
 80071dc:	462e      	mov	r6, r5
 80071de:	4566      	cmp	r6, ip
 80071e0:	d30e      	bcc.n	8007200 <__mdiff+0xec>
 80071e2:	f10c 0203 	add.w	r2, ip, #3
 80071e6:	1b52      	subs	r2, r2, r5
 80071e8:	f022 0203 	bic.w	r2, r2, #3
 80071ec:	3d03      	subs	r5, #3
 80071ee:	45ac      	cmp	ip, r5
 80071f0:	bf38      	it	cc
 80071f2:	2200      	movcc	r2, #0
 80071f4:	441a      	add	r2, r3
 80071f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80071fa:	b17b      	cbz	r3, 800721c <__mdiff+0x108>
 80071fc:	6107      	str	r7, [r0, #16]
 80071fe:	e7a3      	b.n	8007148 <__mdiff+0x34>
 8007200:	f856 8b04 	ldr.w	r8, [r6], #4
 8007204:	fa11 f288 	uxtah	r2, r1, r8
 8007208:	1414      	asrs	r4, r2, #16
 800720a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800720e:	b292      	uxth	r2, r2
 8007210:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007214:	f84e 2b04 	str.w	r2, [lr], #4
 8007218:	1421      	asrs	r1, r4, #16
 800721a:	e7e0      	b.n	80071de <__mdiff+0xca>
 800721c:	3f01      	subs	r7, #1
 800721e:	e7ea      	b.n	80071f6 <__mdiff+0xe2>
 8007220:	08009850 	.word	0x08009850
 8007224:	080098dc 	.word	0x080098dc

08007228 <__ulp>:
 8007228:	b082      	sub	sp, #8
 800722a:	ed8d 0b00 	vstr	d0, [sp]
 800722e:	9b01      	ldr	r3, [sp, #4]
 8007230:	4912      	ldr	r1, [pc, #72]	; (800727c <__ulp+0x54>)
 8007232:	4019      	ands	r1, r3
 8007234:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007238:	2900      	cmp	r1, #0
 800723a:	dd05      	ble.n	8007248 <__ulp+0x20>
 800723c:	2200      	movs	r2, #0
 800723e:	460b      	mov	r3, r1
 8007240:	ec43 2b10 	vmov	d0, r2, r3
 8007244:	b002      	add	sp, #8
 8007246:	4770      	bx	lr
 8007248:	4249      	negs	r1, r1
 800724a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800724e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	da04      	bge.n	8007266 <__ulp+0x3e>
 800725c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007260:	fa41 f300 	asr.w	r3, r1, r0
 8007264:	e7ec      	b.n	8007240 <__ulp+0x18>
 8007266:	f1a0 0114 	sub.w	r1, r0, #20
 800726a:	291e      	cmp	r1, #30
 800726c:	bfda      	itte	le
 800726e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007272:	fa20 f101 	lsrle.w	r1, r0, r1
 8007276:	2101      	movgt	r1, #1
 8007278:	460a      	mov	r2, r1
 800727a:	e7e1      	b.n	8007240 <__ulp+0x18>
 800727c:	7ff00000 	.word	0x7ff00000

08007280 <__b2d>:
 8007280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007282:	6905      	ldr	r5, [r0, #16]
 8007284:	f100 0714 	add.w	r7, r0, #20
 8007288:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800728c:	1f2e      	subs	r6, r5, #4
 800728e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007292:	4620      	mov	r0, r4
 8007294:	f7ff fd48 	bl	8006d28 <__hi0bits>
 8007298:	f1c0 0320 	rsb	r3, r0, #32
 800729c:	280a      	cmp	r0, #10
 800729e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800731c <__b2d+0x9c>
 80072a2:	600b      	str	r3, [r1, #0]
 80072a4:	dc14      	bgt.n	80072d0 <__b2d+0x50>
 80072a6:	f1c0 0e0b 	rsb	lr, r0, #11
 80072aa:	fa24 f10e 	lsr.w	r1, r4, lr
 80072ae:	42b7      	cmp	r7, r6
 80072b0:	ea41 030c 	orr.w	r3, r1, ip
 80072b4:	bf34      	ite	cc
 80072b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80072ba:	2100      	movcs	r1, #0
 80072bc:	3015      	adds	r0, #21
 80072be:	fa04 f000 	lsl.w	r0, r4, r0
 80072c2:	fa21 f10e 	lsr.w	r1, r1, lr
 80072c6:	ea40 0201 	orr.w	r2, r0, r1
 80072ca:	ec43 2b10 	vmov	d0, r2, r3
 80072ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d0:	42b7      	cmp	r7, r6
 80072d2:	bf3a      	itte	cc
 80072d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80072d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80072dc:	2100      	movcs	r1, #0
 80072de:	380b      	subs	r0, #11
 80072e0:	d017      	beq.n	8007312 <__b2d+0x92>
 80072e2:	f1c0 0c20 	rsb	ip, r0, #32
 80072e6:	fa04 f500 	lsl.w	r5, r4, r0
 80072ea:	42be      	cmp	r6, r7
 80072ec:	fa21 f40c 	lsr.w	r4, r1, ip
 80072f0:	ea45 0504 	orr.w	r5, r5, r4
 80072f4:	bf8c      	ite	hi
 80072f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80072fa:	2400      	movls	r4, #0
 80072fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007300:	fa01 f000 	lsl.w	r0, r1, r0
 8007304:	fa24 f40c 	lsr.w	r4, r4, ip
 8007308:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800730c:	ea40 0204 	orr.w	r2, r0, r4
 8007310:	e7db      	b.n	80072ca <__b2d+0x4a>
 8007312:	ea44 030c 	orr.w	r3, r4, ip
 8007316:	460a      	mov	r2, r1
 8007318:	e7d7      	b.n	80072ca <__b2d+0x4a>
 800731a:	bf00      	nop
 800731c:	3ff00000 	.word	0x3ff00000

08007320 <__d2b>:
 8007320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007324:	4689      	mov	r9, r1
 8007326:	2101      	movs	r1, #1
 8007328:	ec57 6b10 	vmov	r6, r7, d0
 800732c:	4690      	mov	r8, r2
 800732e:	f7ff fc09 	bl	8006b44 <_Balloc>
 8007332:	4604      	mov	r4, r0
 8007334:	b930      	cbnz	r0, 8007344 <__d2b+0x24>
 8007336:	4602      	mov	r2, r0
 8007338:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <__d2b+0xb0>)
 800733a:	4826      	ldr	r0, [pc, #152]	; (80073d4 <__d2b+0xb4>)
 800733c:	f240 310a 	movw	r1, #778	; 0x30a
 8007340:	f000 fb50 	bl	80079e4 <__assert_func>
 8007344:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007348:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800734c:	bb35      	cbnz	r5, 800739c <__d2b+0x7c>
 800734e:	2e00      	cmp	r6, #0
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	d028      	beq.n	80073a6 <__d2b+0x86>
 8007354:	4668      	mov	r0, sp
 8007356:	9600      	str	r6, [sp, #0]
 8007358:	f7ff fd06 	bl	8006d68 <__lo0bits>
 800735c:	9900      	ldr	r1, [sp, #0]
 800735e:	b300      	cbz	r0, 80073a2 <__d2b+0x82>
 8007360:	9a01      	ldr	r2, [sp, #4]
 8007362:	f1c0 0320 	rsb	r3, r0, #32
 8007366:	fa02 f303 	lsl.w	r3, r2, r3
 800736a:	430b      	orrs	r3, r1
 800736c:	40c2      	lsrs	r2, r0
 800736e:	6163      	str	r3, [r4, #20]
 8007370:	9201      	str	r2, [sp, #4]
 8007372:	9b01      	ldr	r3, [sp, #4]
 8007374:	61a3      	str	r3, [r4, #24]
 8007376:	2b00      	cmp	r3, #0
 8007378:	bf14      	ite	ne
 800737a:	2202      	movne	r2, #2
 800737c:	2201      	moveq	r2, #1
 800737e:	6122      	str	r2, [r4, #16]
 8007380:	b1d5      	cbz	r5, 80073b8 <__d2b+0x98>
 8007382:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007386:	4405      	add	r5, r0
 8007388:	f8c9 5000 	str.w	r5, [r9]
 800738c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007390:	f8c8 0000 	str.w	r0, [r8]
 8007394:	4620      	mov	r0, r4
 8007396:	b003      	add	sp, #12
 8007398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800739c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073a0:	e7d5      	b.n	800734e <__d2b+0x2e>
 80073a2:	6161      	str	r1, [r4, #20]
 80073a4:	e7e5      	b.n	8007372 <__d2b+0x52>
 80073a6:	a801      	add	r0, sp, #4
 80073a8:	f7ff fcde 	bl	8006d68 <__lo0bits>
 80073ac:	9b01      	ldr	r3, [sp, #4]
 80073ae:	6163      	str	r3, [r4, #20]
 80073b0:	2201      	movs	r2, #1
 80073b2:	6122      	str	r2, [r4, #16]
 80073b4:	3020      	adds	r0, #32
 80073b6:	e7e3      	b.n	8007380 <__d2b+0x60>
 80073b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073c0:	f8c9 0000 	str.w	r0, [r9]
 80073c4:	6918      	ldr	r0, [r3, #16]
 80073c6:	f7ff fcaf 	bl	8006d28 <__hi0bits>
 80073ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073ce:	e7df      	b.n	8007390 <__d2b+0x70>
 80073d0:	08009850 	.word	0x08009850
 80073d4:	080098dc 	.word	0x080098dc

080073d8 <__ratio>:
 80073d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	4688      	mov	r8, r1
 80073de:	4669      	mov	r1, sp
 80073e0:	4681      	mov	r9, r0
 80073e2:	f7ff ff4d 	bl	8007280 <__b2d>
 80073e6:	a901      	add	r1, sp, #4
 80073e8:	4640      	mov	r0, r8
 80073ea:	ec55 4b10 	vmov	r4, r5, d0
 80073ee:	f7ff ff47 	bl	8007280 <__b2d>
 80073f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80073fa:	eba3 0c02 	sub.w	ip, r3, r2
 80073fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007402:	1a9b      	subs	r3, r3, r2
 8007404:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007408:	ec51 0b10 	vmov	r0, r1, d0
 800740c:	2b00      	cmp	r3, #0
 800740e:	bfd6      	itet	le
 8007410:	460a      	movle	r2, r1
 8007412:	462a      	movgt	r2, r5
 8007414:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007418:	468b      	mov	fp, r1
 800741a:	462f      	mov	r7, r5
 800741c:	bfd4      	ite	le
 800741e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007422:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007426:	4620      	mov	r0, r4
 8007428:	ee10 2a10 	vmov	r2, s0
 800742c:	465b      	mov	r3, fp
 800742e:	4639      	mov	r1, r7
 8007430:	f7f9 fa14 	bl	800085c <__aeabi_ddiv>
 8007434:	ec41 0b10 	vmov	d0, r0, r1
 8007438:	b003      	add	sp, #12
 800743a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800743e <__copybits>:
 800743e:	3901      	subs	r1, #1
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	1149      	asrs	r1, r1, #5
 8007444:	6914      	ldr	r4, [r2, #16]
 8007446:	3101      	adds	r1, #1
 8007448:	f102 0314 	add.w	r3, r2, #20
 800744c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007450:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007454:	1f05      	subs	r5, r0, #4
 8007456:	42a3      	cmp	r3, r4
 8007458:	d30c      	bcc.n	8007474 <__copybits+0x36>
 800745a:	1aa3      	subs	r3, r4, r2
 800745c:	3b11      	subs	r3, #17
 800745e:	f023 0303 	bic.w	r3, r3, #3
 8007462:	3211      	adds	r2, #17
 8007464:	42a2      	cmp	r2, r4
 8007466:	bf88      	it	hi
 8007468:	2300      	movhi	r3, #0
 800746a:	4418      	add	r0, r3
 800746c:	2300      	movs	r3, #0
 800746e:	4288      	cmp	r0, r1
 8007470:	d305      	bcc.n	800747e <__copybits+0x40>
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	f853 6b04 	ldr.w	r6, [r3], #4
 8007478:	f845 6f04 	str.w	r6, [r5, #4]!
 800747c:	e7eb      	b.n	8007456 <__copybits+0x18>
 800747e:	f840 3b04 	str.w	r3, [r0], #4
 8007482:	e7f4      	b.n	800746e <__copybits+0x30>

08007484 <__any_on>:
 8007484:	f100 0214 	add.w	r2, r0, #20
 8007488:	6900      	ldr	r0, [r0, #16]
 800748a:	114b      	asrs	r3, r1, #5
 800748c:	4298      	cmp	r0, r3
 800748e:	b510      	push	{r4, lr}
 8007490:	db11      	blt.n	80074b6 <__any_on+0x32>
 8007492:	dd0a      	ble.n	80074aa <__any_on+0x26>
 8007494:	f011 011f 	ands.w	r1, r1, #31
 8007498:	d007      	beq.n	80074aa <__any_on+0x26>
 800749a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800749e:	fa24 f001 	lsr.w	r0, r4, r1
 80074a2:	fa00 f101 	lsl.w	r1, r0, r1
 80074a6:	428c      	cmp	r4, r1
 80074a8:	d10b      	bne.n	80074c2 <__any_on+0x3e>
 80074aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d803      	bhi.n	80074ba <__any_on+0x36>
 80074b2:	2000      	movs	r0, #0
 80074b4:	bd10      	pop	{r4, pc}
 80074b6:	4603      	mov	r3, r0
 80074b8:	e7f7      	b.n	80074aa <__any_on+0x26>
 80074ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074be:	2900      	cmp	r1, #0
 80074c0:	d0f5      	beq.n	80074ae <__any_on+0x2a>
 80074c2:	2001      	movs	r0, #1
 80074c4:	e7f6      	b.n	80074b4 <__any_on+0x30>

080074c6 <_calloc_r>:
 80074c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074c8:	fba1 2402 	umull	r2, r4, r1, r2
 80074cc:	b94c      	cbnz	r4, 80074e2 <_calloc_r+0x1c>
 80074ce:	4611      	mov	r1, r2
 80074d0:	9201      	str	r2, [sp, #4]
 80074d2:	f000 f87b 	bl	80075cc <_malloc_r>
 80074d6:	9a01      	ldr	r2, [sp, #4]
 80074d8:	4605      	mov	r5, r0
 80074da:	b930      	cbnz	r0, 80074ea <_calloc_r+0x24>
 80074dc:	4628      	mov	r0, r5
 80074de:	b003      	add	sp, #12
 80074e0:	bd30      	pop	{r4, r5, pc}
 80074e2:	220c      	movs	r2, #12
 80074e4:	6002      	str	r2, [r0, #0]
 80074e6:	2500      	movs	r5, #0
 80074e8:	e7f8      	b.n	80074dc <_calloc_r+0x16>
 80074ea:	4621      	mov	r1, r4
 80074ec:	f7fc fbc0 	bl	8003c70 <memset>
 80074f0:	e7f4      	b.n	80074dc <_calloc_r+0x16>
	...

080074f4 <_free_r>:
 80074f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d044      	beq.n	8007584 <_free_r+0x90>
 80074fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074fe:	9001      	str	r0, [sp, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f1a1 0404 	sub.w	r4, r1, #4
 8007506:	bfb8      	it	lt
 8007508:	18e4      	addlt	r4, r4, r3
 800750a:	f000 fab5 	bl	8007a78 <__malloc_lock>
 800750e:	4a1e      	ldr	r2, [pc, #120]	; (8007588 <_free_r+0x94>)
 8007510:	9801      	ldr	r0, [sp, #4]
 8007512:	6813      	ldr	r3, [r2, #0]
 8007514:	b933      	cbnz	r3, 8007524 <_free_r+0x30>
 8007516:	6063      	str	r3, [r4, #4]
 8007518:	6014      	str	r4, [r2, #0]
 800751a:	b003      	add	sp, #12
 800751c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007520:	f000 bab0 	b.w	8007a84 <__malloc_unlock>
 8007524:	42a3      	cmp	r3, r4
 8007526:	d908      	bls.n	800753a <_free_r+0x46>
 8007528:	6825      	ldr	r5, [r4, #0]
 800752a:	1961      	adds	r1, r4, r5
 800752c:	428b      	cmp	r3, r1
 800752e:	bf01      	itttt	eq
 8007530:	6819      	ldreq	r1, [r3, #0]
 8007532:	685b      	ldreq	r3, [r3, #4]
 8007534:	1949      	addeq	r1, r1, r5
 8007536:	6021      	streq	r1, [r4, #0]
 8007538:	e7ed      	b.n	8007516 <_free_r+0x22>
 800753a:	461a      	mov	r2, r3
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	b10b      	cbz	r3, 8007544 <_free_r+0x50>
 8007540:	42a3      	cmp	r3, r4
 8007542:	d9fa      	bls.n	800753a <_free_r+0x46>
 8007544:	6811      	ldr	r1, [r2, #0]
 8007546:	1855      	adds	r5, r2, r1
 8007548:	42a5      	cmp	r5, r4
 800754a:	d10b      	bne.n	8007564 <_free_r+0x70>
 800754c:	6824      	ldr	r4, [r4, #0]
 800754e:	4421      	add	r1, r4
 8007550:	1854      	adds	r4, r2, r1
 8007552:	42a3      	cmp	r3, r4
 8007554:	6011      	str	r1, [r2, #0]
 8007556:	d1e0      	bne.n	800751a <_free_r+0x26>
 8007558:	681c      	ldr	r4, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	6053      	str	r3, [r2, #4]
 800755e:	4421      	add	r1, r4
 8007560:	6011      	str	r1, [r2, #0]
 8007562:	e7da      	b.n	800751a <_free_r+0x26>
 8007564:	d902      	bls.n	800756c <_free_r+0x78>
 8007566:	230c      	movs	r3, #12
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	e7d6      	b.n	800751a <_free_r+0x26>
 800756c:	6825      	ldr	r5, [r4, #0]
 800756e:	1961      	adds	r1, r4, r5
 8007570:	428b      	cmp	r3, r1
 8007572:	bf04      	itt	eq
 8007574:	6819      	ldreq	r1, [r3, #0]
 8007576:	685b      	ldreq	r3, [r3, #4]
 8007578:	6063      	str	r3, [r4, #4]
 800757a:	bf04      	itt	eq
 800757c:	1949      	addeq	r1, r1, r5
 800757e:	6021      	streq	r1, [r4, #0]
 8007580:	6054      	str	r4, [r2, #4]
 8007582:	e7ca      	b.n	800751a <_free_r+0x26>
 8007584:	b003      	add	sp, #12
 8007586:	bd30      	pop	{r4, r5, pc}
 8007588:	20000338 	.word	0x20000338

0800758c <sbrk_aligned>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4e0e      	ldr	r6, [pc, #56]	; (80075c8 <sbrk_aligned+0x3c>)
 8007590:	460c      	mov	r4, r1
 8007592:	6831      	ldr	r1, [r6, #0]
 8007594:	4605      	mov	r5, r0
 8007596:	b911      	cbnz	r1, 800759e <sbrk_aligned+0x12>
 8007598:	f000 f9f2 	bl	8007980 <_sbrk_r>
 800759c:	6030      	str	r0, [r6, #0]
 800759e:	4621      	mov	r1, r4
 80075a0:	4628      	mov	r0, r5
 80075a2:	f000 f9ed 	bl	8007980 <_sbrk_r>
 80075a6:	1c43      	adds	r3, r0, #1
 80075a8:	d00a      	beq.n	80075c0 <sbrk_aligned+0x34>
 80075aa:	1cc4      	adds	r4, r0, #3
 80075ac:	f024 0403 	bic.w	r4, r4, #3
 80075b0:	42a0      	cmp	r0, r4
 80075b2:	d007      	beq.n	80075c4 <sbrk_aligned+0x38>
 80075b4:	1a21      	subs	r1, r4, r0
 80075b6:	4628      	mov	r0, r5
 80075b8:	f000 f9e2 	bl	8007980 <_sbrk_r>
 80075bc:	3001      	adds	r0, #1
 80075be:	d101      	bne.n	80075c4 <sbrk_aligned+0x38>
 80075c0:	f04f 34ff 	mov.w	r4, #4294967295
 80075c4:	4620      	mov	r0, r4
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	2000033c 	.word	0x2000033c

080075cc <_malloc_r>:
 80075cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d0:	1ccd      	adds	r5, r1, #3
 80075d2:	f025 0503 	bic.w	r5, r5, #3
 80075d6:	3508      	adds	r5, #8
 80075d8:	2d0c      	cmp	r5, #12
 80075da:	bf38      	it	cc
 80075dc:	250c      	movcc	r5, #12
 80075de:	2d00      	cmp	r5, #0
 80075e0:	4607      	mov	r7, r0
 80075e2:	db01      	blt.n	80075e8 <_malloc_r+0x1c>
 80075e4:	42a9      	cmp	r1, r5
 80075e6:	d905      	bls.n	80075f4 <_malloc_r+0x28>
 80075e8:	230c      	movs	r3, #12
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	2600      	movs	r6, #0
 80075ee:	4630      	mov	r0, r6
 80075f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f4:	4e2e      	ldr	r6, [pc, #184]	; (80076b0 <_malloc_r+0xe4>)
 80075f6:	f000 fa3f 	bl	8007a78 <__malloc_lock>
 80075fa:	6833      	ldr	r3, [r6, #0]
 80075fc:	461c      	mov	r4, r3
 80075fe:	bb34      	cbnz	r4, 800764e <_malloc_r+0x82>
 8007600:	4629      	mov	r1, r5
 8007602:	4638      	mov	r0, r7
 8007604:	f7ff ffc2 	bl	800758c <sbrk_aligned>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	4604      	mov	r4, r0
 800760c:	d14d      	bne.n	80076aa <_malloc_r+0xde>
 800760e:	6834      	ldr	r4, [r6, #0]
 8007610:	4626      	mov	r6, r4
 8007612:	2e00      	cmp	r6, #0
 8007614:	d140      	bne.n	8007698 <_malloc_r+0xcc>
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	4631      	mov	r1, r6
 800761a:	4638      	mov	r0, r7
 800761c:	eb04 0803 	add.w	r8, r4, r3
 8007620:	f000 f9ae 	bl	8007980 <_sbrk_r>
 8007624:	4580      	cmp	r8, r0
 8007626:	d13a      	bne.n	800769e <_malloc_r+0xd2>
 8007628:	6821      	ldr	r1, [r4, #0]
 800762a:	3503      	adds	r5, #3
 800762c:	1a6d      	subs	r5, r5, r1
 800762e:	f025 0503 	bic.w	r5, r5, #3
 8007632:	3508      	adds	r5, #8
 8007634:	2d0c      	cmp	r5, #12
 8007636:	bf38      	it	cc
 8007638:	250c      	movcc	r5, #12
 800763a:	4629      	mov	r1, r5
 800763c:	4638      	mov	r0, r7
 800763e:	f7ff ffa5 	bl	800758c <sbrk_aligned>
 8007642:	3001      	adds	r0, #1
 8007644:	d02b      	beq.n	800769e <_malloc_r+0xd2>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	442b      	add	r3, r5
 800764a:	6023      	str	r3, [r4, #0]
 800764c:	e00e      	b.n	800766c <_malloc_r+0xa0>
 800764e:	6822      	ldr	r2, [r4, #0]
 8007650:	1b52      	subs	r2, r2, r5
 8007652:	d41e      	bmi.n	8007692 <_malloc_r+0xc6>
 8007654:	2a0b      	cmp	r2, #11
 8007656:	d916      	bls.n	8007686 <_malloc_r+0xba>
 8007658:	1961      	adds	r1, r4, r5
 800765a:	42a3      	cmp	r3, r4
 800765c:	6025      	str	r5, [r4, #0]
 800765e:	bf18      	it	ne
 8007660:	6059      	strne	r1, [r3, #4]
 8007662:	6863      	ldr	r3, [r4, #4]
 8007664:	bf08      	it	eq
 8007666:	6031      	streq	r1, [r6, #0]
 8007668:	5162      	str	r2, [r4, r5]
 800766a:	604b      	str	r3, [r1, #4]
 800766c:	4638      	mov	r0, r7
 800766e:	f104 060b 	add.w	r6, r4, #11
 8007672:	f000 fa07 	bl	8007a84 <__malloc_unlock>
 8007676:	f026 0607 	bic.w	r6, r6, #7
 800767a:	1d23      	adds	r3, r4, #4
 800767c:	1af2      	subs	r2, r6, r3
 800767e:	d0b6      	beq.n	80075ee <_malloc_r+0x22>
 8007680:	1b9b      	subs	r3, r3, r6
 8007682:	50a3      	str	r3, [r4, r2]
 8007684:	e7b3      	b.n	80075ee <_malloc_r+0x22>
 8007686:	6862      	ldr	r2, [r4, #4]
 8007688:	42a3      	cmp	r3, r4
 800768a:	bf0c      	ite	eq
 800768c:	6032      	streq	r2, [r6, #0]
 800768e:	605a      	strne	r2, [r3, #4]
 8007690:	e7ec      	b.n	800766c <_malloc_r+0xa0>
 8007692:	4623      	mov	r3, r4
 8007694:	6864      	ldr	r4, [r4, #4]
 8007696:	e7b2      	b.n	80075fe <_malloc_r+0x32>
 8007698:	4634      	mov	r4, r6
 800769a:	6876      	ldr	r6, [r6, #4]
 800769c:	e7b9      	b.n	8007612 <_malloc_r+0x46>
 800769e:	230c      	movs	r3, #12
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	4638      	mov	r0, r7
 80076a4:	f000 f9ee 	bl	8007a84 <__malloc_unlock>
 80076a8:	e7a1      	b.n	80075ee <_malloc_r+0x22>
 80076aa:	6025      	str	r5, [r4, #0]
 80076ac:	e7de      	b.n	800766c <_malloc_r+0xa0>
 80076ae:	bf00      	nop
 80076b0:	20000338 	.word	0x20000338

080076b4 <__ssputs_r>:
 80076b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	688e      	ldr	r6, [r1, #8]
 80076ba:	429e      	cmp	r6, r3
 80076bc:	4682      	mov	sl, r0
 80076be:	460c      	mov	r4, r1
 80076c0:	4690      	mov	r8, r2
 80076c2:	461f      	mov	r7, r3
 80076c4:	d838      	bhi.n	8007738 <__ssputs_r+0x84>
 80076c6:	898a      	ldrh	r2, [r1, #12]
 80076c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076cc:	d032      	beq.n	8007734 <__ssputs_r+0x80>
 80076ce:	6825      	ldr	r5, [r4, #0]
 80076d0:	6909      	ldr	r1, [r1, #16]
 80076d2:	eba5 0901 	sub.w	r9, r5, r1
 80076d6:	6965      	ldr	r5, [r4, #20]
 80076d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076e0:	3301      	adds	r3, #1
 80076e2:	444b      	add	r3, r9
 80076e4:	106d      	asrs	r5, r5, #1
 80076e6:	429d      	cmp	r5, r3
 80076e8:	bf38      	it	cc
 80076ea:	461d      	movcc	r5, r3
 80076ec:	0553      	lsls	r3, r2, #21
 80076ee:	d531      	bpl.n	8007754 <__ssputs_r+0xa0>
 80076f0:	4629      	mov	r1, r5
 80076f2:	f7ff ff6b 	bl	80075cc <_malloc_r>
 80076f6:	4606      	mov	r6, r0
 80076f8:	b950      	cbnz	r0, 8007710 <__ssputs_r+0x5c>
 80076fa:	230c      	movs	r3, #12
 80076fc:	f8ca 3000 	str.w	r3, [sl]
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007706:	81a3      	strh	r3, [r4, #12]
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007710:	6921      	ldr	r1, [r4, #16]
 8007712:	464a      	mov	r2, r9
 8007714:	f7ff fa08 	bl	8006b28 <memcpy>
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800771e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007722:	81a3      	strh	r3, [r4, #12]
 8007724:	6126      	str	r6, [r4, #16]
 8007726:	6165      	str	r5, [r4, #20]
 8007728:	444e      	add	r6, r9
 800772a:	eba5 0509 	sub.w	r5, r5, r9
 800772e:	6026      	str	r6, [r4, #0]
 8007730:	60a5      	str	r5, [r4, #8]
 8007732:	463e      	mov	r6, r7
 8007734:	42be      	cmp	r6, r7
 8007736:	d900      	bls.n	800773a <__ssputs_r+0x86>
 8007738:	463e      	mov	r6, r7
 800773a:	6820      	ldr	r0, [r4, #0]
 800773c:	4632      	mov	r2, r6
 800773e:	4641      	mov	r1, r8
 8007740:	f000 f980 	bl	8007a44 <memmove>
 8007744:	68a3      	ldr	r3, [r4, #8]
 8007746:	1b9b      	subs	r3, r3, r6
 8007748:	60a3      	str	r3, [r4, #8]
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	4433      	add	r3, r6
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	2000      	movs	r0, #0
 8007752:	e7db      	b.n	800770c <__ssputs_r+0x58>
 8007754:	462a      	mov	r2, r5
 8007756:	f000 f99b 	bl	8007a90 <_realloc_r>
 800775a:	4606      	mov	r6, r0
 800775c:	2800      	cmp	r0, #0
 800775e:	d1e1      	bne.n	8007724 <__ssputs_r+0x70>
 8007760:	6921      	ldr	r1, [r4, #16]
 8007762:	4650      	mov	r0, sl
 8007764:	f7ff fec6 	bl	80074f4 <_free_r>
 8007768:	e7c7      	b.n	80076fa <__ssputs_r+0x46>
	...

0800776c <_svfiprintf_r>:
 800776c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007770:	4698      	mov	r8, r3
 8007772:	898b      	ldrh	r3, [r1, #12]
 8007774:	061b      	lsls	r3, r3, #24
 8007776:	b09d      	sub	sp, #116	; 0x74
 8007778:	4607      	mov	r7, r0
 800777a:	460d      	mov	r5, r1
 800777c:	4614      	mov	r4, r2
 800777e:	d50e      	bpl.n	800779e <_svfiprintf_r+0x32>
 8007780:	690b      	ldr	r3, [r1, #16]
 8007782:	b963      	cbnz	r3, 800779e <_svfiprintf_r+0x32>
 8007784:	2140      	movs	r1, #64	; 0x40
 8007786:	f7ff ff21 	bl	80075cc <_malloc_r>
 800778a:	6028      	str	r0, [r5, #0]
 800778c:	6128      	str	r0, [r5, #16]
 800778e:	b920      	cbnz	r0, 800779a <_svfiprintf_r+0x2e>
 8007790:	230c      	movs	r3, #12
 8007792:	603b      	str	r3, [r7, #0]
 8007794:	f04f 30ff 	mov.w	r0, #4294967295
 8007798:	e0d1      	b.n	800793e <_svfiprintf_r+0x1d2>
 800779a:	2340      	movs	r3, #64	; 0x40
 800779c:	616b      	str	r3, [r5, #20]
 800779e:	2300      	movs	r3, #0
 80077a0:	9309      	str	r3, [sp, #36]	; 0x24
 80077a2:	2320      	movs	r3, #32
 80077a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80077ac:	2330      	movs	r3, #48	; 0x30
 80077ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007958 <_svfiprintf_r+0x1ec>
 80077b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077b6:	f04f 0901 	mov.w	r9, #1
 80077ba:	4623      	mov	r3, r4
 80077bc:	469a      	mov	sl, r3
 80077be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077c2:	b10a      	cbz	r2, 80077c8 <_svfiprintf_r+0x5c>
 80077c4:	2a25      	cmp	r2, #37	; 0x25
 80077c6:	d1f9      	bne.n	80077bc <_svfiprintf_r+0x50>
 80077c8:	ebba 0b04 	subs.w	fp, sl, r4
 80077cc:	d00b      	beq.n	80077e6 <_svfiprintf_r+0x7a>
 80077ce:	465b      	mov	r3, fp
 80077d0:	4622      	mov	r2, r4
 80077d2:	4629      	mov	r1, r5
 80077d4:	4638      	mov	r0, r7
 80077d6:	f7ff ff6d 	bl	80076b4 <__ssputs_r>
 80077da:	3001      	adds	r0, #1
 80077dc:	f000 80aa 	beq.w	8007934 <_svfiprintf_r+0x1c8>
 80077e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077e2:	445a      	add	r2, fp
 80077e4:	9209      	str	r2, [sp, #36]	; 0x24
 80077e6:	f89a 3000 	ldrb.w	r3, [sl]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 80a2 	beq.w	8007934 <_svfiprintf_r+0x1c8>
 80077f0:	2300      	movs	r3, #0
 80077f2:	f04f 32ff 	mov.w	r2, #4294967295
 80077f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077fa:	f10a 0a01 	add.w	sl, sl, #1
 80077fe:	9304      	str	r3, [sp, #16]
 8007800:	9307      	str	r3, [sp, #28]
 8007802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007806:	931a      	str	r3, [sp, #104]	; 0x68
 8007808:	4654      	mov	r4, sl
 800780a:	2205      	movs	r2, #5
 800780c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007810:	4851      	ldr	r0, [pc, #324]	; (8007958 <_svfiprintf_r+0x1ec>)
 8007812:	f7f8 fced 	bl	80001f0 <memchr>
 8007816:	9a04      	ldr	r2, [sp, #16]
 8007818:	b9d8      	cbnz	r0, 8007852 <_svfiprintf_r+0xe6>
 800781a:	06d0      	lsls	r0, r2, #27
 800781c:	bf44      	itt	mi
 800781e:	2320      	movmi	r3, #32
 8007820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007824:	0711      	lsls	r1, r2, #28
 8007826:	bf44      	itt	mi
 8007828:	232b      	movmi	r3, #43	; 0x2b
 800782a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800782e:	f89a 3000 	ldrb.w	r3, [sl]
 8007832:	2b2a      	cmp	r3, #42	; 0x2a
 8007834:	d015      	beq.n	8007862 <_svfiprintf_r+0xf6>
 8007836:	9a07      	ldr	r2, [sp, #28]
 8007838:	4654      	mov	r4, sl
 800783a:	2000      	movs	r0, #0
 800783c:	f04f 0c0a 	mov.w	ip, #10
 8007840:	4621      	mov	r1, r4
 8007842:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007846:	3b30      	subs	r3, #48	; 0x30
 8007848:	2b09      	cmp	r3, #9
 800784a:	d94e      	bls.n	80078ea <_svfiprintf_r+0x17e>
 800784c:	b1b0      	cbz	r0, 800787c <_svfiprintf_r+0x110>
 800784e:	9207      	str	r2, [sp, #28]
 8007850:	e014      	b.n	800787c <_svfiprintf_r+0x110>
 8007852:	eba0 0308 	sub.w	r3, r0, r8
 8007856:	fa09 f303 	lsl.w	r3, r9, r3
 800785a:	4313      	orrs	r3, r2
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	46a2      	mov	sl, r4
 8007860:	e7d2      	b.n	8007808 <_svfiprintf_r+0x9c>
 8007862:	9b03      	ldr	r3, [sp, #12]
 8007864:	1d19      	adds	r1, r3, #4
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	9103      	str	r1, [sp, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	bfbb      	ittet	lt
 800786e:	425b      	neglt	r3, r3
 8007870:	f042 0202 	orrlt.w	r2, r2, #2
 8007874:	9307      	strge	r3, [sp, #28]
 8007876:	9307      	strlt	r3, [sp, #28]
 8007878:	bfb8      	it	lt
 800787a:	9204      	strlt	r2, [sp, #16]
 800787c:	7823      	ldrb	r3, [r4, #0]
 800787e:	2b2e      	cmp	r3, #46	; 0x2e
 8007880:	d10c      	bne.n	800789c <_svfiprintf_r+0x130>
 8007882:	7863      	ldrb	r3, [r4, #1]
 8007884:	2b2a      	cmp	r3, #42	; 0x2a
 8007886:	d135      	bne.n	80078f4 <_svfiprintf_r+0x188>
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	1d1a      	adds	r2, r3, #4
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	9203      	str	r2, [sp, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	bfb8      	it	lt
 8007894:	f04f 33ff 	movlt.w	r3, #4294967295
 8007898:	3402      	adds	r4, #2
 800789a:	9305      	str	r3, [sp, #20]
 800789c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007968 <_svfiprintf_r+0x1fc>
 80078a0:	7821      	ldrb	r1, [r4, #0]
 80078a2:	2203      	movs	r2, #3
 80078a4:	4650      	mov	r0, sl
 80078a6:	f7f8 fca3 	bl	80001f0 <memchr>
 80078aa:	b140      	cbz	r0, 80078be <_svfiprintf_r+0x152>
 80078ac:	2340      	movs	r3, #64	; 0x40
 80078ae:	eba0 000a 	sub.w	r0, r0, sl
 80078b2:	fa03 f000 	lsl.w	r0, r3, r0
 80078b6:	9b04      	ldr	r3, [sp, #16]
 80078b8:	4303      	orrs	r3, r0
 80078ba:	3401      	adds	r4, #1
 80078bc:	9304      	str	r3, [sp, #16]
 80078be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c2:	4826      	ldr	r0, [pc, #152]	; (800795c <_svfiprintf_r+0x1f0>)
 80078c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078c8:	2206      	movs	r2, #6
 80078ca:	f7f8 fc91 	bl	80001f0 <memchr>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d038      	beq.n	8007944 <_svfiprintf_r+0x1d8>
 80078d2:	4b23      	ldr	r3, [pc, #140]	; (8007960 <_svfiprintf_r+0x1f4>)
 80078d4:	bb1b      	cbnz	r3, 800791e <_svfiprintf_r+0x1b2>
 80078d6:	9b03      	ldr	r3, [sp, #12]
 80078d8:	3307      	adds	r3, #7
 80078da:	f023 0307 	bic.w	r3, r3, #7
 80078de:	3308      	adds	r3, #8
 80078e0:	9303      	str	r3, [sp, #12]
 80078e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e4:	4433      	add	r3, r6
 80078e6:	9309      	str	r3, [sp, #36]	; 0x24
 80078e8:	e767      	b.n	80077ba <_svfiprintf_r+0x4e>
 80078ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ee:	460c      	mov	r4, r1
 80078f0:	2001      	movs	r0, #1
 80078f2:	e7a5      	b.n	8007840 <_svfiprintf_r+0xd4>
 80078f4:	2300      	movs	r3, #0
 80078f6:	3401      	adds	r4, #1
 80078f8:	9305      	str	r3, [sp, #20]
 80078fa:	4619      	mov	r1, r3
 80078fc:	f04f 0c0a 	mov.w	ip, #10
 8007900:	4620      	mov	r0, r4
 8007902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007906:	3a30      	subs	r2, #48	; 0x30
 8007908:	2a09      	cmp	r2, #9
 800790a:	d903      	bls.n	8007914 <_svfiprintf_r+0x1a8>
 800790c:	2b00      	cmp	r3, #0
 800790e:	d0c5      	beq.n	800789c <_svfiprintf_r+0x130>
 8007910:	9105      	str	r1, [sp, #20]
 8007912:	e7c3      	b.n	800789c <_svfiprintf_r+0x130>
 8007914:	fb0c 2101 	mla	r1, ip, r1, r2
 8007918:	4604      	mov	r4, r0
 800791a:	2301      	movs	r3, #1
 800791c:	e7f0      	b.n	8007900 <_svfiprintf_r+0x194>
 800791e:	ab03      	add	r3, sp, #12
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	462a      	mov	r2, r5
 8007924:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <_svfiprintf_r+0x1f8>)
 8007926:	a904      	add	r1, sp, #16
 8007928:	4638      	mov	r0, r7
 800792a:	f7fc fa49 	bl	8003dc0 <_printf_float>
 800792e:	1c42      	adds	r2, r0, #1
 8007930:	4606      	mov	r6, r0
 8007932:	d1d6      	bne.n	80078e2 <_svfiprintf_r+0x176>
 8007934:	89ab      	ldrh	r3, [r5, #12]
 8007936:	065b      	lsls	r3, r3, #25
 8007938:	f53f af2c 	bmi.w	8007794 <_svfiprintf_r+0x28>
 800793c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800793e:	b01d      	add	sp, #116	; 0x74
 8007940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007944:	ab03      	add	r3, sp, #12
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	462a      	mov	r2, r5
 800794a:	4b06      	ldr	r3, [pc, #24]	; (8007964 <_svfiprintf_r+0x1f8>)
 800794c:	a904      	add	r1, sp, #16
 800794e:	4638      	mov	r0, r7
 8007950:	f7fc fcda 	bl	8004308 <_printf_i>
 8007954:	e7eb      	b.n	800792e <_svfiprintf_r+0x1c2>
 8007956:	bf00      	nop
 8007958:	08009a34 	.word	0x08009a34
 800795c:	08009a3e 	.word	0x08009a3e
 8007960:	08003dc1 	.word	0x08003dc1
 8007964:	080076b5 	.word	0x080076b5
 8007968:	08009a3a 	.word	0x08009a3a
 800796c:	00000000 	.word	0x00000000

08007970 <nan>:
 8007970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007978 <nan+0x8>
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	00000000 	.word	0x00000000
 800797c:	7ff80000 	.word	0x7ff80000

08007980 <_sbrk_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4d06      	ldr	r5, [pc, #24]	; (800799c <_sbrk_r+0x1c>)
 8007984:	2300      	movs	r3, #0
 8007986:	4604      	mov	r4, r0
 8007988:	4608      	mov	r0, r1
 800798a:	602b      	str	r3, [r5, #0]
 800798c:	f7f9 ff86 	bl	800189c <_sbrk>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_sbrk_r+0x1a>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_sbrk_r+0x1a>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	20000340 	.word	0x20000340

080079a0 <strncmp>:
 80079a0:	b510      	push	{r4, lr}
 80079a2:	b17a      	cbz	r2, 80079c4 <strncmp+0x24>
 80079a4:	4603      	mov	r3, r0
 80079a6:	3901      	subs	r1, #1
 80079a8:	1884      	adds	r4, r0, r2
 80079aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80079ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80079b2:	4290      	cmp	r0, r2
 80079b4:	d101      	bne.n	80079ba <strncmp+0x1a>
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	d101      	bne.n	80079be <strncmp+0x1e>
 80079ba:	1a80      	subs	r0, r0, r2
 80079bc:	bd10      	pop	{r4, pc}
 80079be:	2800      	cmp	r0, #0
 80079c0:	d1f3      	bne.n	80079aa <strncmp+0xa>
 80079c2:	e7fa      	b.n	80079ba <strncmp+0x1a>
 80079c4:	4610      	mov	r0, r2
 80079c6:	e7f9      	b.n	80079bc <strncmp+0x1c>

080079c8 <__ascii_wctomb>:
 80079c8:	b149      	cbz	r1, 80079de <__ascii_wctomb+0x16>
 80079ca:	2aff      	cmp	r2, #255	; 0xff
 80079cc:	bf85      	ittet	hi
 80079ce:	238a      	movhi	r3, #138	; 0x8a
 80079d0:	6003      	strhi	r3, [r0, #0]
 80079d2:	700a      	strbls	r2, [r1, #0]
 80079d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80079d8:	bf98      	it	ls
 80079da:	2001      	movls	r0, #1
 80079dc:	4770      	bx	lr
 80079de:	4608      	mov	r0, r1
 80079e0:	4770      	bx	lr
	...

080079e4 <__assert_func>:
 80079e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079e6:	4614      	mov	r4, r2
 80079e8:	461a      	mov	r2, r3
 80079ea:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <__assert_func+0x2c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4605      	mov	r5, r0
 80079f0:	68d8      	ldr	r0, [r3, #12]
 80079f2:	b14c      	cbz	r4, 8007a08 <__assert_func+0x24>
 80079f4:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <__assert_func+0x30>)
 80079f6:	9100      	str	r1, [sp, #0]
 80079f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079fc:	4906      	ldr	r1, [pc, #24]	; (8007a18 <__assert_func+0x34>)
 80079fe:	462b      	mov	r3, r5
 8007a00:	f000 f80e 	bl	8007a20 <fiprintf>
 8007a04:	f000 fa8c 	bl	8007f20 <abort>
 8007a08:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <__assert_func+0x38>)
 8007a0a:	461c      	mov	r4, r3
 8007a0c:	e7f3      	b.n	80079f6 <__assert_func+0x12>
 8007a0e:	bf00      	nop
 8007a10:	20000010 	.word	0x20000010
 8007a14:	08009a45 	.word	0x08009a45
 8007a18:	08009a52 	.word	0x08009a52
 8007a1c:	08009a80 	.word	0x08009a80

08007a20 <fiprintf>:
 8007a20:	b40e      	push	{r1, r2, r3}
 8007a22:	b503      	push	{r0, r1, lr}
 8007a24:	4601      	mov	r1, r0
 8007a26:	ab03      	add	r3, sp, #12
 8007a28:	4805      	ldr	r0, [pc, #20]	; (8007a40 <fiprintf+0x20>)
 8007a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2e:	6800      	ldr	r0, [r0, #0]
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	f000 f885 	bl	8007b40 <_vfiprintf_r>
 8007a36:	b002      	add	sp, #8
 8007a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a3c:	b003      	add	sp, #12
 8007a3e:	4770      	bx	lr
 8007a40:	20000010 	.word	0x20000010

08007a44 <memmove>:
 8007a44:	4288      	cmp	r0, r1
 8007a46:	b510      	push	{r4, lr}
 8007a48:	eb01 0402 	add.w	r4, r1, r2
 8007a4c:	d902      	bls.n	8007a54 <memmove+0x10>
 8007a4e:	4284      	cmp	r4, r0
 8007a50:	4623      	mov	r3, r4
 8007a52:	d807      	bhi.n	8007a64 <memmove+0x20>
 8007a54:	1e43      	subs	r3, r0, #1
 8007a56:	42a1      	cmp	r1, r4
 8007a58:	d008      	beq.n	8007a6c <memmove+0x28>
 8007a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a62:	e7f8      	b.n	8007a56 <memmove+0x12>
 8007a64:	4402      	add	r2, r0
 8007a66:	4601      	mov	r1, r0
 8007a68:	428a      	cmp	r2, r1
 8007a6a:	d100      	bne.n	8007a6e <memmove+0x2a>
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a76:	e7f7      	b.n	8007a68 <memmove+0x24>

08007a78 <__malloc_lock>:
 8007a78:	4801      	ldr	r0, [pc, #4]	; (8007a80 <__malloc_lock+0x8>)
 8007a7a:	f000 bc11 	b.w	80082a0 <__retarget_lock_acquire_recursive>
 8007a7e:	bf00      	nop
 8007a80:	20000344 	.word	0x20000344

08007a84 <__malloc_unlock>:
 8007a84:	4801      	ldr	r0, [pc, #4]	; (8007a8c <__malloc_unlock+0x8>)
 8007a86:	f000 bc0c 	b.w	80082a2 <__retarget_lock_release_recursive>
 8007a8a:	bf00      	nop
 8007a8c:	20000344 	.word	0x20000344

08007a90 <_realloc_r>:
 8007a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a94:	4680      	mov	r8, r0
 8007a96:	4614      	mov	r4, r2
 8007a98:	460e      	mov	r6, r1
 8007a9a:	b921      	cbnz	r1, 8007aa6 <_realloc_r+0x16>
 8007a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	f7ff bd93 	b.w	80075cc <_malloc_r>
 8007aa6:	b92a      	cbnz	r2, 8007ab4 <_realloc_r+0x24>
 8007aa8:	f7ff fd24 	bl	80074f4 <_free_r>
 8007aac:	4625      	mov	r5, r4
 8007aae:	4628      	mov	r0, r5
 8007ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab4:	f000 fc5c 	bl	8008370 <_malloc_usable_size_r>
 8007ab8:	4284      	cmp	r4, r0
 8007aba:	4607      	mov	r7, r0
 8007abc:	d802      	bhi.n	8007ac4 <_realloc_r+0x34>
 8007abe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ac2:	d812      	bhi.n	8007aea <_realloc_r+0x5a>
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	f7ff fd80 	bl	80075cc <_malloc_r>
 8007acc:	4605      	mov	r5, r0
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d0ed      	beq.n	8007aae <_realloc_r+0x1e>
 8007ad2:	42bc      	cmp	r4, r7
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	bf28      	it	cs
 8007ada:	463a      	movcs	r2, r7
 8007adc:	f7ff f824 	bl	8006b28 <memcpy>
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4640      	mov	r0, r8
 8007ae4:	f7ff fd06 	bl	80074f4 <_free_r>
 8007ae8:	e7e1      	b.n	8007aae <_realloc_r+0x1e>
 8007aea:	4635      	mov	r5, r6
 8007aec:	e7df      	b.n	8007aae <_realloc_r+0x1e>

08007aee <__sfputc_r>:
 8007aee:	6893      	ldr	r3, [r2, #8]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	b410      	push	{r4}
 8007af6:	6093      	str	r3, [r2, #8]
 8007af8:	da08      	bge.n	8007b0c <__sfputc_r+0x1e>
 8007afa:	6994      	ldr	r4, [r2, #24]
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	db01      	blt.n	8007b04 <__sfputc_r+0x16>
 8007b00:	290a      	cmp	r1, #10
 8007b02:	d103      	bne.n	8007b0c <__sfputc_r+0x1e>
 8007b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b08:	f000 b94a 	b.w	8007da0 <__swbuf_r>
 8007b0c:	6813      	ldr	r3, [r2, #0]
 8007b0e:	1c58      	adds	r0, r3, #1
 8007b10:	6010      	str	r0, [r2, #0]
 8007b12:	7019      	strb	r1, [r3, #0]
 8007b14:	4608      	mov	r0, r1
 8007b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <__sfputs_r>:
 8007b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1e:	4606      	mov	r6, r0
 8007b20:	460f      	mov	r7, r1
 8007b22:	4614      	mov	r4, r2
 8007b24:	18d5      	adds	r5, r2, r3
 8007b26:	42ac      	cmp	r4, r5
 8007b28:	d101      	bne.n	8007b2e <__sfputs_r+0x12>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e007      	b.n	8007b3e <__sfputs_r+0x22>
 8007b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b32:	463a      	mov	r2, r7
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7ff ffda 	bl	8007aee <__sfputc_r>
 8007b3a:	1c43      	adds	r3, r0, #1
 8007b3c:	d1f3      	bne.n	8007b26 <__sfputs_r+0xa>
 8007b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b40 <_vfiprintf_r>:
 8007b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b44:	460d      	mov	r5, r1
 8007b46:	b09d      	sub	sp, #116	; 0x74
 8007b48:	4614      	mov	r4, r2
 8007b4a:	4698      	mov	r8, r3
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	b118      	cbz	r0, 8007b58 <_vfiprintf_r+0x18>
 8007b50:	6983      	ldr	r3, [r0, #24]
 8007b52:	b90b      	cbnz	r3, 8007b58 <_vfiprintf_r+0x18>
 8007b54:	f000 fb06 	bl	8008164 <__sinit>
 8007b58:	4b89      	ldr	r3, [pc, #548]	; (8007d80 <_vfiprintf_r+0x240>)
 8007b5a:	429d      	cmp	r5, r3
 8007b5c:	d11b      	bne.n	8007b96 <_vfiprintf_r+0x56>
 8007b5e:	6875      	ldr	r5, [r6, #4]
 8007b60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b62:	07d9      	lsls	r1, r3, #31
 8007b64:	d405      	bmi.n	8007b72 <_vfiprintf_r+0x32>
 8007b66:	89ab      	ldrh	r3, [r5, #12]
 8007b68:	059a      	lsls	r2, r3, #22
 8007b6a:	d402      	bmi.n	8007b72 <_vfiprintf_r+0x32>
 8007b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b6e:	f000 fb97 	bl	80082a0 <__retarget_lock_acquire_recursive>
 8007b72:	89ab      	ldrh	r3, [r5, #12]
 8007b74:	071b      	lsls	r3, r3, #28
 8007b76:	d501      	bpl.n	8007b7c <_vfiprintf_r+0x3c>
 8007b78:	692b      	ldr	r3, [r5, #16]
 8007b7a:	b9eb      	cbnz	r3, 8007bb8 <_vfiprintf_r+0x78>
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f000 f960 	bl	8007e44 <__swsetup_r>
 8007b84:	b1c0      	cbz	r0, 8007bb8 <_vfiprintf_r+0x78>
 8007b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b88:	07dc      	lsls	r4, r3, #31
 8007b8a:	d50e      	bpl.n	8007baa <_vfiprintf_r+0x6a>
 8007b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b90:	b01d      	add	sp, #116	; 0x74
 8007b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b96:	4b7b      	ldr	r3, [pc, #492]	; (8007d84 <_vfiprintf_r+0x244>)
 8007b98:	429d      	cmp	r5, r3
 8007b9a:	d101      	bne.n	8007ba0 <_vfiprintf_r+0x60>
 8007b9c:	68b5      	ldr	r5, [r6, #8]
 8007b9e:	e7df      	b.n	8007b60 <_vfiprintf_r+0x20>
 8007ba0:	4b79      	ldr	r3, [pc, #484]	; (8007d88 <_vfiprintf_r+0x248>)
 8007ba2:	429d      	cmp	r5, r3
 8007ba4:	bf08      	it	eq
 8007ba6:	68f5      	ldreq	r5, [r6, #12]
 8007ba8:	e7da      	b.n	8007b60 <_vfiprintf_r+0x20>
 8007baa:	89ab      	ldrh	r3, [r5, #12]
 8007bac:	0598      	lsls	r0, r3, #22
 8007bae:	d4ed      	bmi.n	8007b8c <_vfiprintf_r+0x4c>
 8007bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bb2:	f000 fb76 	bl	80082a2 <__retarget_lock_release_recursive>
 8007bb6:	e7e9      	b.n	8007b8c <_vfiprintf_r+0x4c>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	9309      	str	r3, [sp, #36]	; 0x24
 8007bbc:	2320      	movs	r3, #32
 8007bbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bc6:	2330      	movs	r3, #48	; 0x30
 8007bc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d8c <_vfiprintf_r+0x24c>
 8007bcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bd0:	f04f 0901 	mov.w	r9, #1
 8007bd4:	4623      	mov	r3, r4
 8007bd6:	469a      	mov	sl, r3
 8007bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bdc:	b10a      	cbz	r2, 8007be2 <_vfiprintf_r+0xa2>
 8007bde:	2a25      	cmp	r2, #37	; 0x25
 8007be0:	d1f9      	bne.n	8007bd6 <_vfiprintf_r+0x96>
 8007be2:	ebba 0b04 	subs.w	fp, sl, r4
 8007be6:	d00b      	beq.n	8007c00 <_vfiprintf_r+0xc0>
 8007be8:	465b      	mov	r3, fp
 8007bea:	4622      	mov	r2, r4
 8007bec:	4629      	mov	r1, r5
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f7ff ff94 	bl	8007b1c <__sfputs_r>
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	f000 80aa 	beq.w	8007d4e <_vfiprintf_r+0x20e>
 8007bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bfc:	445a      	add	r2, fp
 8007bfe:	9209      	str	r2, [sp, #36]	; 0x24
 8007c00:	f89a 3000 	ldrb.w	r3, [sl]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80a2 	beq.w	8007d4e <_vfiprintf_r+0x20e>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c14:	f10a 0a01 	add.w	sl, sl, #1
 8007c18:	9304      	str	r3, [sp, #16]
 8007c1a:	9307      	str	r3, [sp, #28]
 8007c1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c20:	931a      	str	r3, [sp, #104]	; 0x68
 8007c22:	4654      	mov	r4, sl
 8007c24:	2205      	movs	r2, #5
 8007c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2a:	4858      	ldr	r0, [pc, #352]	; (8007d8c <_vfiprintf_r+0x24c>)
 8007c2c:	f7f8 fae0 	bl	80001f0 <memchr>
 8007c30:	9a04      	ldr	r2, [sp, #16]
 8007c32:	b9d8      	cbnz	r0, 8007c6c <_vfiprintf_r+0x12c>
 8007c34:	06d1      	lsls	r1, r2, #27
 8007c36:	bf44      	itt	mi
 8007c38:	2320      	movmi	r3, #32
 8007c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c3e:	0713      	lsls	r3, r2, #28
 8007c40:	bf44      	itt	mi
 8007c42:	232b      	movmi	r3, #43	; 0x2b
 8007c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c48:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c4e:	d015      	beq.n	8007c7c <_vfiprintf_r+0x13c>
 8007c50:	9a07      	ldr	r2, [sp, #28]
 8007c52:	4654      	mov	r4, sl
 8007c54:	2000      	movs	r0, #0
 8007c56:	f04f 0c0a 	mov.w	ip, #10
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c60:	3b30      	subs	r3, #48	; 0x30
 8007c62:	2b09      	cmp	r3, #9
 8007c64:	d94e      	bls.n	8007d04 <_vfiprintf_r+0x1c4>
 8007c66:	b1b0      	cbz	r0, 8007c96 <_vfiprintf_r+0x156>
 8007c68:	9207      	str	r2, [sp, #28]
 8007c6a:	e014      	b.n	8007c96 <_vfiprintf_r+0x156>
 8007c6c:	eba0 0308 	sub.w	r3, r0, r8
 8007c70:	fa09 f303 	lsl.w	r3, r9, r3
 8007c74:	4313      	orrs	r3, r2
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	46a2      	mov	sl, r4
 8007c7a:	e7d2      	b.n	8007c22 <_vfiprintf_r+0xe2>
 8007c7c:	9b03      	ldr	r3, [sp, #12]
 8007c7e:	1d19      	adds	r1, r3, #4
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	9103      	str	r1, [sp, #12]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	bfbb      	ittet	lt
 8007c88:	425b      	neglt	r3, r3
 8007c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c8e:	9307      	strge	r3, [sp, #28]
 8007c90:	9307      	strlt	r3, [sp, #28]
 8007c92:	bfb8      	it	lt
 8007c94:	9204      	strlt	r2, [sp, #16]
 8007c96:	7823      	ldrb	r3, [r4, #0]
 8007c98:	2b2e      	cmp	r3, #46	; 0x2e
 8007c9a:	d10c      	bne.n	8007cb6 <_vfiprintf_r+0x176>
 8007c9c:	7863      	ldrb	r3, [r4, #1]
 8007c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca0:	d135      	bne.n	8007d0e <_vfiprintf_r+0x1ce>
 8007ca2:	9b03      	ldr	r3, [sp, #12]
 8007ca4:	1d1a      	adds	r2, r3, #4
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	9203      	str	r2, [sp, #12]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bfb8      	it	lt
 8007cae:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cb2:	3402      	adds	r4, #2
 8007cb4:	9305      	str	r3, [sp, #20]
 8007cb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d9c <_vfiprintf_r+0x25c>
 8007cba:	7821      	ldrb	r1, [r4, #0]
 8007cbc:	2203      	movs	r2, #3
 8007cbe:	4650      	mov	r0, sl
 8007cc0:	f7f8 fa96 	bl	80001f0 <memchr>
 8007cc4:	b140      	cbz	r0, 8007cd8 <_vfiprintf_r+0x198>
 8007cc6:	2340      	movs	r3, #64	; 0x40
 8007cc8:	eba0 000a 	sub.w	r0, r0, sl
 8007ccc:	fa03 f000 	lsl.w	r0, r3, r0
 8007cd0:	9b04      	ldr	r3, [sp, #16]
 8007cd2:	4303      	orrs	r3, r0
 8007cd4:	3401      	adds	r4, #1
 8007cd6:	9304      	str	r3, [sp, #16]
 8007cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cdc:	482c      	ldr	r0, [pc, #176]	; (8007d90 <_vfiprintf_r+0x250>)
 8007cde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ce2:	2206      	movs	r2, #6
 8007ce4:	f7f8 fa84 	bl	80001f0 <memchr>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d03f      	beq.n	8007d6c <_vfiprintf_r+0x22c>
 8007cec:	4b29      	ldr	r3, [pc, #164]	; (8007d94 <_vfiprintf_r+0x254>)
 8007cee:	bb1b      	cbnz	r3, 8007d38 <_vfiprintf_r+0x1f8>
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	3307      	adds	r3, #7
 8007cf4:	f023 0307 	bic.w	r3, r3, #7
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	9303      	str	r3, [sp, #12]
 8007cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cfe:	443b      	add	r3, r7
 8007d00:	9309      	str	r3, [sp, #36]	; 0x24
 8007d02:	e767      	b.n	8007bd4 <_vfiprintf_r+0x94>
 8007d04:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d08:	460c      	mov	r4, r1
 8007d0a:	2001      	movs	r0, #1
 8007d0c:	e7a5      	b.n	8007c5a <_vfiprintf_r+0x11a>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	3401      	adds	r4, #1
 8007d12:	9305      	str	r3, [sp, #20]
 8007d14:	4619      	mov	r1, r3
 8007d16:	f04f 0c0a 	mov.w	ip, #10
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d20:	3a30      	subs	r2, #48	; 0x30
 8007d22:	2a09      	cmp	r2, #9
 8007d24:	d903      	bls.n	8007d2e <_vfiprintf_r+0x1ee>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0c5      	beq.n	8007cb6 <_vfiprintf_r+0x176>
 8007d2a:	9105      	str	r1, [sp, #20]
 8007d2c:	e7c3      	b.n	8007cb6 <_vfiprintf_r+0x176>
 8007d2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d32:	4604      	mov	r4, r0
 8007d34:	2301      	movs	r3, #1
 8007d36:	e7f0      	b.n	8007d1a <_vfiprintf_r+0x1da>
 8007d38:	ab03      	add	r3, sp, #12
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	462a      	mov	r2, r5
 8007d3e:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <_vfiprintf_r+0x258>)
 8007d40:	a904      	add	r1, sp, #16
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7fc f83c 	bl	8003dc0 <_printf_float>
 8007d48:	4607      	mov	r7, r0
 8007d4a:	1c78      	adds	r0, r7, #1
 8007d4c:	d1d6      	bne.n	8007cfc <_vfiprintf_r+0x1bc>
 8007d4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d50:	07d9      	lsls	r1, r3, #31
 8007d52:	d405      	bmi.n	8007d60 <_vfiprintf_r+0x220>
 8007d54:	89ab      	ldrh	r3, [r5, #12]
 8007d56:	059a      	lsls	r2, r3, #22
 8007d58:	d402      	bmi.n	8007d60 <_vfiprintf_r+0x220>
 8007d5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d5c:	f000 faa1 	bl	80082a2 <__retarget_lock_release_recursive>
 8007d60:	89ab      	ldrh	r3, [r5, #12]
 8007d62:	065b      	lsls	r3, r3, #25
 8007d64:	f53f af12 	bmi.w	8007b8c <_vfiprintf_r+0x4c>
 8007d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d6a:	e711      	b.n	8007b90 <_vfiprintf_r+0x50>
 8007d6c:	ab03      	add	r3, sp, #12
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	462a      	mov	r2, r5
 8007d72:	4b09      	ldr	r3, [pc, #36]	; (8007d98 <_vfiprintf_r+0x258>)
 8007d74:	a904      	add	r1, sp, #16
 8007d76:	4630      	mov	r0, r6
 8007d78:	f7fc fac6 	bl	8004308 <_printf_i>
 8007d7c:	e7e4      	b.n	8007d48 <_vfiprintf_r+0x208>
 8007d7e:	bf00      	nop
 8007d80:	08009aa4 	.word	0x08009aa4
 8007d84:	08009ac4 	.word	0x08009ac4
 8007d88:	08009a84 	.word	0x08009a84
 8007d8c:	08009a34 	.word	0x08009a34
 8007d90:	08009a3e 	.word	0x08009a3e
 8007d94:	08003dc1 	.word	0x08003dc1
 8007d98:	08007b1d 	.word	0x08007b1d
 8007d9c:	08009a3a 	.word	0x08009a3a

08007da0 <__swbuf_r>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	460e      	mov	r6, r1
 8007da4:	4614      	mov	r4, r2
 8007da6:	4605      	mov	r5, r0
 8007da8:	b118      	cbz	r0, 8007db2 <__swbuf_r+0x12>
 8007daa:	6983      	ldr	r3, [r0, #24]
 8007dac:	b90b      	cbnz	r3, 8007db2 <__swbuf_r+0x12>
 8007dae:	f000 f9d9 	bl	8008164 <__sinit>
 8007db2:	4b21      	ldr	r3, [pc, #132]	; (8007e38 <__swbuf_r+0x98>)
 8007db4:	429c      	cmp	r4, r3
 8007db6:	d12b      	bne.n	8007e10 <__swbuf_r+0x70>
 8007db8:	686c      	ldr	r4, [r5, #4]
 8007dba:	69a3      	ldr	r3, [r4, #24]
 8007dbc:	60a3      	str	r3, [r4, #8]
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	071a      	lsls	r2, r3, #28
 8007dc2:	d52f      	bpl.n	8007e24 <__swbuf_r+0x84>
 8007dc4:	6923      	ldr	r3, [r4, #16]
 8007dc6:	b36b      	cbz	r3, 8007e24 <__swbuf_r+0x84>
 8007dc8:	6923      	ldr	r3, [r4, #16]
 8007dca:	6820      	ldr	r0, [r4, #0]
 8007dcc:	1ac0      	subs	r0, r0, r3
 8007dce:	6963      	ldr	r3, [r4, #20]
 8007dd0:	b2f6      	uxtb	r6, r6
 8007dd2:	4283      	cmp	r3, r0
 8007dd4:	4637      	mov	r7, r6
 8007dd6:	dc04      	bgt.n	8007de2 <__swbuf_r+0x42>
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f000 f92e 	bl	800803c <_fflush_r>
 8007de0:	bb30      	cbnz	r0, 8007e30 <__swbuf_r+0x90>
 8007de2:	68a3      	ldr	r3, [r4, #8]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	60a3      	str	r3, [r4, #8]
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	6022      	str	r2, [r4, #0]
 8007dee:	701e      	strb	r6, [r3, #0]
 8007df0:	6963      	ldr	r3, [r4, #20]
 8007df2:	3001      	adds	r0, #1
 8007df4:	4283      	cmp	r3, r0
 8007df6:	d004      	beq.n	8007e02 <__swbuf_r+0x62>
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	07db      	lsls	r3, r3, #31
 8007dfc:	d506      	bpl.n	8007e0c <__swbuf_r+0x6c>
 8007dfe:	2e0a      	cmp	r6, #10
 8007e00:	d104      	bne.n	8007e0c <__swbuf_r+0x6c>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 f919 	bl	800803c <_fflush_r>
 8007e0a:	b988      	cbnz	r0, 8007e30 <__swbuf_r+0x90>
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e10:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <__swbuf_r+0x9c>)
 8007e12:	429c      	cmp	r4, r3
 8007e14:	d101      	bne.n	8007e1a <__swbuf_r+0x7a>
 8007e16:	68ac      	ldr	r4, [r5, #8]
 8007e18:	e7cf      	b.n	8007dba <__swbuf_r+0x1a>
 8007e1a:	4b09      	ldr	r3, [pc, #36]	; (8007e40 <__swbuf_r+0xa0>)
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	bf08      	it	eq
 8007e20:	68ec      	ldreq	r4, [r5, #12]
 8007e22:	e7ca      	b.n	8007dba <__swbuf_r+0x1a>
 8007e24:	4621      	mov	r1, r4
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 f80c 	bl	8007e44 <__swsetup_r>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d0cb      	beq.n	8007dc8 <__swbuf_r+0x28>
 8007e30:	f04f 37ff 	mov.w	r7, #4294967295
 8007e34:	e7ea      	b.n	8007e0c <__swbuf_r+0x6c>
 8007e36:	bf00      	nop
 8007e38:	08009aa4 	.word	0x08009aa4
 8007e3c:	08009ac4 	.word	0x08009ac4
 8007e40:	08009a84 	.word	0x08009a84

08007e44 <__swsetup_r>:
 8007e44:	4b32      	ldr	r3, [pc, #200]	; (8007f10 <__swsetup_r+0xcc>)
 8007e46:	b570      	push	{r4, r5, r6, lr}
 8007e48:	681d      	ldr	r5, [r3, #0]
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	b125      	cbz	r5, 8007e5a <__swsetup_r+0x16>
 8007e50:	69ab      	ldr	r3, [r5, #24]
 8007e52:	b913      	cbnz	r3, 8007e5a <__swsetup_r+0x16>
 8007e54:	4628      	mov	r0, r5
 8007e56:	f000 f985 	bl	8008164 <__sinit>
 8007e5a:	4b2e      	ldr	r3, [pc, #184]	; (8007f14 <__swsetup_r+0xd0>)
 8007e5c:	429c      	cmp	r4, r3
 8007e5e:	d10f      	bne.n	8007e80 <__swsetup_r+0x3c>
 8007e60:	686c      	ldr	r4, [r5, #4]
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e68:	0719      	lsls	r1, r3, #28
 8007e6a:	d42c      	bmi.n	8007ec6 <__swsetup_r+0x82>
 8007e6c:	06dd      	lsls	r5, r3, #27
 8007e6e:	d411      	bmi.n	8007e94 <__swsetup_r+0x50>
 8007e70:	2309      	movs	r3, #9
 8007e72:	6033      	str	r3, [r6, #0]
 8007e74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7e:	e03e      	b.n	8007efe <__swsetup_r+0xba>
 8007e80:	4b25      	ldr	r3, [pc, #148]	; (8007f18 <__swsetup_r+0xd4>)
 8007e82:	429c      	cmp	r4, r3
 8007e84:	d101      	bne.n	8007e8a <__swsetup_r+0x46>
 8007e86:	68ac      	ldr	r4, [r5, #8]
 8007e88:	e7eb      	b.n	8007e62 <__swsetup_r+0x1e>
 8007e8a:	4b24      	ldr	r3, [pc, #144]	; (8007f1c <__swsetup_r+0xd8>)
 8007e8c:	429c      	cmp	r4, r3
 8007e8e:	bf08      	it	eq
 8007e90:	68ec      	ldreq	r4, [r5, #12]
 8007e92:	e7e6      	b.n	8007e62 <__swsetup_r+0x1e>
 8007e94:	0758      	lsls	r0, r3, #29
 8007e96:	d512      	bpl.n	8007ebe <__swsetup_r+0x7a>
 8007e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e9a:	b141      	cbz	r1, 8007eae <__swsetup_r+0x6a>
 8007e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ea0:	4299      	cmp	r1, r3
 8007ea2:	d002      	beq.n	8007eaa <__swsetup_r+0x66>
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7ff fb25 	bl	80074f4 <_free_r>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6363      	str	r3, [r4, #52]	; 0x34
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6063      	str	r3, [r4, #4]
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	f043 0308 	orr.w	r3, r3, #8
 8007ec4:	81a3      	strh	r3, [r4, #12]
 8007ec6:	6923      	ldr	r3, [r4, #16]
 8007ec8:	b94b      	cbnz	r3, 8007ede <__swsetup_r+0x9a>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed4:	d003      	beq.n	8007ede <__swsetup_r+0x9a>
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f000 fa09 	bl	80082f0 <__smakebuf_r>
 8007ede:	89a0      	ldrh	r0, [r4, #12]
 8007ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee4:	f010 0301 	ands.w	r3, r0, #1
 8007ee8:	d00a      	beq.n	8007f00 <__swsetup_r+0xbc>
 8007eea:	2300      	movs	r3, #0
 8007eec:	60a3      	str	r3, [r4, #8]
 8007eee:	6963      	ldr	r3, [r4, #20]
 8007ef0:	425b      	negs	r3, r3
 8007ef2:	61a3      	str	r3, [r4, #24]
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	b943      	cbnz	r3, 8007f0a <__swsetup_r+0xc6>
 8007ef8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007efc:	d1ba      	bne.n	8007e74 <__swsetup_r+0x30>
 8007efe:	bd70      	pop	{r4, r5, r6, pc}
 8007f00:	0781      	lsls	r1, r0, #30
 8007f02:	bf58      	it	pl
 8007f04:	6963      	ldrpl	r3, [r4, #20]
 8007f06:	60a3      	str	r3, [r4, #8]
 8007f08:	e7f4      	b.n	8007ef4 <__swsetup_r+0xb0>
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	e7f7      	b.n	8007efe <__swsetup_r+0xba>
 8007f0e:	bf00      	nop
 8007f10:	20000010 	.word	0x20000010
 8007f14:	08009aa4 	.word	0x08009aa4
 8007f18:	08009ac4 	.word	0x08009ac4
 8007f1c:	08009a84 	.word	0x08009a84

08007f20 <abort>:
 8007f20:	b508      	push	{r3, lr}
 8007f22:	2006      	movs	r0, #6
 8007f24:	f000 fa54 	bl	80083d0 <raise>
 8007f28:	2001      	movs	r0, #1
 8007f2a:	f7f9 fc3f 	bl	80017ac <_exit>
	...

08007f30 <__sflush_r>:
 8007f30:	898a      	ldrh	r2, [r1, #12]
 8007f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f36:	4605      	mov	r5, r0
 8007f38:	0710      	lsls	r0, r2, #28
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	d458      	bmi.n	8007ff0 <__sflush_r+0xc0>
 8007f3e:	684b      	ldr	r3, [r1, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	dc05      	bgt.n	8007f50 <__sflush_r+0x20>
 8007f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	dc02      	bgt.n	8007f50 <__sflush_r+0x20>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f52:	2e00      	cmp	r6, #0
 8007f54:	d0f9      	beq.n	8007f4a <__sflush_r+0x1a>
 8007f56:	2300      	movs	r3, #0
 8007f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f5c:	682f      	ldr	r7, [r5, #0]
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	d032      	beq.n	8007fc8 <__sflush_r+0x98>
 8007f62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	075a      	lsls	r2, r3, #29
 8007f68:	d505      	bpl.n	8007f76 <__sflush_r+0x46>
 8007f6a:	6863      	ldr	r3, [r4, #4]
 8007f6c:	1ac0      	subs	r0, r0, r3
 8007f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f70:	b10b      	cbz	r3, 8007f76 <__sflush_r+0x46>
 8007f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f74:	1ac0      	subs	r0, r0, r3
 8007f76:	2300      	movs	r3, #0
 8007f78:	4602      	mov	r2, r0
 8007f7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f7c:	6a21      	ldr	r1, [r4, #32]
 8007f7e:	4628      	mov	r0, r5
 8007f80:	47b0      	blx	r6
 8007f82:	1c43      	adds	r3, r0, #1
 8007f84:	89a3      	ldrh	r3, [r4, #12]
 8007f86:	d106      	bne.n	8007f96 <__sflush_r+0x66>
 8007f88:	6829      	ldr	r1, [r5, #0]
 8007f8a:	291d      	cmp	r1, #29
 8007f8c:	d82c      	bhi.n	8007fe8 <__sflush_r+0xb8>
 8007f8e:	4a2a      	ldr	r2, [pc, #168]	; (8008038 <__sflush_r+0x108>)
 8007f90:	40ca      	lsrs	r2, r1
 8007f92:	07d6      	lsls	r6, r2, #31
 8007f94:	d528      	bpl.n	8007fe8 <__sflush_r+0xb8>
 8007f96:	2200      	movs	r2, #0
 8007f98:	6062      	str	r2, [r4, #4]
 8007f9a:	04d9      	lsls	r1, r3, #19
 8007f9c:	6922      	ldr	r2, [r4, #16]
 8007f9e:	6022      	str	r2, [r4, #0]
 8007fa0:	d504      	bpl.n	8007fac <__sflush_r+0x7c>
 8007fa2:	1c42      	adds	r2, r0, #1
 8007fa4:	d101      	bne.n	8007faa <__sflush_r+0x7a>
 8007fa6:	682b      	ldr	r3, [r5, #0]
 8007fa8:	b903      	cbnz	r3, 8007fac <__sflush_r+0x7c>
 8007faa:	6560      	str	r0, [r4, #84]	; 0x54
 8007fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fae:	602f      	str	r7, [r5, #0]
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	d0ca      	beq.n	8007f4a <__sflush_r+0x1a>
 8007fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fb8:	4299      	cmp	r1, r3
 8007fba:	d002      	beq.n	8007fc2 <__sflush_r+0x92>
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f7ff fa99 	bl	80074f4 <_free_r>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	6360      	str	r0, [r4, #52]	; 0x34
 8007fc6:	e7c1      	b.n	8007f4c <__sflush_r+0x1c>
 8007fc8:	6a21      	ldr	r1, [r4, #32]
 8007fca:	2301      	movs	r3, #1
 8007fcc:	4628      	mov	r0, r5
 8007fce:	47b0      	blx	r6
 8007fd0:	1c41      	adds	r1, r0, #1
 8007fd2:	d1c7      	bne.n	8007f64 <__sflush_r+0x34>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0c4      	beq.n	8007f64 <__sflush_r+0x34>
 8007fda:	2b1d      	cmp	r3, #29
 8007fdc:	d001      	beq.n	8007fe2 <__sflush_r+0xb2>
 8007fde:	2b16      	cmp	r3, #22
 8007fe0:	d101      	bne.n	8007fe6 <__sflush_r+0xb6>
 8007fe2:	602f      	str	r7, [r5, #0]
 8007fe4:	e7b1      	b.n	8007f4a <__sflush_r+0x1a>
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fec:	81a3      	strh	r3, [r4, #12]
 8007fee:	e7ad      	b.n	8007f4c <__sflush_r+0x1c>
 8007ff0:	690f      	ldr	r7, [r1, #16]
 8007ff2:	2f00      	cmp	r7, #0
 8007ff4:	d0a9      	beq.n	8007f4a <__sflush_r+0x1a>
 8007ff6:	0793      	lsls	r3, r2, #30
 8007ff8:	680e      	ldr	r6, [r1, #0]
 8007ffa:	bf08      	it	eq
 8007ffc:	694b      	ldreq	r3, [r1, #20]
 8007ffe:	600f      	str	r7, [r1, #0]
 8008000:	bf18      	it	ne
 8008002:	2300      	movne	r3, #0
 8008004:	eba6 0807 	sub.w	r8, r6, r7
 8008008:	608b      	str	r3, [r1, #8]
 800800a:	f1b8 0f00 	cmp.w	r8, #0
 800800e:	dd9c      	ble.n	8007f4a <__sflush_r+0x1a>
 8008010:	6a21      	ldr	r1, [r4, #32]
 8008012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008014:	4643      	mov	r3, r8
 8008016:	463a      	mov	r2, r7
 8008018:	4628      	mov	r0, r5
 800801a:	47b0      	blx	r6
 800801c:	2800      	cmp	r0, #0
 800801e:	dc06      	bgt.n	800802e <__sflush_r+0xfe>
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	f04f 30ff 	mov.w	r0, #4294967295
 800802c:	e78e      	b.n	8007f4c <__sflush_r+0x1c>
 800802e:	4407      	add	r7, r0
 8008030:	eba8 0800 	sub.w	r8, r8, r0
 8008034:	e7e9      	b.n	800800a <__sflush_r+0xda>
 8008036:	bf00      	nop
 8008038:	20400001 	.word	0x20400001

0800803c <_fflush_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	690b      	ldr	r3, [r1, #16]
 8008040:	4605      	mov	r5, r0
 8008042:	460c      	mov	r4, r1
 8008044:	b913      	cbnz	r3, 800804c <_fflush_r+0x10>
 8008046:	2500      	movs	r5, #0
 8008048:	4628      	mov	r0, r5
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	b118      	cbz	r0, 8008056 <_fflush_r+0x1a>
 800804e:	6983      	ldr	r3, [r0, #24]
 8008050:	b90b      	cbnz	r3, 8008056 <_fflush_r+0x1a>
 8008052:	f000 f887 	bl	8008164 <__sinit>
 8008056:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <_fflush_r+0x6c>)
 8008058:	429c      	cmp	r4, r3
 800805a:	d11b      	bne.n	8008094 <_fflush_r+0x58>
 800805c:	686c      	ldr	r4, [r5, #4]
 800805e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0ef      	beq.n	8008046 <_fflush_r+0xa>
 8008066:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008068:	07d0      	lsls	r0, r2, #31
 800806a:	d404      	bmi.n	8008076 <_fflush_r+0x3a>
 800806c:	0599      	lsls	r1, r3, #22
 800806e:	d402      	bmi.n	8008076 <_fflush_r+0x3a>
 8008070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008072:	f000 f915 	bl	80082a0 <__retarget_lock_acquire_recursive>
 8008076:	4628      	mov	r0, r5
 8008078:	4621      	mov	r1, r4
 800807a:	f7ff ff59 	bl	8007f30 <__sflush_r>
 800807e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008080:	07da      	lsls	r2, r3, #31
 8008082:	4605      	mov	r5, r0
 8008084:	d4e0      	bmi.n	8008048 <_fflush_r+0xc>
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	059b      	lsls	r3, r3, #22
 800808a:	d4dd      	bmi.n	8008048 <_fflush_r+0xc>
 800808c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800808e:	f000 f908 	bl	80082a2 <__retarget_lock_release_recursive>
 8008092:	e7d9      	b.n	8008048 <_fflush_r+0xc>
 8008094:	4b05      	ldr	r3, [pc, #20]	; (80080ac <_fflush_r+0x70>)
 8008096:	429c      	cmp	r4, r3
 8008098:	d101      	bne.n	800809e <_fflush_r+0x62>
 800809a:	68ac      	ldr	r4, [r5, #8]
 800809c:	e7df      	b.n	800805e <_fflush_r+0x22>
 800809e:	4b04      	ldr	r3, [pc, #16]	; (80080b0 <_fflush_r+0x74>)
 80080a0:	429c      	cmp	r4, r3
 80080a2:	bf08      	it	eq
 80080a4:	68ec      	ldreq	r4, [r5, #12]
 80080a6:	e7da      	b.n	800805e <_fflush_r+0x22>
 80080a8:	08009aa4 	.word	0x08009aa4
 80080ac:	08009ac4 	.word	0x08009ac4
 80080b0:	08009a84 	.word	0x08009a84

080080b4 <std>:
 80080b4:	2300      	movs	r3, #0
 80080b6:	b510      	push	{r4, lr}
 80080b8:	4604      	mov	r4, r0
 80080ba:	e9c0 3300 	strd	r3, r3, [r0]
 80080be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080c2:	6083      	str	r3, [r0, #8]
 80080c4:	8181      	strh	r1, [r0, #12]
 80080c6:	6643      	str	r3, [r0, #100]	; 0x64
 80080c8:	81c2      	strh	r2, [r0, #14]
 80080ca:	6183      	str	r3, [r0, #24]
 80080cc:	4619      	mov	r1, r3
 80080ce:	2208      	movs	r2, #8
 80080d0:	305c      	adds	r0, #92	; 0x5c
 80080d2:	f7fb fdcd 	bl	8003c70 <memset>
 80080d6:	4b05      	ldr	r3, [pc, #20]	; (80080ec <std+0x38>)
 80080d8:	6263      	str	r3, [r4, #36]	; 0x24
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <std+0x3c>)
 80080dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80080de:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <std+0x40>)
 80080e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080e2:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <std+0x44>)
 80080e4:	6224      	str	r4, [r4, #32]
 80080e6:	6323      	str	r3, [r4, #48]	; 0x30
 80080e8:	bd10      	pop	{r4, pc}
 80080ea:	bf00      	nop
 80080ec:	08008409 	.word	0x08008409
 80080f0:	0800842b 	.word	0x0800842b
 80080f4:	08008463 	.word	0x08008463
 80080f8:	08008487 	.word	0x08008487

080080fc <_cleanup_r>:
 80080fc:	4901      	ldr	r1, [pc, #4]	; (8008104 <_cleanup_r+0x8>)
 80080fe:	f000 b8af 	b.w	8008260 <_fwalk_reent>
 8008102:	bf00      	nop
 8008104:	0800803d 	.word	0x0800803d

08008108 <__sfmoreglue>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	2268      	movs	r2, #104	; 0x68
 800810c:	1e4d      	subs	r5, r1, #1
 800810e:	4355      	muls	r5, r2
 8008110:	460e      	mov	r6, r1
 8008112:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008116:	f7ff fa59 	bl	80075cc <_malloc_r>
 800811a:	4604      	mov	r4, r0
 800811c:	b140      	cbz	r0, 8008130 <__sfmoreglue+0x28>
 800811e:	2100      	movs	r1, #0
 8008120:	e9c0 1600 	strd	r1, r6, [r0]
 8008124:	300c      	adds	r0, #12
 8008126:	60a0      	str	r0, [r4, #8]
 8008128:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800812c:	f7fb fda0 	bl	8003c70 <memset>
 8008130:	4620      	mov	r0, r4
 8008132:	bd70      	pop	{r4, r5, r6, pc}

08008134 <__sfp_lock_acquire>:
 8008134:	4801      	ldr	r0, [pc, #4]	; (800813c <__sfp_lock_acquire+0x8>)
 8008136:	f000 b8b3 	b.w	80082a0 <__retarget_lock_acquire_recursive>
 800813a:	bf00      	nop
 800813c:	20000345 	.word	0x20000345

08008140 <__sfp_lock_release>:
 8008140:	4801      	ldr	r0, [pc, #4]	; (8008148 <__sfp_lock_release+0x8>)
 8008142:	f000 b8ae 	b.w	80082a2 <__retarget_lock_release_recursive>
 8008146:	bf00      	nop
 8008148:	20000345 	.word	0x20000345

0800814c <__sinit_lock_acquire>:
 800814c:	4801      	ldr	r0, [pc, #4]	; (8008154 <__sinit_lock_acquire+0x8>)
 800814e:	f000 b8a7 	b.w	80082a0 <__retarget_lock_acquire_recursive>
 8008152:	bf00      	nop
 8008154:	20000346 	.word	0x20000346

08008158 <__sinit_lock_release>:
 8008158:	4801      	ldr	r0, [pc, #4]	; (8008160 <__sinit_lock_release+0x8>)
 800815a:	f000 b8a2 	b.w	80082a2 <__retarget_lock_release_recursive>
 800815e:	bf00      	nop
 8008160:	20000346 	.word	0x20000346

08008164 <__sinit>:
 8008164:	b510      	push	{r4, lr}
 8008166:	4604      	mov	r4, r0
 8008168:	f7ff fff0 	bl	800814c <__sinit_lock_acquire>
 800816c:	69a3      	ldr	r3, [r4, #24]
 800816e:	b11b      	cbz	r3, 8008178 <__sinit+0x14>
 8008170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008174:	f7ff bff0 	b.w	8008158 <__sinit_lock_release>
 8008178:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800817c:	6523      	str	r3, [r4, #80]	; 0x50
 800817e:	4b13      	ldr	r3, [pc, #76]	; (80081cc <__sinit+0x68>)
 8008180:	4a13      	ldr	r2, [pc, #76]	; (80081d0 <__sinit+0x6c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	62a2      	str	r2, [r4, #40]	; 0x28
 8008186:	42a3      	cmp	r3, r4
 8008188:	bf04      	itt	eq
 800818a:	2301      	moveq	r3, #1
 800818c:	61a3      	streq	r3, [r4, #24]
 800818e:	4620      	mov	r0, r4
 8008190:	f000 f820 	bl	80081d4 <__sfp>
 8008194:	6060      	str	r0, [r4, #4]
 8008196:	4620      	mov	r0, r4
 8008198:	f000 f81c 	bl	80081d4 <__sfp>
 800819c:	60a0      	str	r0, [r4, #8]
 800819e:	4620      	mov	r0, r4
 80081a0:	f000 f818 	bl	80081d4 <__sfp>
 80081a4:	2200      	movs	r2, #0
 80081a6:	60e0      	str	r0, [r4, #12]
 80081a8:	2104      	movs	r1, #4
 80081aa:	6860      	ldr	r0, [r4, #4]
 80081ac:	f7ff ff82 	bl	80080b4 <std>
 80081b0:	68a0      	ldr	r0, [r4, #8]
 80081b2:	2201      	movs	r2, #1
 80081b4:	2109      	movs	r1, #9
 80081b6:	f7ff ff7d 	bl	80080b4 <std>
 80081ba:	68e0      	ldr	r0, [r4, #12]
 80081bc:	2202      	movs	r2, #2
 80081be:	2112      	movs	r1, #18
 80081c0:	f7ff ff78 	bl	80080b4 <std>
 80081c4:	2301      	movs	r3, #1
 80081c6:	61a3      	str	r3, [r4, #24]
 80081c8:	e7d2      	b.n	8008170 <__sinit+0xc>
 80081ca:	bf00      	nop
 80081cc:	08009640 	.word	0x08009640
 80081d0:	080080fd 	.word	0x080080fd

080081d4 <__sfp>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	4607      	mov	r7, r0
 80081d8:	f7ff ffac 	bl	8008134 <__sfp_lock_acquire>
 80081dc:	4b1e      	ldr	r3, [pc, #120]	; (8008258 <__sfp+0x84>)
 80081de:	681e      	ldr	r6, [r3, #0]
 80081e0:	69b3      	ldr	r3, [r6, #24]
 80081e2:	b913      	cbnz	r3, 80081ea <__sfp+0x16>
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7ff ffbd 	bl	8008164 <__sinit>
 80081ea:	3648      	adds	r6, #72	; 0x48
 80081ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	d503      	bpl.n	80081fc <__sfp+0x28>
 80081f4:	6833      	ldr	r3, [r6, #0]
 80081f6:	b30b      	cbz	r3, 800823c <__sfp+0x68>
 80081f8:	6836      	ldr	r6, [r6, #0]
 80081fa:	e7f7      	b.n	80081ec <__sfp+0x18>
 80081fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008200:	b9d5      	cbnz	r5, 8008238 <__sfp+0x64>
 8008202:	4b16      	ldr	r3, [pc, #88]	; (800825c <__sfp+0x88>)
 8008204:	60e3      	str	r3, [r4, #12]
 8008206:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800820a:	6665      	str	r5, [r4, #100]	; 0x64
 800820c:	f000 f847 	bl	800829e <__retarget_lock_init_recursive>
 8008210:	f7ff ff96 	bl	8008140 <__sfp_lock_release>
 8008214:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008218:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800821c:	6025      	str	r5, [r4, #0]
 800821e:	61a5      	str	r5, [r4, #24]
 8008220:	2208      	movs	r2, #8
 8008222:	4629      	mov	r1, r5
 8008224:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008228:	f7fb fd22 	bl	8003c70 <memset>
 800822c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008230:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008234:	4620      	mov	r0, r4
 8008236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008238:	3468      	adds	r4, #104	; 0x68
 800823a:	e7d9      	b.n	80081f0 <__sfp+0x1c>
 800823c:	2104      	movs	r1, #4
 800823e:	4638      	mov	r0, r7
 8008240:	f7ff ff62 	bl	8008108 <__sfmoreglue>
 8008244:	4604      	mov	r4, r0
 8008246:	6030      	str	r0, [r6, #0]
 8008248:	2800      	cmp	r0, #0
 800824a:	d1d5      	bne.n	80081f8 <__sfp+0x24>
 800824c:	f7ff ff78 	bl	8008140 <__sfp_lock_release>
 8008250:	230c      	movs	r3, #12
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	e7ee      	b.n	8008234 <__sfp+0x60>
 8008256:	bf00      	nop
 8008258:	08009640 	.word	0x08009640
 800825c:	ffff0001 	.word	0xffff0001

08008260 <_fwalk_reent>:
 8008260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008264:	4606      	mov	r6, r0
 8008266:	4688      	mov	r8, r1
 8008268:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800826c:	2700      	movs	r7, #0
 800826e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008272:	f1b9 0901 	subs.w	r9, r9, #1
 8008276:	d505      	bpl.n	8008284 <_fwalk_reent+0x24>
 8008278:	6824      	ldr	r4, [r4, #0]
 800827a:	2c00      	cmp	r4, #0
 800827c:	d1f7      	bne.n	800826e <_fwalk_reent+0xe>
 800827e:	4638      	mov	r0, r7
 8008280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008284:	89ab      	ldrh	r3, [r5, #12]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d907      	bls.n	800829a <_fwalk_reent+0x3a>
 800828a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800828e:	3301      	adds	r3, #1
 8008290:	d003      	beq.n	800829a <_fwalk_reent+0x3a>
 8008292:	4629      	mov	r1, r5
 8008294:	4630      	mov	r0, r6
 8008296:	47c0      	blx	r8
 8008298:	4307      	orrs	r7, r0
 800829a:	3568      	adds	r5, #104	; 0x68
 800829c:	e7e9      	b.n	8008272 <_fwalk_reent+0x12>

0800829e <__retarget_lock_init_recursive>:
 800829e:	4770      	bx	lr

080082a0 <__retarget_lock_acquire_recursive>:
 80082a0:	4770      	bx	lr

080082a2 <__retarget_lock_release_recursive>:
 80082a2:	4770      	bx	lr

080082a4 <__swhatbuf_r>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	460e      	mov	r6, r1
 80082a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ac:	2900      	cmp	r1, #0
 80082ae:	b096      	sub	sp, #88	; 0x58
 80082b0:	4614      	mov	r4, r2
 80082b2:	461d      	mov	r5, r3
 80082b4:	da08      	bge.n	80082c8 <__swhatbuf_r+0x24>
 80082b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	602a      	str	r2, [r5, #0]
 80082be:	061a      	lsls	r2, r3, #24
 80082c0:	d410      	bmi.n	80082e4 <__swhatbuf_r+0x40>
 80082c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082c6:	e00e      	b.n	80082e6 <__swhatbuf_r+0x42>
 80082c8:	466a      	mov	r2, sp
 80082ca:	f000 f903 	bl	80084d4 <_fstat_r>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	dbf1      	blt.n	80082b6 <__swhatbuf_r+0x12>
 80082d2:	9a01      	ldr	r2, [sp, #4]
 80082d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082dc:	425a      	negs	r2, r3
 80082de:	415a      	adcs	r2, r3
 80082e0:	602a      	str	r2, [r5, #0]
 80082e2:	e7ee      	b.n	80082c2 <__swhatbuf_r+0x1e>
 80082e4:	2340      	movs	r3, #64	; 0x40
 80082e6:	2000      	movs	r0, #0
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	b016      	add	sp, #88	; 0x58
 80082ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080082f0 <__smakebuf_r>:
 80082f0:	898b      	ldrh	r3, [r1, #12]
 80082f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082f4:	079d      	lsls	r5, r3, #30
 80082f6:	4606      	mov	r6, r0
 80082f8:	460c      	mov	r4, r1
 80082fa:	d507      	bpl.n	800830c <__smakebuf_r+0x1c>
 80082fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	6123      	str	r3, [r4, #16]
 8008304:	2301      	movs	r3, #1
 8008306:	6163      	str	r3, [r4, #20]
 8008308:	b002      	add	sp, #8
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	ab01      	add	r3, sp, #4
 800830e:	466a      	mov	r2, sp
 8008310:	f7ff ffc8 	bl	80082a4 <__swhatbuf_r>
 8008314:	9900      	ldr	r1, [sp, #0]
 8008316:	4605      	mov	r5, r0
 8008318:	4630      	mov	r0, r6
 800831a:	f7ff f957 	bl	80075cc <_malloc_r>
 800831e:	b948      	cbnz	r0, 8008334 <__smakebuf_r+0x44>
 8008320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008324:	059a      	lsls	r2, r3, #22
 8008326:	d4ef      	bmi.n	8008308 <__smakebuf_r+0x18>
 8008328:	f023 0303 	bic.w	r3, r3, #3
 800832c:	f043 0302 	orr.w	r3, r3, #2
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	e7e3      	b.n	80082fc <__smakebuf_r+0xc>
 8008334:	4b0d      	ldr	r3, [pc, #52]	; (800836c <__smakebuf_r+0x7c>)
 8008336:	62b3      	str	r3, [r6, #40]	; 0x28
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	6020      	str	r0, [r4, #0]
 800833c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	9b00      	ldr	r3, [sp, #0]
 8008344:	6163      	str	r3, [r4, #20]
 8008346:	9b01      	ldr	r3, [sp, #4]
 8008348:	6120      	str	r0, [r4, #16]
 800834a:	b15b      	cbz	r3, 8008364 <__smakebuf_r+0x74>
 800834c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008350:	4630      	mov	r0, r6
 8008352:	f000 f8d1 	bl	80084f8 <_isatty_r>
 8008356:	b128      	cbz	r0, 8008364 <__smakebuf_r+0x74>
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	89a0      	ldrh	r0, [r4, #12]
 8008366:	4305      	orrs	r5, r0
 8008368:	81a5      	strh	r5, [r4, #12]
 800836a:	e7cd      	b.n	8008308 <__smakebuf_r+0x18>
 800836c:	080080fd 	.word	0x080080fd

08008370 <_malloc_usable_size_r>:
 8008370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008374:	1f18      	subs	r0, r3, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	bfbc      	itt	lt
 800837a:	580b      	ldrlt	r3, [r1, r0]
 800837c:	18c0      	addlt	r0, r0, r3
 800837e:	4770      	bx	lr

08008380 <_raise_r>:
 8008380:	291f      	cmp	r1, #31
 8008382:	b538      	push	{r3, r4, r5, lr}
 8008384:	4604      	mov	r4, r0
 8008386:	460d      	mov	r5, r1
 8008388:	d904      	bls.n	8008394 <_raise_r+0x14>
 800838a:	2316      	movs	r3, #22
 800838c:	6003      	str	r3, [r0, #0]
 800838e:	f04f 30ff 	mov.w	r0, #4294967295
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008396:	b112      	cbz	r2, 800839e <_raise_r+0x1e>
 8008398:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800839c:	b94b      	cbnz	r3, 80083b2 <_raise_r+0x32>
 800839e:	4620      	mov	r0, r4
 80083a0:	f000 f830 	bl	8008404 <_getpid_r>
 80083a4:	462a      	mov	r2, r5
 80083a6:	4601      	mov	r1, r0
 80083a8:	4620      	mov	r0, r4
 80083aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ae:	f000 b817 	b.w	80083e0 <_kill_r>
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d00a      	beq.n	80083cc <_raise_r+0x4c>
 80083b6:	1c59      	adds	r1, r3, #1
 80083b8:	d103      	bne.n	80083c2 <_raise_r+0x42>
 80083ba:	2316      	movs	r3, #22
 80083bc:	6003      	str	r3, [r0, #0]
 80083be:	2001      	movs	r0, #1
 80083c0:	e7e7      	b.n	8008392 <_raise_r+0x12>
 80083c2:	2400      	movs	r4, #0
 80083c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083c8:	4628      	mov	r0, r5
 80083ca:	4798      	blx	r3
 80083cc:	2000      	movs	r0, #0
 80083ce:	e7e0      	b.n	8008392 <_raise_r+0x12>

080083d0 <raise>:
 80083d0:	4b02      	ldr	r3, [pc, #8]	; (80083dc <raise+0xc>)
 80083d2:	4601      	mov	r1, r0
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f7ff bfd3 	b.w	8008380 <_raise_r>
 80083da:	bf00      	nop
 80083dc:	20000010 	.word	0x20000010

080083e0 <_kill_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	4d07      	ldr	r5, [pc, #28]	; (8008400 <_kill_r+0x20>)
 80083e4:	2300      	movs	r3, #0
 80083e6:	4604      	mov	r4, r0
 80083e8:	4608      	mov	r0, r1
 80083ea:	4611      	mov	r1, r2
 80083ec:	602b      	str	r3, [r5, #0]
 80083ee:	f7f9 f9cd 	bl	800178c <_kill>
 80083f2:	1c43      	adds	r3, r0, #1
 80083f4:	d102      	bne.n	80083fc <_kill_r+0x1c>
 80083f6:	682b      	ldr	r3, [r5, #0]
 80083f8:	b103      	cbz	r3, 80083fc <_kill_r+0x1c>
 80083fa:	6023      	str	r3, [r4, #0]
 80083fc:	bd38      	pop	{r3, r4, r5, pc}
 80083fe:	bf00      	nop
 8008400:	20000340 	.word	0x20000340

08008404 <_getpid_r>:
 8008404:	f7f9 b9ba 	b.w	800177c <_getpid>

08008408 <__sread>:
 8008408:	b510      	push	{r4, lr}
 800840a:	460c      	mov	r4, r1
 800840c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008410:	f000 f894 	bl	800853c <_read_r>
 8008414:	2800      	cmp	r0, #0
 8008416:	bfab      	itete	ge
 8008418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800841a:	89a3      	ldrhlt	r3, [r4, #12]
 800841c:	181b      	addge	r3, r3, r0
 800841e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008422:	bfac      	ite	ge
 8008424:	6563      	strge	r3, [r4, #84]	; 0x54
 8008426:	81a3      	strhlt	r3, [r4, #12]
 8008428:	bd10      	pop	{r4, pc}

0800842a <__swrite>:
 800842a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842e:	461f      	mov	r7, r3
 8008430:	898b      	ldrh	r3, [r1, #12]
 8008432:	05db      	lsls	r3, r3, #23
 8008434:	4605      	mov	r5, r0
 8008436:	460c      	mov	r4, r1
 8008438:	4616      	mov	r6, r2
 800843a:	d505      	bpl.n	8008448 <__swrite+0x1e>
 800843c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008440:	2302      	movs	r3, #2
 8008442:	2200      	movs	r2, #0
 8008444:	f000 f868 	bl	8008518 <_lseek_r>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	4632      	mov	r2, r6
 8008456:	463b      	mov	r3, r7
 8008458:	4628      	mov	r0, r5
 800845a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800845e:	f000 b817 	b.w	8008490 <_write_r>

08008462 <__sseek>:
 8008462:	b510      	push	{r4, lr}
 8008464:	460c      	mov	r4, r1
 8008466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846a:	f000 f855 	bl	8008518 <_lseek_r>
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	bf15      	itete	ne
 8008474:	6560      	strne	r0, [r4, #84]	; 0x54
 8008476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800847a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800847e:	81a3      	strheq	r3, [r4, #12]
 8008480:	bf18      	it	ne
 8008482:	81a3      	strhne	r3, [r4, #12]
 8008484:	bd10      	pop	{r4, pc}

08008486 <__sclose>:
 8008486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848a:	f000 b813 	b.w	80084b4 <_close_r>
	...

08008490 <_write_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4d07      	ldr	r5, [pc, #28]	; (80084b0 <_write_r+0x20>)
 8008494:	4604      	mov	r4, r0
 8008496:	4608      	mov	r0, r1
 8008498:	4611      	mov	r1, r2
 800849a:	2200      	movs	r2, #0
 800849c:	602a      	str	r2, [r5, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	f7f9 f9ab 	bl	80017fa <_write>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d102      	bne.n	80084ae <_write_r+0x1e>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	b103      	cbz	r3, 80084ae <_write_r+0x1e>
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	20000340 	.word	0x20000340

080084b4 <_close_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4d06      	ldr	r5, [pc, #24]	; (80084d0 <_close_r+0x1c>)
 80084b8:	2300      	movs	r3, #0
 80084ba:	4604      	mov	r4, r0
 80084bc:	4608      	mov	r0, r1
 80084be:	602b      	str	r3, [r5, #0]
 80084c0:	f7f9 f9b7 	bl	8001832 <_close>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_close_r+0x1a>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_close_r+0x1a>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	20000340 	.word	0x20000340

080084d4 <_fstat_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d07      	ldr	r5, [pc, #28]	; (80084f4 <_fstat_r+0x20>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	4611      	mov	r1, r2
 80084e0:	602b      	str	r3, [r5, #0]
 80084e2:	f7f9 f9b2 	bl	800184a <_fstat>
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	d102      	bne.n	80084f0 <_fstat_r+0x1c>
 80084ea:	682b      	ldr	r3, [r5, #0]
 80084ec:	b103      	cbz	r3, 80084f0 <_fstat_r+0x1c>
 80084ee:	6023      	str	r3, [r4, #0]
 80084f0:	bd38      	pop	{r3, r4, r5, pc}
 80084f2:	bf00      	nop
 80084f4:	20000340 	.word	0x20000340

080084f8 <_isatty_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	4d06      	ldr	r5, [pc, #24]	; (8008514 <_isatty_r+0x1c>)
 80084fc:	2300      	movs	r3, #0
 80084fe:	4604      	mov	r4, r0
 8008500:	4608      	mov	r0, r1
 8008502:	602b      	str	r3, [r5, #0]
 8008504:	f7f9 f9b1 	bl	800186a <_isatty>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_isatty_r+0x1a>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	b103      	cbz	r3, 8008512 <_isatty_r+0x1a>
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	20000340 	.word	0x20000340

08008518 <_lseek_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4d07      	ldr	r5, [pc, #28]	; (8008538 <_lseek_r+0x20>)
 800851c:	4604      	mov	r4, r0
 800851e:	4608      	mov	r0, r1
 8008520:	4611      	mov	r1, r2
 8008522:	2200      	movs	r2, #0
 8008524:	602a      	str	r2, [r5, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	f7f9 f9aa 	bl	8001880 <_lseek>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d102      	bne.n	8008536 <_lseek_r+0x1e>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	b103      	cbz	r3, 8008536 <_lseek_r+0x1e>
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	20000340 	.word	0x20000340

0800853c <_read_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4d07      	ldr	r5, [pc, #28]	; (800855c <_read_r+0x20>)
 8008540:	4604      	mov	r4, r0
 8008542:	4608      	mov	r0, r1
 8008544:	4611      	mov	r1, r2
 8008546:	2200      	movs	r2, #0
 8008548:	602a      	str	r2, [r5, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	f7f9 f938 	bl	80017c0 <_read>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	d102      	bne.n	800855a <_read_r+0x1e>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	b103      	cbz	r3, 800855a <_read_r+0x1e>
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	20000340 	.word	0x20000340

08008560 <sin>:
 8008560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008562:	ec53 2b10 	vmov	r2, r3, d0
 8008566:	4828      	ldr	r0, [pc, #160]	; (8008608 <sin+0xa8>)
 8008568:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800856c:	4281      	cmp	r1, r0
 800856e:	dc07      	bgt.n	8008580 <sin+0x20>
 8008570:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008600 <sin+0xa0>
 8008574:	2000      	movs	r0, #0
 8008576:	b005      	add	sp, #20
 8008578:	f85d eb04 	ldr.w	lr, [sp], #4
 800857c:	f000 be6c 	b.w	8009258 <__kernel_sin>
 8008580:	4822      	ldr	r0, [pc, #136]	; (800860c <sin+0xac>)
 8008582:	4281      	cmp	r1, r0
 8008584:	dd09      	ble.n	800859a <sin+0x3a>
 8008586:	ee10 0a10 	vmov	r0, s0
 800858a:	4619      	mov	r1, r3
 800858c:	f7f7 fe84 	bl	8000298 <__aeabi_dsub>
 8008590:	ec41 0b10 	vmov	d0, r0, r1
 8008594:	b005      	add	sp, #20
 8008596:	f85d fb04 	ldr.w	pc, [sp], #4
 800859a:	4668      	mov	r0, sp
 800859c:	f000 f838 	bl	8008610 <__ieee754_rem_pio2>
 80085a0:	f000 0003 	and.w	r0, r0, #3
 80085a4:	2801      	cmp	r0, #1
 80085a6:	d00c      	beq.n	80085c2 <sin+0x62>
 80085a8:	2802      	cmp	r0, #2
 80085aa:	d011      	beq.n	80085d0 <sin+0x70>
 80085ac:	b9f0      	cbnz	r0, 80085ec <sin+0x8c>
 80085ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085b2:	ed9d 0b00 	vldr	d0, [sp]
 80085b6:	2001      	movs	r0, #1
 80085b8:	f000 fe4e 	bl	8009258 <__kernel_sin>
 80085bc:	ec51 0b10 	vmov	r0, r1, d0
 80085c0:	e7e6      	b.n	8008590 <sin+0x30>
 80085c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085c6:	ed9d 0b00 	vldr	d0, [sp]
 80085ca:	f000 fa2d 	bl	8008a28 <__kernel_cos>
 80085ce:	e7f5      	b.n	80085bc <sin+0x5c>
 80085d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085d4:	ed9d 0b00 	vldr	d0, [sp]
 80085d8:	2001      	movs	r0, #1
 80085da:	f000 fe3d 	bl	8009258 <__kernel_sin>
 80085de:	ec53 2b10 	vmov	r2, r3, d0
 80085e2:	ee10 0a10 	vmov	r0, s0
 80085e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80085ea:	e7d1      	b.n	8008590 <sin+0x30>
 80085ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085f0:	ed9d 0b00 	vldr	d0, [sp]
 80085f4:	f000 fa18 	bl	8008a28 <__kernel_cos>
 80085f8:	e7f1      	b.n	80085de <sin+0x7e>
 80085fa:	bf00      	nop
 80085fc:	f3af 8000 	nop.w
	...
 8008608:	3fe921fb 	.word	0x3fe921fb
 800860c:	7fefffff 	.word	0x7fefffff

08008610 <__ieee754_rem_pio2>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	ed2d 8b02 	vpush	{d8}
 8008618:	ec55 4b10 	vmov	r4, r5, d0
 800861c:	4bca      	ldr	r3, [pc, #808]	; (8008948 <__ieee754_rem_pio2+0x338>)
 800861e:	b08b      	sub	sp, #44	; 0x2c
 8008620:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008624:	4598      	cmp	r8, r3
 8008626:	4682      	mov	sl, r0
 8008628:	9502      	str	r5, [sp, #8]
 800862a:	dc08      	bgt.n	800863e <__ieee754_rem_pio2+0x2e>
 800862c:	2200      	movs	r2, #0
 800862e:	2300      	movs	r3, #0
 8008630:	ed80 0b00 	vstr	d0, [r0]
 8008634:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008638:	f04f 0b00 	mov.w	fp, #0
 800863c:	e028      	b.n	8008690 <__ieee754_rem_pio2+0x80>
 800863e:	4bc3      	ldr	r3, [pc, #780]	; (800894c <__ieee754_rem_pio2+0x33c>)
 8008640:	4598      	cmp	r8, r3
 8008642:	dc78      	bgt.n	8008736 <__ieee754_rem_pio2+0x126>
 8008644:	9b02      	ldr	r3, [sp, #8]
 8008646:	4ec2      	ldr	r6, [pc, #776]	; (8008950 <__ieee754_rem_pio2+0x340>)
 8008648:	2b00      	cmp	r3, #0
 800864a:	ee10 0a10 	vmov	r0, s0
 800864e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008910 <__ieee754_rem_pio2+0x300>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	4629      	mov	r1, r5
 8008656:	dd39      	ble.n	80086cc <__ieee754_rem_pio2+0xbc>
 8008658:	f7f7 fe1e 	bl	8000298 <__aeabi_dsub>
 800865c:	45b0      	cmp	r8, r6
 800865e:	4604      	mov	r4, r0
 8008660:	460d      	mov	r5, r1
 8008662:	d01b      	beq.n	800869c <__ieee754_rem_pio2+0x8c>
 8008664:	a3ac      	add	r3, pc, #688	; (adr r3, 8008918 <__ieee754_rem_pio2+0x308>)
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	f7f7 fe15 	bl	8000298 <__aeabi_dsub>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	e9ca 2300 	strd	r2, r3, [sl]
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f7 fe0d 	bl	8000298 <__aeabi_dsub>
 800867e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008918 <__ieee754_rem_pio2+0x308>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f7f7 fe08 	bl	8000298 <__aeabi_dsub>
 8008688:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800868c:	f04f 0b01 	mov.w	fp, #1
 8008690:	4658      	mov	r0, fp
 8008692:	b00b      	add	sp, #44	; 0x2c
 8008694:	ecbd 8b02 	vpop	{d8}
 8008698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008920 <__ieee754_rem_pio2+0x310>)
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	f7f7 fdf9 	bl	8000298 <__aeabi_dsub>
 80086a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008928 <__ieee754_rem_pio2+0x318>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	4604      	mov	r4, r0
 80086ae:	460d      	mov	r5, r1
 80086b0:	f7f7 fdf2 	bl	8000298 <__aeabi_dsub>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	e9ca 2300 	strd	r2, r3, [sl]
 80086bc:	4620      	mov	r0, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	f7f7 fdea 	bl	8000298 <__aeabi_dsub>
 80086c4:	a398      	add	r3, pc, #608	; (adr r3, 8008928 <__ieee754_rem_pio2+0x318>)
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	e7db      	b.n	8008684 <__ieee754_rem_pio2+0x74>
 80086cc:	f7f7 fde6 	bl	800029c <__adddf3>
 80086d0:	45b0      	cmp	r8, r6
 80086d2:	4604      	mov	r4, r0
 80086d4:	460d      	mov	r5, r1
 80086d6:	d016      	beq.n	8008706 <__ieee754_rem_pio2+0xf6>
 80086d8:	a38f      	add	r3, pc, #572	; (adr r3, 8008918 <__ieee754_rem_pio2+0x308>)
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	f7f7 fddd 	bl	800029c <__adddf3>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	e9ca 2300 	strd	r2, r3, [sl]
 80086ea:	4620      	mov	r0, r4
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7f7 fdd3 	bl	8000298 <__aeabi_dsub>
 80086f2:	a389      	add	r3, pc, #548	; (adr r3, 8008918 <__ieee754_rem_pio2+0x308>)
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f7f7 fdd0 	bl	800029c <__adddf3>
 80086fc:	f04f 3bff 	mov.w	fp, #4294967295
 8008700:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008704:	e7c4      	b.n	8008690 <__ieee754_rem_pio2+0x80>
 8008706:	a386      	add	r3, pc, #536	; (adr r3, 8008920 <__ieee754_rem_pio2+0x310>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f7f7 fdc6 	bl	800029c <__adddf3>
 8008710:	a385      	add	r3, pc, #532	; (adr r3, 8008928 <__ieee754_rem_pio2+0x318>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	4604      	mov	r4, r0
 8008718:	460d      	mov	r5, r1
 800871a:	f7f7 fdbf 	bl	800029c <__adddf3>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	e9ca 2300 	strd	r2, r3, [sl]
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	f7f7 fdb5 	bl	8000298 <__aeabi_dsub>
 800872e:	a37e      	add	r3, pc, #504	; (adr r3, 8008928 <__ieee754_rem_pio2+0x318>)
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	e7e0      	b.n	80086f8 <__ieee754_rem_pio2+0xe8>
 8008736:	4b87      	ldr	r3, [pc, #540]	; (8008954 <__ieee754_rem_pio2+0x344>)
 8008738:	4598      	cmp	r8, r3
 800873a:	f300 80d9 	bgt.w	80088f0 <__ieee754_rem_pio2+0x2e0>
 800873e:	f000 fe49 	bl	80093d4 <fabs>
 8008742:	ec55 4b10 	vmov	r4, r5, d0
 8008746:	ee10 0a10 	vmov	r0, s0
 800874a:	a379      	add	r3, pc, #484	; (adr r3, 8008930 <__ieee754_rem_pio2+0x320>)
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	4629      	mov	r1, r5
 8008752:	f7f7 ff59 	bl	8000608 <__aeabi_dmul>
 8008756:	4b80      	ldr	r3, [pc, #512]	; (8008958 <__ieee754_rem_pio2+0x348>)
 8008758:	2200      	movs	r2, #0
 800875a:	f7f7 fd9f 	bl	800029c <__adddf3>
 800875e:	f7f8 fa03 	bl	8000b68 <__aeabi_d2iz>
 8008762:	4683      	mov	fp, r0
 8008764:	f7f7 fee6 	bl	8000534 <__aeabi_i2d>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	ec43 2b18 	vmov	d8, r2, r3
 8008770:	a367      	add	r3, pc, #412	; (adr r3, 8008910 <__ieee754_rem_pio2+0x300>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f7 ff47 	bl	8000608 <__aeabi_dmul>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4620      	mov	r0, r4
 8008780:	4629      	mov	r1, r5
 8008782:	f7f7 fd89 	bl	8000298 <__aeabi_dsub>
 8008786:	a364      	add	r3, pc, #400	; (adr r3, 8008918 <__ieee754_rem_pio2+0x308>)
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	4606      	mov	r6, r0
 800878e:	460f      	mov	r7, r1
 8008790:	ec51 0b18 	vmov	r0, r1, d8
 8008794:	f7f7 ff38 	bl	8000608 <__aeabi_dmul>
 8008798:	f1bb 0f1f 	cmp.w	fp, #31
 800879c:	4604      	mov	r4, r0
 800879e:	460d      	mov	r5, r1
 80087a0:	dc0d      	bgt.n	80087be <__ieee754_rem_pio2+0x1ae>
 80087a2:	4b6e      	ldr	r3, [pc, #440]	; (800895c <__ieee754_rem_pio2+0x34c>)
 80087a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80087a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ac:	4543      	cmp	r3, r8
 80087ae:	d006      	beq.n	80087be <__ieee754_rem_pio2+0x1ae>
 80087b0:	4622      	mov	r2, r4
 80087b2:	462b      	mov	r3, r5
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f7 fd6e 	bl	8000298 <__aeabi_dsub>
 80087bc:	e00f      	b.n	80087de <__ieee754_rem_pio2+0x1ce>
 80087be:	462b      	mov	r3, r5
 80087c0:	4622      	mov	r2, r4
 80087c2:	4630      	mov	r0, r6
 80087c4:	4639      	mov	r1, r7
 80087c6:	f7f7 fd67 	bl	8000298 <__aeabi_dsub>
 80087ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80087d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80087d8:	f1b8 0f10 	cmp.w	r8, #16
 80087dc:	dc02      	bgt.n	80087e4 <__ieee754_rem_pio2+0x1d4>
 80087de:	e9ca 0100 	strd	r0, r1, [sl]
 80087e2:	e039      	b.n	8008858 <__ieee754_rem_pio2+0x248>
 80087e4:	a34e      	add	r3, pc, #312	; (adr r3, 8008920 <__ieee754_rem_pio2+0x310>)
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	ec51 0b18 	vmov	r0, r1, d8
 80087ee:	f7f7 ff0b 	bl	8000608 <__aeabi_dmul>
 80087f2:	4604      	mov	r4, r0
 80087f4:	460d      	mov	r5, r1
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4630      	mov	r0, r6
 80087fc:	4639      	mov	r1, r7
 80087fe:	f7f7 fd4b 	bl	8000298 <__aeabi_dsub>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4680      	mov	r8, r0
 8008808:	4689      	mov	r9, r1
 800880a:	4630      	mov	r0, r6
 800880c:	4639      	mov	r1, r7
 800880e:	f7f7 fd43 	bl	8000298 <__aeabi_dsub>
 8008812:	4622      	mov	r2, r4
 8008814:	462b      	mov	r3, r5
 8008816:	f7f7 fd3f 	bl	8000298 <__aeabi_dsub>
 800881a:	a343      	add	r3, pc, #268	; (adr r3, 8008928 <__ieee754_rem_pio2+0x318>)
 800881c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008820:	4604      	mov	r4, r0
 8008822:	460d      	mov	r5, r1
 8008824:	ec51 0b18 	vmov	r0, r1, d8
 8008828:	f7f7 feee 	bl	8000608 <__aeabi_dmul>
 800882c:	4622      	mov	r2, r4
 800882e:	462b      	mov	r3, r5
 8008830:	f7f7 fd32 	bl	8000298 <__aeabi_dsub>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4604      	mov	r4, r0
 800883a:	460d      	mov	r5, r1
 800883c:	4640      	mov	r0, r8
 800883e:	4649      	mov	r1, r9
 8008840:	f7f7 fd2a 	bl	8000298 <__aeabi_dsub>
 8008844:	9a03      	ldr	r2, [sp, #12]
 8008846:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	2b31      	cmp	r3, #49	; 0x31
 800884e:	dc24      	bgt.n	800889a <__ieee754_rem_pio2+0x28a>
 8008850:	e9ca 0100 	strd	r0, r1, [sl]
 8008854:	4646      	mov	r6, r8
 8008856:	464f      	mov	r7, r9
 8008858:	e9da 8900 	ldrd	r8, r9, [sl]
 800885c:	4630      	mov	r0, r6
 800885e:	4642      	mov	r2, r8
 8008860:	464b      	mov	r3, r9
 8008862:	4639      	mov	r1, r7
 8008864:	f7f7 fd18 	bl	8000298 <__aeabi_dsub>
 8008868:	462b      	mov	r3, r5
 800886a:	4622      	mov	r2, r4
 800886c:	f7f7 fd14 	bl	8000298 <__aeabi_dsub>
 8008870:	9b02      	ldr	r3, [sp, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008878:	f6bf af0a 	bge.w	8008690 <__ieee754_rem_pio2+0x80>
 800887c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008880:	f8ca 3004 	str.w	r3, [sl, #4]
 8008884:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008888:	f8ca 8000 	str.w	r8, [sl]
 800888c:	f8ca 0008 	str.w	r0, [sl, #8]
 8008890:	f8ca 300c 	str.w	r3, [sl, #12]
 8008894:	f1cb 0b00 	rsb	fp, fp, #0
 8008898:	e6fa      	b.n	8008690 <__ieee754_rem_pio2+0x80>
 800889a:	a327      	add	r3, pc, #156	; (adr r3, 8008938 <__ieee754_rem_pio2+0x328>)
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	ec51 0b18 	vmov	r0, r1, d8
 80088a4:	f7f7 feb0 	bl	8000608 <__aeabi_dmul>
 80088a8:	4604      	mov	r4, r0
 80088aa:	460d      	mov	r5, r1
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4640      	mov	r0, r8
 80088b2:	4649      	mov	r1, r9
 80088b4:	f7f7 fcf0 	bl	8000298 <__aeabi_dsub>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4606      	mov	r6, r0
 80088be:	460f      	mov	r7, r1
 80088c0:	4640      	mov	r0, r8
 80088c2:	4649      	mov	r1, r9
 80088c4:	f7f7 fce8 	bl	8000298 <__aeabi_dsub>
 80088c8:	4622      	mov	r2, r4
 80088ca:	462b      	mov	r3, r5
 80088cc:	f7f7 fce4 	bl	8000298 <__aeabi_dsub>
 80088d0:	a31b      	add	r3, pc, #108	; (adr r3, 8008940 <__ieee754_rem_pio2+0x330>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	ec51 0b18 	vmov	r0, r1, d8
 80088de:	f7f7 fe93 	bl	8000608 <__aeabi_dmul>
 80088e2:	4622      	mov	r2, r4
 80088e4:	462b      	mov	r3, r5
 80088e6:	f7f7 fcd7 	bl	8000298 <__aeabi_dsub>
 80088ea:	4604      	mov	r4, r0
 80088ec:	460d      	mov	r5, r1
 80088ee:	e75f      	b.n	80087b0 <__ieee754_rem_pio2+0x1a0>
 80088f0:	4b1b      	ldr	r3, [pc, #108]	; (8008960 <__ieee754_rem_pio2+0x350>)
 80088f2:	4598      	cmp	r8, r3
 80088f4:	dd36      	ble.n	8008964 <__ieee754_rem_pio2+0x354>
 80088f6:	ee10 2a10 	vmov	r2, s0
 80088fa:	462b      	mov	r3, r5
 80088fc:	4620      	mov	r0, r4
 80088fe:	4629      	mov	r1, r5
 8008900:	f7f7 fcca 	bl	8000298 <__aeabi_dsub>
 8008904:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008908:	e9ca 0100 	strd	r0, r1, [sl]
 800890c:	e694      	b.n	8008638 <__ieee754_rem_pio2+0x28>
 800890e:	bf00      	nop
 8008910:	54400000 	.word	0x54400000
 8008914:	3ff921fb 	.word	0x3ff921fb
 8008918:	1a626331 	.word	0x1a626331
 800891c:	3dd0b461 	.word	0x3dd0b461
 8008920:	1a600000 	.word	0x1a600000
 8008924:	3dd0b461 	.word	0x3dd0b461
 8008928:	2e037073 	.word	0x2e037073
 800892c:	3ba3198a 	.word	0x3ba3198a
 8008930:	6dc9c883 	.word	0x6dc9c883
 8008934:	3fe45f30 	.word	0x3fe45f30
 8008938:	2e000000 	.word	0x2e000000
 800893c:	3ba3198a 	.word	0x3ba3198a
 8008940:	252049c1 	.word	0x252049c1
 8008944:	397b839a 	.word	0x397b839a
 8008948:	3fe921fb 	.word	0x3fe921fb
 800894c:	4002d97b 	.word	0x4002d97b
 8008950:	3ff921fb 	.word	0x3ff921fb
 8008954:	413921fb 	.word	0x413921fb
 8008958:	3fe00000 	.word	0x3fe00000
 800895c:	08009ae4 	.word	0x08009ae4
 8008960:	7fefffff 	.word	0x7fefffff
 8008964:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008968:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800896c:	ee10 0a10 	vmov	r0, s0
 8008970:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008974:	ee10 6a10 	vmov	r6, s0
 8008978:	460f      	mov	r7, r1
 800897a:	f7f8 f8f5 	bl	8000b68 <__aeabi_d2iz>
 800897e:	f7f7 fdd9 	bl	8000534 <__aeabi_i2d>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4630      	mov	r0, r6
 8008988:	4639      	mov	r1, r7
 800898a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800898e:	f7f7 fc83 	bl	8000298 <__aeabi_dsub>
 8008992:	4b23      	ldr	r3, [pc, #140]	; (8008a20 <__ieee754_rem_pio2+0x410>)
 8008994:	2200      	movs	r2, #0
 8008996:	f7f7 fe37 	bl	8000608 <__aeabi_dmul>
 800899a:	460f      	mov	r7, r1
 800899c:	4606      	mov	r6, r0
 800899e:	f7f8 f8e3 	bl	8000b68 <__aeabi_d2iz>
 80089a2:	f7f7 fdc7 	bl	8000534 <__aeabi_i2d>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4630      	mov	r0, r6
 80089ac:	4639      	mov	r1, r7
 80089ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80089b2:	f7f7 fc71 	bl	8000298 <__aeabi_dsub>
 80089b6:	4b1a      	ldr	r3, [pc, #104]	; (8008a20 <__ieee754_rem_pio2+0x410>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	f7f7 fe25 	bl	8000608 <__aeabi_dmul>
 80089be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80089c2:	ad04      	add	r5, sp, #16
 80089c4:	f04f 0803 	mov.w	r8, #3
 80089c8:	46a9      	mov	r9, r5
 80089ca:	2600      	movs	r6, #0
 80089cc:	2700      	movs	r7, #0
 80089ce:	4632      	mov	r2, r6
 80089d0:	463b      	mov	r3, r7
 80089d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80089d6:	46c3      	mov	fp, r8
 80089d8:	3d08      	subs	r5, #8
 80089da:	f108 38ff 	add.w	r8, r8, #4294967295
 80089de:	f7f8 f87b 	bl	8000ad8 <__aeabi_dcmpeq>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d1f3      	bne.n	80089ce <__ieee754_rem_pio2+0x3be>
 80089e6:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <__ieee754_rem_pio2+0x414>)
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	2302      	movs	r3, #2
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4622      	mov	r2, r4
 80089f0:	465b      	mov	r3, fp
 80089f2:	4651      	mov	r1, sl
 80089f4:	4648      	mov	r0, r9
 80089f6:	f000 f8df 	bl	8008bb8 <__kernel_rem_pio2>
 80089fa:	9b02      	ldr	r3, [sp, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	4683      	mov	fp, r0
 8008a00:	f6bf ae46 	bge.w	8008690 <__ieee754_rem_pio2+0x80>
 8008a04:	e9da 2100 	ldrd	r2, r1, [sl]
 8008a08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a0c:	e9ca 2300 	strd	r2, r3, [sl]
 8008a10:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008a14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a18:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008a1c:	e73a      	b.n	8008894 <__ieee754_rem_pio2+0x284>
 8008a1e:	bf00      	nop
 8008a20:	41700000 	.word	0x41700000
 8008a24:	08009b64 	.word	0x08009b64

08008a28 <__kernel_cos>:
 8008a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	ec57 6b10 	vmov	r6, r7, d0
 8008a30:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008a34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008a38:	ed8d 1b00 	vstr	d1, [sp]
 8008a3c:	da07      	bge.n	8008a4e <__kernel_cos+0x26>
 8008a3e:	ee10 0a10 	vmov	r0, s0
 8008a42:	4639      	mov	r1, r7
 8008a44:	f7f8 f890 	bl	8000b68 <__aeabi_d2iz>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	f000 8088 	beq.w	8008b5e <__kernel_cos+0x136>
 8008a4e:	4632      	mov	r2, r6
 8008a50:	463b      	mov	r3, r7
 8008a52:	4630      	mov	r0, r6
 8008a54:	4639      	mov	r1, r7
 8008a56:	f7f7 fdd7 	bl	8000608 <__aeabi_dmul>
 8008a5a:	4b51      	ldr	r3, [pc, #324]	; (8008ba0 <__kernel_cos+0x178>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	460d      	mov	r5, r1
 8008a62:	f7f7 fdd1 	bl	8000608 <__aeabi_dmul>
 8008a66:	a340      	add	r3, pc, #256	; (adr r3, 8008b68 <__kernel_cos+0x140>)
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	4682      	mov	sl, r0
 8008a6e:	468b      	mov	fp, r1
 8008a70:	4620      	mov	r0, r4
 8008a72:	4629      	mov	r1, r5
 8008a74:	f7f7 fdc8 	bl	8000608 <__aeabi_dmul>
 8008a78:	a33d      	add	r3, pc, #244	; (adr r3, 8008b70 <__kernel_cos+0x148>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f7 fc0d 	bl	800029c <__adddf3>
 8008a82:	4622      	mov	r2, r4
 8008a84:	462b      	mov	r3, r5
 8008a86:	f7f7 fdbf 	bl	8000608 <__aeabi_dmul>
 8008a8a:	a33b      	add	r3, pc, #236	; (adr r3, 8008b78 <__kernel_cos+0x150>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f7f7 fc02 	bl	8000298 <__aeabi_dsub>
 8008a94:	4622      	mov	r2, r4
 8008a96:	462b      	mov	r3, r5
 8008a98:	f7f7 fdb6 	bl	8000608 <__aeabi_dmul>
 8008a9c:	a338      	add	r3, pc, #224	; (adr r3, 8008b80 <__kernel_cos+0x158>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f7 fbfb 	bl	800029c <__adddf3>
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	f7f7 fdad 	bl	8000608 <__aeabi_dmul>
 8008aae:	a336      	add	r3, pc, #216	; (adr r3, 8008b88 <__kernel_cos+0x160>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 fbf0 	bl	8000298 <__aeabi_dsub>
 8008ab8:	4622      	mov	r2, r4
 8008aba:	462b      	mov	r3, r5
 8008abc:	f7f7 fda4 	bl	8000608 <__aeabi_dmul>
 8008ac0:	a333      	add	r3, pc, #204	; (adr r3, 8008b90 <__kernel_cos+0x168>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f7f7 fbe9 	bl	800029c <__adddf3>
 8008aca:	4622      	mov	r2, r4
 8008acc:	462b      	mov	r3, r5
 8008ace:	f7f7 fd9b 	bl	8000608 <__aeabi_dmul>
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	462b      	mov	r3, r5
 8008ad6:	f7f7 fd97 	bl	8000608 <__aeabi_dmul>
 8008ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ade:	4604      	mov	r4, r0
 8008ae0:	460d      	mov	r5, r1
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	f7f7 fd8f 	bl	8000608 <__aeabi_dmul>
 8008aea:	460b      	mov	r3, r1
 8008aec:	4602      	mov	r2, r0
 8008aee:	4629      	mov	r1, r5
 8008af0:	4620      	mov	r0, r4
 8008af2:	f7f7 fbd1 	bl	8000298 <__aeabi_dsub>
 8008af6:	4b2b      	ldr	r3, [pc, #172]	; (8008ba4 <__kernel_cos+0x17c>)
 8008af8:	4598      	cmp	r8, r3
 8008afa:	4606      	mov	r6, r0
 8008afc:	460f      	mov	r7, r1
 8008afe:	dc10      	bgt.n	8008b22 <__kernel_cos+0xfa>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4650      	mov	r0, sl
 8008b06:	4659      	mov	r1, fp
 8008b08:	f7f7 fbc6 	bl	8000298 <__aeabi_dsub>
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4926      	ldr	r1, [pc, #152]	; (8008ba8 <__kernel_cos+0x180>)
 8008b10:	4602      	mov	r2, r0
 8008b12:	2000      	movs	r0, #0
 8008b14:	f7f7 fbc0 	bl	8000298 <__aeabi_dsub>
 8008b18:	ec41 0b10 	vmov	d0, r0, r1
 8008b1c:	b003      	add	sp, #12
 8008b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b22:	4b22      	ldr	r3, [pc, #136]	; (8008bac <__kernel_cos+0x184>)
 8008b24:	4920      	ldr	r1, [pc, #128]	; (8008ba8 <__kernel_cos+0x180>)
 8008b26:	4598      	cmp	r8, r3
 8008b28:	bfcc      	ite	gt
 8008b2a:	4d21      	ldrgt	r5, [pc, #132]	; (8008bb0 <__kernel_cos+0x188>)
 8008b2c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008b30:	2400      	movs	r4, #0
 8008b32:	4622      	mov	r2, r4
 8008b34:	462b      	mov	r3, r5
 8008b36:	2000      	movs	r0, #0
 8008b38:	f7f7 fbae 	bl	8000298 <__aeabi_dsub>
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	4680      	mov	r8, r0
 8008b40:	4689      	mov	r9, r1
 8008b42:	462b      	mov	r3, r5
 8008b44:	4650      	mov	r0, sl
 8008b46:	4659      	mov	r1, fp
 8008b48:	f7f7 fba6 	bl	8000298 <__aeabi_dsub>
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	463b      	mov	r3, r7
 8008b50:	f7f7 fba2 	bl	8000298 <__aeabi_dsub>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	e7da      	b.n	8008b14 <__kernel_cos+0xec>
 8008b5e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008b98 <__kernel_cos+0x170>
 8008b62:	e7db      	b.n	8008b1c <__kernel_cos+0xf4>
 8008b64:	f3af 8000 	nop.w
 8008b68:	be8838d4 	.word	0xbe8838d4
 8008b6c:	bda8fae9 	.word	0xbda8fae9
 8008b70:	bdb4b1c4 	.word	0xbdb4b1c4
 8008b74:	3e21ee9e 	.word	0x3e21ee9e
 8008b78:	809c52ad 	.word	0x809c52ad
 8008b7c:	3e927e4f 	.word	0x3e927e4f
 8008b80:	19cb1590 	.word	0x19cb1590
 8008b84:	3efa01a0 	.word	0x3efa01a0
 8008b88:	16c15177 	.word	0x16c15177
 8008b8c:	3f56c16c 	.word	0x3f56c16c
 8008b90:	5555554c 	.word	0x5555554c
 8008b94:	3fa55555 	.word	0x3fa55555
 8008b98:	00000000 	.word	0x00000000
 8008b9c:	3ff00000 	.word	0x3ff00000
 8008ba0:	3fe00000 	.word	0x3fe00000
 8008ba4:	3fd33332 	.word	0x3fd33332
 8008ba8:	3ff00000 	.word	0x3ff00000
 8008bac:	3fe90000 	.word	0x3fe90000
 8008bb0:	3fd20000 	.word	0x3fd20000
 8008bb4:	00000000 	.word	0x00000000

08008bb8 <__kernel_rem_pio2>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	ed2d 8b02 	vpush	{d8}
 8008bc0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008bc4:	f112 0f14 	cmn.w	r2, #20
 8008bc8:	9308      	str	r3, [sp, #32]
 8008bca:	9101      	str	r1, [sp, #4]
 8008bcc:	4bc4      	ldr	r3, [pc, #784]	; (8008ee0 <__kernel_rem_pio2+0x328>)
 8008bce:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008bd0:	900b      	str	r0, [sp, #44]	; 0x2c
 8008bd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bd6:	9302      	str	r3, [sp, #8]
 8008bd8:	9b08      	ldr	r3, [sp, #32]
 8008bda:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bde:	bfa8      	it	ge
 8008be0:	1ed4      	subge	r4, r2, #3
 8008be2:	9306      	str	r3, [sp, #24]
 8008be4:	bfb2      	itee	lt
 8008be6:	2400      	movlt	r4, #0
 8008be8:	2318      	movge	r3, #24
 8008bea:	fb94 f4f3 	sdivge	r4, r4, r3
 8008bee:	f06f 0317 	mvn.w	r3, #23
 8008bf2:	fb04 3303 	mla	r3, r4, r3, r3
 8008bf6:	eb03 0a02 	add.w	sl, r3, r2
 8008bfa:	9b02      	ldr	r3, [sp, #8]
 8008bfc:	9a06      	ldr	r2, [sp, #24]
 8008bfe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008ed0 <__kernel_rem_pio2+0x318>
 8008c02:	eb03 0802 	add.w	r8, r3, r2
 8008c06:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008c08:	1aa7      	subs	r7, r4, r2
 8008c0a:	ae22      	add	r6, sp, #136	; 0x88
 8008c0c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008c10:	2500      	movs	r5, #0
 8008c12:	4545      	cmp	r5, r8
 8008c14:	dd13      	ble.n	8008c3e <__kernel_rem_pio2+0x86>
 8008c16:	9b08      	ldr	r3, [sp, #32]
 8008c18:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008ed0 <__kernel_rem_pio2+0x318>
 8008c1c:	aa22      	add	r2, sp, #136	; 0x88
 8008c1e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008c22:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008c26:	f04f 0800 	mov.w	r8, #0
 8008c2a:	9b02      	ldr	r3, [sp, #8]
 8008c2c:	4598      	cmp	r8, r3
 8008c2e:	dc2f      	bgt.n	8008c90 <__kernel_rem_pio2+0xd8>
 8008c30:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008c34:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008c38:	462f      	mov	r7, r5
 8008c3a:	2600      	movs	r6, #0
 8008c3c:	e01b      	b.n	8008c76 <__kernel_rem_pio2+0xbe>
 8008c3e:	42ef      	cmn	r7, r5
 8008c40:	d407      	bmi.n	8008c52 <__kernel_rem_pio2+0x9a>
 8008c42:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008c46:	f7f7 fc75 	bl	8000534 <__aeabi_i2d>
 8008c4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008c4e:	3501      	adds	r5, #1
 8008c50:	e7df      	b.n	8008c12 <__kernel_rem_pio2+0x5a>
 8008c52:	ec51 0b18 	vmov	r0, r1, d8
 8008c56:	e7f8      	b.n	8008c4a <__kernel_rem_pio2+0x92>
 8008c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c5c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008c60:	f7f7 fcd2 	bl	8000608 <__aeabi_dmul>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c6c:	f7f7 fb16 	bl	800029c <__adddf3>
 8008c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c74:	3601      	adds	r6, #1
 8008c76:	9b06      	ldr	r3, [sp, #24]
 8008c78:	429e      	cmp	r6, r3
 8008c7a:	f1a7 0708 	sub.w	r7, r7, #8
 8008c7e:	ddeb      	ble.n	8008c58 <__kernel_rem_pio2+0xa0>
 8008c80:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008c84:	f108 0801 	add.w	r8, r8, #1
 8008c88:	ecab 7b02 	vstmia	fp!, {d7}
 8008c8c:	3508      	adds	r5, #8
 8008c8e:	e7cc      	b.n	8008c2a <__kernel_rem_pio2+0x72>
 8008c90:	9b02      	ldr	r3, [sp, #8]
 8008c92:	aa0e      	add	r2, sp, #56	; 0x38
 8008c94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c98:	930d      	str	r3, [sp, #52]	; 0x34
 8008c9a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008c9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008ca0:	9c02      	ldr	r4, [sp, #8]
 8008ca2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ca4:	00e3      	lsls	r3, r4, #3
 8008ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ca8:	ab9a      	add	r3, sp, #616	; 0x268
 8008caa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008cb2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008cb6:	ab72      	add	r3, sp, #456	; 0x1c8
 8008cb8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008cbc:	46c3      	mov	fp, r8
 8008cbe:	46a1      	mov	r9, r4
 8008cc0:	f1b9 0f00 	cmp.w	r9, #0
 8008cc4:	f1a5 0508 	sub.w	r5, r5, #8
 8008cc8:	dc77      	bgt.n	8008dba <__kernel_rem_pio2+0x202>
 8008cca:	ec47 6b10 	vmov	d0, r6, r7
 8008cce:	4650      	mov	r0, sl
 8008cd0:	f000 fc0a 	bl	80094e8 <scalbn>
 8008cd4:	ec57 6b10 	vmov	r6, r7, d0
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008cde:	ee10 0a10 	vmov	r0, s0
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	f7f7 fc90 	bl	8000608 <__aeabi_dmul>
 8008ce8:	ec41 0b10 	vmov	d0, r0, r1
 8008cec:	f000 fb7c 	bl	80093e8 <floor>
 8008cf0:	4b7c      	ldr	r3, [pc, #496]	; (8008ee4 <__kernel_rem_pio2+0x32c>)
 8008cf2:	ec51 0b10 	vmov	r0, r1, d0
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f7f7 fc86 	bl	8000608 <__aeabi_dmul>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4630      	mov	r0, r6
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7f7 fac8 	bl	8000298 <__aeabi_dsub>
 8008d08:	460f      	mov	r7, r1
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	f7f7 ff2c 	bl	8000b68 <__aeabi_d2iz>
 8008d10:	9004      	str	r0, [sp, #16]
 8008d12:	f7f7 fc0f 	bl	8000534 <__aeabi_i2d>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	f7f7 fabb 	bl	8000298 <__aeabi_dsub>
 8008d22:	f1ba 0f00 	cmp.w	sl, #0
 8008d26:	4606      	mov	r6, r0
 8008d28:	460f      	mov	r7, r1
 8008d2a:	dd6d      	ble.n	8008e08 <__kernel_rem_pio2+0x250>
 8008d2c:	1e62      	subs	r2, r4, #1
 8008d2e:	ab0e      	add	r3, sp, #56	; 0x38
 8008d30:	9d04      	ldr	r5, [sp, #16]
 8008d32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008d36:	f1ca 0118 	rsb	r1, sl, #24
 8008d3a:	fa40 f301 	asr.w	r3, r0, r1
 8008d3e:	441d      	add	r5, r3
 8008d40:	408b      	lsls	r3, r1
 8008d42:	1ac0      	subs	r0, r0, r3
 8008d44:	ab0e      	add	r3, sp, #56	; 0x38
 8008d46:	9504      	str	r5, [sp, #16]
 8008d48:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008d4c:	f1ca 0317 	rsb	r3, sl, #23
 8008d50:	fa40 fb03 	asr.w	fp, r0, r3
 8008d54:	f1bb 0f00 	cmp.w	fp, #0
 8008d58:	dd65      	ble.n	8008e26 <__kernel_rem_pio2+0x26e>
 8008d5a:	9b04      	ldr	r3, [sp, #16]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	3301      	adds	r3, #1
 8008d60:	9304      	str	r3, [sp, #16]
 8008d62:	4615      	mov	r5, r2
 8008d64:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008d68:	4294      	cmp	r4, r2
 8008d6a:	f300 809c 	bgt.w	8008ea6 <__kernel_rem_pio2+0x2ee>
 8008d6e:	f1ba 0f00 	cmp.w	sl, #0
 8008d72:	dd07      	ble.n	8008d84 <__kernel_rem_pio2+0x1cc>
 8008d74:	f1ba 0f01 	cmp.w	sl, #1
 8008d78:	f000 80c0 	beq.w	8008efc <__kernel_rem_pio2+0x344>
 8008d7c:	f1ba 0f02 	cmp.w	sl, #2
 8008d80:	f000 80c6 	beq.w	8008f10 <__kernel_rem_pio2+0x358>
 8008d84:	f1bb 0f02 	cmp.w	fp, #2
 8008d88:	d14d      	bne.n	8008e26 <__kernel_rem_pio2+0x26e>
 8008d8a:	4632      	mov	r2, r6
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	4956      	ldr	r1, [pc, #344]	; (8008ee8 <__kernel_rem_pio2+0x330>)
 8008d90:	2000      	movs	r0, #0
 8008d92:	f7f7 fa81 	bl	8000298 <__aeabi_dsub>
 8008d96:	4606      	mov	r6, r0
 8008d98:	460f      	mov	r7, r1
 8008d9a:	2d00      	cmp	r5, #0
 8008d9c:	d043      	beq.n	8008e26 <__kernel_rem_pio2+0x26e>
 8008d9e:	4650      	mov	r0, sl
 8008da0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008ed8 <__kernel_rem_pio2+0x320>
 8008da4:	f000 fba0 	bl	80094e8 <scalbn>
 8008da8:	4630      	mov	r0, r6
 8008daa:	4639      	mov	r1, r7
 8008dac:	ec53 2b10 	vmov	r2, r3, d0
 8008db0:	f7f7 fa72 	bl	8000298 <__aeabi_dsub>
 8008db4:	4606      	mov	r6, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	e035      	b.n	8008e26 <__kernel_rem_pio2+0x26e>
 8008dba:	4b4c      	ldr	r3, [pc, #304]	; (8008eec <__kernel_rem_pio2+0x334>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	4639      	mov	r1, r7
 8008dc2:	f7f7 fc21 	bl	8000608 <__aeabi_dmul>
 8008dc6:	f7f7 fecf 	bl	8000b68 <__aeabi_d2iz>
 8008dca:	f7f7 fbb3 	bl	8000534 <__aeabi_i2d>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	ec43 2b18 	vmov	d8, r2, r3
 8008dd6:	4b46      	ldr	r3, [pc, #280]	; (8008ef0 <__kernel_rem_pio2+0x338>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f7f7 fc15 	bl	8000608 <__aeabi_dmul>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	4630      	mov	r0, r6
 8008de4:	4639      	mov	r1, r7
 8008de6:	f7f7 fa57 	bl	8000298 <__aeabi_dsub>
 8008dea:	f7f7 febd 	bl	8000b68 <__aeabi_d2iz>
 8008dee:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008df2:	f84b 0b04 	str.w	r0, [fp], #4
 8008df6:	ec51 0b18 	vmov	r0, r1, d8
 8008dfa:	f7f7 fa4f 	bl	800029c <__adddf3>
 8008dfe:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e02:	4606      	mov	r6, r0
 8008e04:	460f      	mov	r7, r1
 8008e06:	e75b      	b.n	8008cc0 <__kernel_rem_pio2+0x108>
 8008e08:	d106      	bne.n	8008e18 <__kernel_rem_pio2+0x260>
 8008e0a:	1e63      	subs	r3, r4, #1
 8008e0c:	aa0e      	add	r2, sp, #56	; 0x38
 8008e0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008e12:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008e16:	e79d      	b.n	8008d54 <__kernel_rem_pio2+0x19c>
 8008e18:	4b36      	ldr	r3, [pc, #216]	; (8008ef4 <__kernel_rem_pio2+0x33c>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f7f7 fe7a 	bl	8000b14 <__aeabi_dcmpge>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d13d      	bne.n	8008ea0 <__kernel_rem_pio2+0x2e8>
 8008e24:	4683      	mov	fp, r0
 8008e26:	2200      	movs	r2, #0
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	f7f7 fe53 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f000 80c0 	beq.w	8008fb8 <__kernel_rem_pio2+0x400>
 8008e38:	1e65      	subs	r5, r4, #1
 8008e3a:	462b      	mov	r3, r5
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	9902      	ldr	r1, [sp, #8]
 8008e40:	428b      	cmp	r3, r1
 8008e42:	da6c      	bge.n	8008f1e <__kernel_rem_pio2+0x366>
 8008e44:	2a00      	cmp	r2, #0
 8008e46:	f000 8089 	beq.w	8008f5c <__kernel_rem_pio2+0x3a4>
 8008e4a:	ab0e      	add	r3, sp, #56	; 0x38
 8008e4c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008e50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80ad 	beq.w	8008fb4 <__kernel_rem_pio2+0x3fc>
 8008e5a:	4650      	mov	r0, sl
 8008e5c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008ed8 <__kernel_rem_pio2+0x320>
 8008e60:	f000 fb42 	bl	80094e8 <scalbn>
 8008e64:	ab9a      	add	r3, sp, #616	; 0x268
 8008e66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008e6a:	ec57 6b10 	vmov	r6, r7, d0
 8008e6e:	00ec      	lsls	r4, r5, #3
 8008e70:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008e74:	46aa      	mov	sl, r5
 8008e76:	f1ba 0f00 	cmp.w	sl, #0
 8008e7a:	f280 80d6 	bge.w	800902a <__kernel_rem_pio2+0x472>
 8008e7e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008ed0 <__kernel_rem_pio2+0x318>
 8008e82:	462e      	mov	r6, r5
 8008e84:	2e00      	cmp	r6, #0
 8008e86:	f2c0 8104 	blt.w	8009092 <__kernel_rem_pio2+0x4da>
 8008e8a:	ab72      	add	r3, sp, #456	; 0x1c8
 8008e8c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008e90:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008ef8 <__kernel_rem_pio2+0x340>
 8008e94:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008e98:	f04f 0800 	mov.w	r8, #0
 8008e9c:	1baf      	subs	r7, r5, r6
 8008e9e:	e0ea      	b.n	8009076 <__kernel_rem_pio2+0x4be>
 8008ea0:	f04f 0b02 	mov.w	fp, #2
 8008ea4:	e759      	b.n	8008d5a <__kernel_rem_pio2+0x1a2>
 8008ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8008eaa:	b955      	cbnz	r5, 8008ec2 <__kernel_rem_pio2+0x30a>
 8008eac:	b123      	cbz	r3, 8008eb8 <__kernel_rem_pio2+0x300>
 8008eae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008eb2:	f8c8 3000 	str.w	r3, [r8]
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	3201      	adds	r2, #1
 8008eba:	f108 0804 	add.w	r8, r8, #4
 8008ebe:	461d      	mov	r5, r3
 8008ec0:	e752      	b.n	8008d68 <__kernel_rem_pio2+0x1b0>
 8008ec2:	1acb      	subs	r3, r1, r3
 8008ec4:	f8c8 3000 	str.w	r3, [r8]
 8008ec8:	462b      	mov	r3, r5
 8008eca:	e7f5      	b.n	8008eb8 <__kernel_rem_pio2+0x300>
 8008ecc:	f3af 8000 	nop.w
	...
 8008edc:	3ff00000 	.word	0x3ff00000
 8008ee0:	08009cb0 	.word	0x08009cb0
 8008ee4:	40200000 	.word	0x40200000
 8008ee8:	3ff00000 	.word	0x3ff00000
 8008eec:	3e700000 	.word	0x3e700000
 8008ef0:	41700000 	.word	0x41700000
 8008ef4:	3fe00000 	.word	0x3fe00000
 8008ef8:	08009c70 	.word	0x08009c70
 8008efc:	1e62      	subs	r2, r4, #1
 8008efe:	ab0e      	add	r3, sp, #56	; 0x38
 8008f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f04:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008f08:	a90e      	add	r1, sp, #56	; 0x38
 8008f0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008f0e:	e739      	b.n	8008d84 <__kernel_rem_pio2+0x1cc>
 8008f10:	1e62      	subs	r2, r4, #1
 8008f12:	ab0e      	add	r3, sp, #56	; 0x38
 8008f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008f1c:	e7f4      	b.n	8008f08 <__kernel_rem_pio2+0x350>
 8008f1e:	a90e      	add	r1, sp, #56	; 0x38
 8008f20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	430a      	orrs	r2, r1
 8008f28:	e789      	b.n	8008e3e <__kernel_rem_pio2+0x286>
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008f30:	2900      	cmp	r1, #0
 8008f32:	d0fa      	beq.n	8008f2a <__kernel_rem_pio2+0x372>
 8008f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f36:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008f3a:	446a      	add	r2, sp
 8008f3c:	3a98      	subs	r2, #152	; 0x98
 8008f3e:	920a      	str	r2, [sp, #40]	; 0x28
 8008f40:	9a08      	ldr	r2, [sp, #32]
 8008f42:	18e3      	adds	r3, r4, r3
 8008f44:	18a5      	adds	r5, r4, r2
 8008f46:	aa22      	add	r2, sp, #136	; 0x88
 8008f48:	f104 0801 	add.w	r8, r4, #1
 8008f4c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008f50:	9304      	str	r3, [sp, #16]
 8008f52:	9b04      	ldr	r3, [sp, #16]
 8008f54:	4543      	cmp	r3, r8
 8008f56:	da04      	bge.n	8008f62 <__kernel_rem_pio2+0x3aa>
 8008f58:	461c      	mov	r4, r3
 8008f5a:	e6a3      	b.n	8008ca4 <__kernel_rem_pio2+0xec>
 8008f5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e7e4      	b.n	8008f2c <__kernel_rem_pio2+0x374>
 8008f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f64:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008f68:	f7f7 fae4 	bl	8000534 <__aeabi_i2d>
 8008f6c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f72:	46ab      	mov	fp, r5
 8008f74:	461c      	mov	r4, r3
 8008f76:	f04f 0900 	mov.w	r9, #0
 8008f7a:	2600      	movs	r6, #0
 8008f7c:	2700      	movs	r7, #0
 8008f7e:	9b06      	ldr	r3, [sp, #24]
 8008f80:	4599      	cmp	r9, r3
 8008f82:	dd06      	ble.n	8008f92 <__kernel_rem_pio2+0x3da>
 8008f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f86:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008f8a:	f108 0801 	add.w	r8, r8, #1
 8008f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f90:	e7df      	b.n	8008f52 <__kernel_rem_pio2+0x39a>
 8008f92:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008f96:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008f9a:	f7f7 fb35 	bl	8000608 <__aeabi_dmul>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	f7f7 f979 	bl	800029c <__adddf3>
 8008faa:	f109 0901 	add.w	r9, r9, #1
 8008fae:	4606      	mov	r6, r0
 8008fb0:	460f      	mov	r7, r1
 8008fb2:	e7e4      	b.n	8008f7e <__kernel_rem_pio2+0x3c6>
 8008fb4:	3d01      	subs	r5, #1
 8008fb6:	e748      	b.n	8008e4a <__kernel_rem_pio2+0x292>
 8008fb8:	ec47 6b10 	vmov	d0, r6, r7
 8008fbc:	f1ca 0000 	rsb	r0, sl, #0
 8008fc0:	f000 fa92 	bl	80094e8 <scalbn>
 8008fc4:	ec57 6b10 	vmov	r6, r7, d0
 8008fc8:	4ba0      	ldr	r3, [pc, #640]	; (800924c <__kernel_rem_pio2+0x694>)
 8008fca:	ee10 0a10 	vmov	r0, s0
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	f7f7 fd9f 	bl	8000b14 <__aeabi_dcmpge>
 8008fd6:	b1f8      	cbz	r0, 8009018 <__kernel_rem_pio2+0x460>
 8008fd8:	4b9d      	ldr	r3, [pc, #628]	; (8009250 <__kernel_rem_pio2+0x698>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4630      	mov	r0, r6
 8008fde:	4639      	mov	r1, r7
 8008fe0:	f7f7 fb12 	bl	8000608 <__aeabi_dmul>
 8008fe4:	f7f7 fdc0 	bl	8000b68 <__aeabi_d2iz>
 8008fe8:	4680      	mov	r8, r0
 8008fea:	f7f7 faa3 	bl	8000534 <__aeabi_i2d>
 8008fee:	4b97      	ldr	r3, [pc, #604]	; (800924c <__kernel_rem_pio2+0x694>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f7f7 fb09 	bl	8000608 <__aeabi_dmul>
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7f7 f94b 	bl	8000298 <__aeabi_dsub>
 8009002:	f7f7 fdb1 	bl	8000b68 <__aeabi_d2iz>
 8009006:	1c65      	adds	r5, r4, #1
 8009008:	ab0e      	add	r3, sp, #56	; 0x38
 800900a:	f10a 0a18 	add.w	sl, sl, #24
 800900e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009012:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009016:	e720      	b.n	8008e5a <__kernel_rem_pio2+0x2a2>
 8009018:	4630      	mov	r0, r6
 800901a:	4639      	mov	r1, r7
 800901c:	f7f7 fda4 	bl	8000b68 <__aeabi_d2iz>
 8009020:	ab0e      	add	r3, sp, #56	; 0x38
 8009022:	4625      	mov	r5, r4
 8009024:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009028:	e717      	b.n	8008e5a <__kernel_rem_pio2+0x2a2>
 800902a:	ab0e      	add	r3, sp, #56	; 0x38
 800902c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009030:	f7f7 fa80 	bl	8000534 <__aeabi_i2d>
 8009034:	4632      	mov	r2, r6
 8009036:	463b      	mov	r3, r7
 8009038:	f7f7 fae6 	bl	8000608 <__aeabi_dmul>
 800903c:	4b84      	ldr	r3, [pc, #528]	; (8009250 <__kernel_rem_pio2+0x698>)
 800903e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009042:	2200      	movs	r2, #0
 8009044:	4630      	mov	r0, r6
 8009046:	4639      	mov	r1, r7
 8009048:	f7f7 fade 	bl	8000608 <__aeabi_dmul>
 800904c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009050:	4606      	mov	r6, r0
 8009052:	460f      	mov	r7, r1
 8009054:	e70f      	b.n	8008e76 <__kernel_rem_pio2+0x2be>
 8009056:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800905a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800905e:	f7f7 fad3 	bl	8000608 <__aeabi_dmul>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800906a:	f7f7 f917 	bl	800029c <__adddf3>
 800906e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009072:	f108 0801 	add.w	r8, r8, #1
 8009076:	9b02      	ldr	r3, [sp, #8]
 8009078:	4598      	cmp	r8, r3
 800907a:	dc01      	bgt.n	8009080 <__kernel_rem_pio2+0x4c8>
 800907c:	45b8      	cmp	r8, r7
 800907e:	ddea      	ble.n	8009056 <__kernel_rem_pio2+0x49e>
 8009080:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009084:	ab4a      	add	r3, sp, #296	; 0x128
 8009086:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800908a:	ed87 7b00 	vstr	d7, [r7]
 800908e:	3e01      	subs	r6, #1
 8009090:	e6f8      	b.n	8008e84 <__kernel_rem_pio2+0x2cc>
 8009092:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009094:	2b02      	cmp	r3, #2
 8009096:	dc0b      	bgt.n	80090b0 <__kernel_rem_pio2+0x4f8>
 8009098:	2b00      	cmp	r3, #0
 800909a:	dc35      	bgt.n	8009108 <__kernel_rem_pio2+0x550>
 800909c:	d059      	beq.n	8009152 <__kernel_rem_pio2+0x59a>
 800909e:	9b04      	ldr	r3, [sp, #16]
 80090a0:	f003 0007 	and.w	r0, r3, #7
 80090a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80090a8:	ecbd 8b02 	vpop	{d8}
 80090ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d1f3      	bne.n	800909e <__kernel_rem_pio2+0x4e6>
 80090b6:	ab4a      	add	r3, sp, #296	; 0x128
 80090b8:	4423      	add	r3, r4
 80090ba:	9306      	str	r3, [sp, #24]
 80090bc:	461c      	mov	r4, r3
 80090be:	469a      	mov	sl, r3
 80090c0:	9502      	str	r5, [sp, #8]
 80090c2:	9b02      	ldr	r3, [sp, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f1aa 0a08 	sub.w	sl, sl, #8
 80090ca:	dc6b      	bgt.n	80091a4 <__kernel_rem_pio2+0x5ec>
 80090cc:	46aa      	mov	sl, r5
 80090ce:	f1ba 0f01 	cmp.w	sl, #1
 80090d2:	f1a4 0408 	sub.w	r4, r4, #8
 80090d6:	f300 8085 	bgt.w	80091e4 <__kernel_rem_pio2+0x62c>
 80090da:	9c06      	ldr	r4, [sp, #24]
 80090dc:	2000      	movs	r0, #0
 80090de:	3408      	adds	r4, #8
 80090e0:	2100      	movs	r1, #0
 80090e2:	2d01      	cmp	r5, #1
 80090e4:	f300 809d 	bgt.w	8009222 <__kernel_rem_pio2+0x66a>
 80090e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80090ec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80090f0:	f1bb 0f00 	cmp.w	fp, #0
 80090f4:	f040 809b 	bne.w	800922e <__kernel_rem_pio2+0x676>
 80090f8:	9b01      	ldr	r3, [sp, #4]
 80090fa:	e9c3 5600 	strd	r5, r6, [r3]
 80090fe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009102:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009106:	e7ca      	b.n	800909e <__kernel_rem_pio2+0x4e6>
 8009108:	3408      	adds	r4, #8
 800910a:	ab4a      	add	r3, sp, #296	; 0x128
 800910c:	441c      	add	r4, r3
 800910e:	462e      	mov	r6, r5
 8009110:	2000      	movs	r0, #0
 8009112:	2100      	movs	r1, #0
 8009114:	2e00      	cmp	r6, #0
 8009116:	da36      	bge.n	8009186 <__kernel_rem_pio2+0x5ce>
 8009118:	f1bb 0f00 	cmp.w	fp, #0
 800911c:	d039      	beq.n	8009192 <__kernel_rem_pio2+0x5da>
 800911e:	4602      	mov	r2, r0
 8009120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009124:	9c01      	ldr	r4, [sp, #4]
 8009126:	e9c4 2300 	strd	r2, r3, [r4]
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009132:	f7f7 f8b1 	bl	8000298 <__aeabi_dsub>
 8009136:	ae4c      	add	r6, sp, #304	; 0x130
 8009138:	2401      	movs	r4, #1
 800913a:	42a5      	cmp	r5, r4
 800913c:	da2c      	bge.n	8009198 <__kernel_rem_pio2+0x5e0>
 800913e:	f1bb 0f00 	cmp.w	fp, #0
 8009142:	d002      	beq.n	800914a <__kernel_rem_pio2+0x592>
 8009144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009148:	4619      	mov	r1, r3
 800914a:	9b01      	ldr	r3, [sp, #4]
 800914c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009150:	e7a5      	b.n	800909e <__kernel_rem_pio2+0x4e6>
 8009152:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009156:	eb0d 0403 	add.w	r4, sp, r3
 800915a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800915e:	2000      	movs	r0, #0
 8009160:	2100      	movs	r1, #0
 8009162:	2d00      	cmp	r5, #0
 8009164:	da09      	bge.n	800917a <__kernel_rem_pio2+0x5c2>
 8009166:	f1bb 0f00 	cmp.w	fp, #0
 800916a:	d002      	beq.n	8009172 <__kernel_rem_pio2+0x5ba>
 800916c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009170:	4619      	mov	r1, r3
 8009172:	9b01      	ldr	r3, [sp, #4]
 8009174:	e9c3 0100 	strd	r0, r1, [r3]
 8009178:	e791      	b.n	800909e <__kernel_rem_pio2+0x4e6>
 800917a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800917e:	f7f7 f88d 	bl	800029c <__adddf3>
 8009182:	3d01      	subs	r5, #1
 8009184:	e7ed      	b.n	8009162 <__kernel_rem_pio2+0x5aa>
 8009186:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800918a:	f7f7 f887 	bl	800029c <__adddf3>
 800918e:	3e01      	subs	r6, #1
 8009190:	e7c0      	b.n	8009114 <__kernel_rem_pio2+0x55c>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	e7c5      	b.n	8009124 <__kernel_rem_pio2+0x56c>
 8009198:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800919c:	f7f7 f87e 	bl	800029c <__adddf3>
 80091a0:	3401      	adds	r4, #1
 80091a2:	e7ca      	b.n	800913a <__kernel_rem_pio2+0x582>
 80091a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80091a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80091ac:	9b02      	ldr	r3, [sp, #8]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	9302      	str	r3, [sp, #8]
 80091b2:	4632      	mov	r2, r6
 80091b4:	463b      	mov	r3, r7
 80091b6:	4640      	mov	r0, r8
 80091b8:	4649      	mov	r1, r9
 80091ba:	f7f7 f86f 	bl	800029c <__adddf3>
 80091be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4640      	mov	r0, r8
 80091c8:	4649      	mov	r1, r9
 80091ca:	f7f7 f865 	bl	8000298 <__aeabi_dsub>
 80091ce:	4632      	mov	r2, r6
 80091d0:	463b      	mov	r3, r7
 80091d2:	f7f7 f863 	bl	800029c <__adddf3>
 80091d6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80091da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80091de:	ed8a 7b00 	vstr	d7, [sl]
 80091e2:	e76e      	b.n	80090c2 <__kernel_rem_pio2+0x50a>
 80091e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80091e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80091ec:	4640      	mov	r0, r8
 80091ee:	4632      	mov	r2, r6
 80091f0:	463b      	mov	r3, r7
 80091f2:	4649      	mov	r1, r9
 80091f4:	f7f7 f852 	bl	800029c <__adddf3>
 80091f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4640      	mov	r0, r8
 8009202:	4649      	mov	r1, r9
 8009204:	f7f7 f848 	bl	8000298 <__aeabi_dsub>
 8009208:	4632      	mov	r2, r6
 800920a:	463b      	mov	r3, r7
 800920c:	f7f7 f846 	bl	800029c <__adddf3>
 8009210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009214:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009218:	ed84 7b00 	vstr	d7, [r4]
 800921c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009220:	e755      	b.n	80090ce <__kernel_rem_pio2+0x516>
 8009222:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009226:	f7f7 f839 	bl	800029c <__adddf3>
 800922a:	3d01      	subs	r5, #1
 800922c:	e759      	b.n	80090e2 <__kernel_rem_pio2+0x52a>
 800922e:	9b01      	ldr	r3, [sp, #4]
 8009230:	9a01      	ldr	r2, [sp, #4]
 8009232:	601d      	str	r5, [r3, #0]
 8009234:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009238:	605c      	str	r4, [r3, #4]
 800923a:	609f      	str	r7, [r3, #8]
 800923c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009240:	60d3      	str	r3, [r2, #12]
 8009242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009246:	6110      	str	r0, [r2, #16]
 8009248:	6153      	str	r3, [r2, #20]
 800924a:	e728      	b.n	800909e <__kernel_rem_pio2+0x4e6>
 800924c:	41700000 	.word	0x41700000
 8009250:	3e700000 	.word	0x3e700000
 8009254:	00000000 	.word	0x00000000

08009258 <__kernel_sin>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	ed2d 8b04 	vpush	{d8-d9}
 8009260:	eeb0 8a41 	vmov.f32	s16, s2
 8009264:	eef0 8a61 	vmov.f32	s17, s3
 8009268:	ec55 4b10 	vmov	r4, r5, d0
 800926c:	b083      	sub	sp, #12
 800926e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009272:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009276:	9001      	str	r0, [sp, #4]
 8009278:	da06      	bge.n	8009288 <__kernel_sin+0x30>
 800927a:	ee10 0a10 	vmov	r0, s0
 800927e:	4629      	mov	r1, r5
 8009280:	f7f7 fc72 	bl	8000b68 <__aeabi_d2iz>
 8009284:	2800      	cmp	r0, #0
 8009286:	d051      	beq.n	800932c <__kernel_sin+0xd4>
 8009288:	4622      	mov	r2, r4
 800928a:	462b      	mov	r3, r5
 800928c:	4620      	mov	r0, r4
 800928e:	4629      	mov	r1, r5
 8009290:	f7f7 f9ba 	bl	8000608 <__aeabi_dmul>
 8009294:	4682      	mov	sl, r0
 8009296:	468b      	mov	fp, r1
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4620      	mov	r0, r4
 800929e:	4629      	mov	r1, r5
 80092a0:	f7f7 f9b2 	bl	8000608 <__aeabi_dmul>
 80092a4:	a341      	add	r3, pc, #260	; (adr r3, 80093ac <__kernel_sin+0x154>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	4680      	mov	r8, r0
 80092ac:	4689      	mov	r9, r1
 80092ae:	4650      	mov	r0, sl
 80092b0:	4659      	mov	r1, fp
 80092b2:	f7f7 f9a9 	bl	8000608 <__aeabi_dmul>
 80092b6:	a33f      	add	r3, pc, #252	; (adr r3, 80093b4 <__kernel_sin+0x15c>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	f7f6 ffec 	bl	8000298 <__aeabi_dsub>
 80092c0:	4652      	mov	r2, sl
 80092c2:	465b      	mov	r3, fp
 80092c4:	f7f7 f9a0 	bl	8000608 <__aeabi_dmul>
 80092c8:	a33c      	add	r3, pc, #240	; (adr r3, 80093bc <__kernel_sin+0x164>)
 80092ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ce:	f7f6 ffe5 	bl	800029c <__adddf3>
 80092d2:	4652      	mov	r2, sl
 80092d4:	465b      	mov	r3, fp
 80092d6:	f7f7 f997 	bl	8000608 <__aeabi_dmul>
 80092da:	a33a      	add	r3, pc, #232	; (adr r3, 80093c4 <__kernel_sin+0x16c>)
 80092dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e0:	f7f6 ffda 	bl	8000298 <__aeabi_dsub>
 80092e4:	4652      	mov	r2, sl
 80092e6:	465b      	mov	r3, fp
 80092e8:	f7f7 f98e 	bl	8000608 <__aeabi_dmul>
 80092ec:	a337      	add	r3, pc, #220	; (adr r3, 80093cc <__kernel_sin+0x174>)
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	f7f6 ffd3 	bl	800029c <__adddf3>
 80092f6:	9b01      	ldr	r3, [sp, #4]
 80092f8:	4606      	mov	r6, r0
 80092fa:	460f      	mov	r7, r1
 80092fc:	b9eb      	cbnz	r3, 800933a <__kernel_sin+0xe2>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	4650      	mov	r0, sl
 8009304:	4659      	mov	r1, fp
 8009306:	f7f7 f97f 	bl	8000608 <__aeabi_dmul>
 800930a:	a325      	add	r3, pc, #148	; (adr r3, 80093a0 <__kernel_sin+0x148>)
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	f7f6 ffc2 	bl	8000298 <__aeabi_dsub>
 8009314:	4642      	mov	r2, r8
 8009316:	464b      	mov	r3, r9
 8009318:	f7f7 f976 	bl	8000608 <__aeabi_dmul>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4620      	mov	r0, r4
 8009322:	4629      	mov	r1, r5
 8009324:	f7f6 ffba 	bl	800029c <__adddf3>
 8009328:	4604      	mov	r4, r0
 800932a:	460d      	mov	r5, r1
 800932c:	ec45 4b10 	vmov	d0, r4, r5
 8009330:	b003      	add	sp, #12
 8009332:	ecbd 8b04 	vpop	{d8-d9}
 8009336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933a:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <__kernel_sin+0x150>)
 800933c:	ec51 0b18 	vmov	r0, r1, d8
 8009340:	2200      	movs	r2, #0
 8009342:	f7f7 f961 	bl	8000608 <__aeabi_dmul>
 8009346:	4632      	mov	r2, r6
 8009348:	ec41 0b19 	vmov	d9, r0, r1
 800934c:	463b      	mov	r3, r7
 800934e:	4640      	mov	r0, r8
 8009350:	4649      	mov	r1, r9
 8009352:	f7f7 f959 	bl	8000608 <__aeabi_dmul>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	ec51 0b19 	vmov	r0, r1, d9
 800935e:	f7f6 ff9b 	bl	8000298 <__aeabi_dsub>
 8009362:	4652      	mov	r2, sl
 8009364:	465b      	mov	r3, fp
 8009366:	f7f7 f94f 	bl	8000608 <__aeabi_dmul>
 800936a:	ec53 2b18 	vmov	r2, r3, d8
 800936e:	f7f6 ff93 	bl	8000298 <__aeabi_dsub>
 8009372:	a30b      	add	r3, pc, #44	; (adr r3, 80093a0 <__kernel_sin+0x148>)
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	4606      	mov	r6, r0
 800937a:	460f      	mov	r7, r1
 800937c:	4640      	mov	r0, r8
 800937e:	4649      	mov	r1, r9
 8009380:	f7f7 f942 	bl	8000608 <__aeabi_dmul>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4630      	mov	r0, r6
 800938a:	4639      	mov	r1, r7
 800938c:	f7f6 ff86 	bl	800029c <__adddf3>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4620      	mov	r0, r4
 8009396:	4629      	mov	r1, r5
 8009398:	f7f6 ff7e 	bl	8000298 <__aeabi_dsub>
 800939c:	e7c4      	b.n	8009328 <__kernel_sin+0xd0>
 800939e:	bf00      	nop
 80093a0:	55555549 	.word	0x55555549
 80093a4:	3fc55555 	.word	0x3fc55555
 80093a8:	3fe00000 	.word	0x3fe00000
 80093ac:	5acfd57c 	.word	0x5acfd57c
 80093b0:	3de5d93a 	.word	0x3de5d93a
 80093b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80093b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80093bc:	57b1fe7d 	.word	0x57b1fe7d
 80093c0:	3ec71de3 	.word	0x3ec71de3
 80093c4:	19c161d5 	.word	0x19c161d5
 80093c8:	3f2a01a0 	.word	0x3f2a01a0
 80093cc:	1110f8a6 	.word	0x1110f8a6
 80093d0:	3f811111 	.word	0x3f811111

080093d4 <fabs>:
 80093d4:	ec51 0b10 	vmov	r0, r1, d0
 80093d8:	ee10 2a10 	vmov	r2, s0
 80093dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093e0:	ec43 2b10 	vmov	d0, r2, r3
 80093e4:	4770      	bx	lr
	...

080093e8 <floor>:
 80093e8:	ec51 0b10 	vmov	r0, r1, d0
 80093ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80093f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80093f8:	2e13      	cmp	r6, #19
 80093fa:	ee10 5a10 	vmov	r5, s0
 80093fe:	ee10 8a10 	vmov	r8, s0
 8009402:	460c      	mov	r4, r1
 8009404:	dc32      	bgt.n	800946c <floor+0x84>
 8009406:	2e00      	cmp	r6, #0
 8009408:	da14      	bge.n	8009434 <floor+0x4c>
 800940a:	a333      	add	r3, pc, #204	; (adr r3, 80094d8 <floor+0xf0>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	f7f6 ff44 	bl	800029c <__adddf3>
 8009414:	2200      	movs	r2, #0
 8009416:	2300      	movs	r3, #0
 8009418:	f7f7 fb86 	bl	8000b28 <__aeabi_dcmpgt>
 800941c:	b138      	cbz	r0, 800942e <floor+0x46>
 800941e:	2c00      	cmp	r4, #0
 8009420:	da57      	bge.n	80094d2 <floor+0xea>
 8009422:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009426:	431d      	orrs	r5, r3
 8009428:	d001      	beq.n	800942e <floor+0x46>
 800942a:	4c2d      	ldr	r4, [pc, #180]	; (80094e0 <floor+0xf8>)
 800942c:	2500      	movs	r5, #0
 800942e:	4621      	mov	r1, r4
 8009430:	4628      	mov	r0, r5
 8009432:	e025      	b.n	8009480 <floor+0x98>
 8009434:	4f2b      	ldr	r7, [pc, #172]	; (80094e4 <floor+0xfc>)
 8009436:	4137      	asrs	r7, r6
 8009438:	ea01 0307 	and.w	r3, r1, r7
 800943c:	4303      	orrs	r3, r0
 800943e:	d01f      	beq.n	8009480 <floor+0x98>
 8009440:	a325      	add	r3, pc, #148	; (adr r3, 80094d8 <floor+0xf0>)
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	f7f6 ff29 	bl	800029c <__adddf3>
 800944a:	2200      	movs	r2, #0
 800944c:	2300      	movs	r3, #0
 800944e:	f7f7 fb6b 	bl	8000b28 <__aeabi_dcmpgt>
 8009452:	2800      	cmp	r0, #0
 8009454:	d0eb      	beq.n	800942e <floor+0x46>
 8009456:	2c00      	cmp	r4, #0
 8009458:	bfbe      	ittt	lt
 800945a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800945e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009462:	19a4      	addlt	r4, r4, r6
 8009464:	ea24 0407 	bic.w	r4, r4, r7
 8009468:	2500      	movs	r5, #0
 800946a:	e7e0      	b.n	800942e <floor+0x46>
 800946c:	2e33      	cmp	r6, #51	; 0x33
 800946e:	dd0b      	ble.n	8009488 <floor+0xa0>
 8009470:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009474:	d104      	bne.n	8009480 <floor+0x98>
 8009476:	ee10 2a10 	vmov	r2, s0
 800947a:	460b      	mov	r3, r1
 800947c:	f7f6 ff0e 	bl	800029c <__adddf3>
 8009480:	ec41 0b10 	vmov	d0, r0, r1
 8009484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009488:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800948c:	f04f 33ff 	mov.w	r3, #4294967295
 8009490:	fa23 f707 	lsr.w	r7, r3, r7
 8009494:	4207      	tst	r7, r0
 8009496:	d0f3      	beq.n	8009480 <floor+0x98>
 8009498:	a30f      	add	r3, pc, #60	; (adr r3, 80094d8 <floor+0xf0>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f7f6 fefd 	bl	800029c <__adddf3>
 80094a2:	2200      	movs	r2, #0
 80094a4:	2300      	movs	r3, #0
 80094a6:	f7f7 fb3f 	bl	8000b28 <__aeabi_dcmpgt>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d0bf      	beq.n	800942e <floor+0x46>
 80094ae:	2c00      	cmp	r4, #0
 80094b0:	da02      	bge.n	80094b8 <floor+0xd0>
 80094b2:	2e14      	cmp	r6, #20
 80094b4:	d103      	bne.n	80094be <floor+0xd6>
 80094b6:	3401      	adds	r4, #1
 80094b8:	ea25 0507 	bic.w	r5, r5, r7
 80094bc:	e7b7      	b.n	800942e <floor+0x46>
 80094be:	2301      	movs	r3, #1
 80094c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80094c4:	fa03 f606 	lsl.w	r6, r3, r6
 80094c8:	4435      	add	r5, r6
 80094ca:	4545      	cmp	r5, r8
 80094cc:	bf38      	it	cc
 80094ce:	18e4      	addcc	r4, r4, r3
 80094d0:	e7f2      	b.n	80094b8 <floor+0xd0>
 80094d2:	2500      	movs	r5, #0
 80094d4:	462c      	mov	r4, r5
 80094d6:	e7aa      	b.n	800942e <floor+0x46>
 80094d8:	8800759c 	.word	0x8800759c
 80094dc:	7e37e43c 	.word	0x7e37e43c
 80094e0:	bff00000 	.word	0xbff00000
 80094e4:	000fffff 	.word	0x000fffff

080094e8 <scalbn>:
 80094e8:	b570      	push	{r4, r5, r6, lr}
 80094ea:	ec55 4b10 	vmov	r4, r5, d0
 80094ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80094f2:	4606      	mov	r6, r0
 80094f4:	462b      	mov	r3, r5
 80094f6:	b99a      	cbnz	r2, 8009520 <scalbn+0x38>
 80094f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80094fc:	4323      	orrs	r3, r4
 80094fe:	d036      	beq.n	800956e <scalbn+0x86>
 8009500:	4b39      	ldr	r3, [pc, #228]	; (80095e8 <scalbn+0x100>)
 8009502:	4629      	mov	r1, r5
 8009504:	ee10 0a10 	vmov	r0, s0
 8009508:	2200      	movs	r2, #0
 800950a:	f7f7 f87d 	bl	8000608 <__aeabi_dmul>
 800950e:	4b37      	ldr	r3, [pc, #220]	; (80095ec <scalbn+0x104>)
 8009510:	429e      	cmp	r6, r3
 8009512:	4604      	mov	r4, r0
 8009514:	460d      	mov	r5, r1
 8009516:	da10      	bge.n	800953a <scalbn+0x52>
 8009518:	a32b      	add	r3, pc, #172	; (adr r3, 80095c8 <scalbn+0xe0>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	e03a      	b.n	8009596 <scalbn+0xae>
 8009520:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009524:	428a      	cmp	r2, r1
 8009526:	d10c      	bne.n	8009542 <scalbn+0x5a>
 8009528:	ee10 2a10 	vmov	r2, s0
 800952c:	4620      	mov	r0, r4
 800952e:	4629      	mov	r1, r5
 8009530:	f7f6 feb4 	bl	800029c <__adddf3>
 8009534:	4604      	mov	r4, r0
 8009536:	460d      	mov	r5, r1
 8009538:	e019      	b.n	800956e <scalbn+0x86>
 800953a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800953e:	460b      	mov	r3, r1
 8009540:	3a36      	subs	r2, #54	; 0x36
 8009542:	4432      	add	r2, r6
 8009544:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009548:	428a      	cmp	r2, r1
 800954a:	dd08      	ble.n	800955e <scalbn+0x76>
 800954c:	2d00      	cmp	r5, #0
 800954e:	a120      	add	r1, pc, #128	; (adr r1, 80095d0 <scalbn+0xe8>)
 8009550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009554:	da1c      	bge.n	8009590 <scalbn+0xa8>
 8009556:	a120      	add	r1, pc, #128	; (adr r1, 80095d8 <scalbn+0xf0>)
 8009558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800955c:	e018      	b.n	8009590 <scalbn+0xa8>
 800955e:	2a00      	cmp	r2, #0
 8009560:	dd08      	ble.n	8009574 <scalbn+0x8c>
 8009562:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009566:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800956a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800956e:	ec45 4b10 	vmov	d0, r4, r5
 8009572:	bd70      	pop	{r4, r5, r6, pc}
 8009574:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009578:	da19      	bge.n	80095ae <scalbn+0xc6>
 800957a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800957e:	429e      	cmp	r6, r3
 8009580:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009584:	dd0a      	ble.n	800959c <scalbn+0xb4>
 8009586:	a112      	add	r1, pc, #72	; (adr r1, 80095d0 <scalbn+0xe8>)
 8009588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1e2      	bne.n	8009556 <scalbn+0x6e>
 8009590:	a30f      	add	r3, pc, #60	; (adr r3, 80095d0 <scalbn+0xe8>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f7f7 f837 	bl	8000608 <__aeabi_dmul>
 800959a:	e7cb      	b.n	8009534 <scalbn+0x4c>
 800959c:	a10a      	add	r1, pc, #40	; (adr r1, 80095c8 <scalbn+0xe0>)
 800959e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0b8      	beq.n	8009518 <scalbn+0x30>
 80095a6:	a10e      	add	r1, pc, #56	; (adr r1, 80095e0 <scalbn+0xf8>)
 80095a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ac:	e7b4      	b.n	8009518 <scalbn+0x30>
 80095ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095b2:	3236      	adds	r2, #54	; 0x36
 80095b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80095bc:	4620      	mov	r0, r4
 80095be:	4b0c      	ldr	r3, [pc, #48]	; (80095f0 <scalbn+0x108>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	e7e8      	b.n	8009596 <scalbn+0xae>
 80095c4:	f3af 8000 	nop.w
 80095c8:	c2f8f359 	.word	0xc2f8f359
 80095cc:	01a56e1f 	.word	0x01a56e1f
 80095d0:	8800759c 	.word	0x8800759c
 80095d4:	7e37e43c 	.word	0x7e37e43c
 80095d8:	8800759c 	.word	0x8800759c
 80095dc:	fe37e43c 	.word	0xfe37e43c
 80095e0:	c2f8f359 	.word	0xc2f8f359
 80095e4:	81a56e1f 	.word	0x81a56e1f
 80095e8:	43500000 	.word	0x43500000
 80095ec:	ffff3cb0 	.word	0xffff3cb0
 80095f0:	3c900000 	.word	0x3c900000

080095f4 <_init>:
 80095f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f6:	bf00      	nop
 80095f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fa:	bc08      	pop	{r3}
 80095fc:	469e      	mov	lr, r3
 80095fe:	4770      	bx	lr

08009600 <_fini>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	bf00      	nop
 8009604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009606:	bc08      	pop	{r3}
 8009608:	469e      	mov	lr, r3
 800960a:	4770      	bx	lr
