
F401RE_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  08009598  08009598  00019598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c48  08009c48  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009c48  08009c48  00019c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c50  08009c50  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c50  08009c50  00019c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001e0  08009e38  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08009e38  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dceb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5c  00000000  00000000  0002defb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0002fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00030a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001738d  00000000  00000000  00031600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dee3  00000000  00000000  0004898d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1d1  00000000  00000000  00056870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5a41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c7c  00000000  00000000  000e5a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800957c 	.word	0x0800957c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800957c 	.word	0x0800957c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fcb2 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f822 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 f9a0 	bl	8001358 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001018:	f000 f974 	bl	8001304 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800101c:	f000 f886 	bl	800112c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001020:	f000 f8d6 	bl	80011d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001024:	f000 f920 	bl	8001268 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <main+0x40>)
 800102a:	f001 fd2b 	bl	8002a84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <main+0x44>)
 8001030:	f001 fd28 	bl	8002a84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <main+0x48>)
 8001036:	f001 fccb 	bl	80029d0 <HAL_TIM_Base_Start>
  test(24, 4.216);
 800103a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001054 <main+0x4c>
 800103e:	2018      	movs	r0, #24
 8001040:	f002 fce2 	bl	8003a08 <test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001044:	e7fe      	b.n	8001044 <main+0x3c>
 8001046:	bf00      	nop
 8001048:	200001fc 	.word	0x200001fc
 800104c:	2000028c 	.word	0x2000028c
 8001050:	20000244 	.word	0x20000244
 8001054:	4086e979 	.word	0x4086e979

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f002 fdc4 	bl	8003bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <SystemClock_Config+0xcc>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a4:	4a20      	ldr	r2, [pc, #128]	; (8001128 <SystemClock_Config+0xd0>)
 80010a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2310      	movs	r3, #16
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010cc:	2308      	movs	r3, #8
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010d0:	2354      	movs	r3, #84	; 0x54
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010d8:	2307      	movs	r3, #7
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 ff8d 	bl	8002000 <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010ec:	f000 f9aa 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2102      	movs	r1, #2
 800110c:	4618      	mov	r0, r3
 800110e:	f001 f9ef 	bl	80024f0 <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001118:	f000 f994 	bl	8001444 <Error_Handler>
  }
}
 800111c:	bf00      	nop
 800111e:	3750      	adds	r7, #80	; 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_TIM1_Init+0x9c>)
 800114a:	4a20      	ldr	r2, [pc, #128]	; (80011cc <MX_TIM1_Init+0xa0>)
 800114c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001150:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001154:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000-1;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_TIM1_Init+0x9c>)
 800115e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001162:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_TIM1_Init+0x9c>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001178:	f001 fbda 	bl	8002930 <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001182:	f000 f95f 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001194:	f001 fde0 	bl	8002d58 <HAL_TIM_ConfigClockSource>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800119e:	f000 f951 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_TIM1_Init+0x9c>)
 80011b0:	f001 ffe6 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011ba:	f000 f943 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001fc 	.word	0x200001fc
 80011cc:	40010000 	.word	0x40010000

080011d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_TIM2_Init+0x94>)
 80011ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_TIM2_Init+0x94>)
 80011f6:	2253      	movs	r2, #83	; 0x53
 80011f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM2_Init+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_TIM2_Init+0x94>)
 8001202:	f04f 32ff 	mov.w	r2, #4294967295
 8001206:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_TIM2_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_TIM2_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001214:	4813      	ldr	r0, [pc, #76]	; (8001264 <MX_TIM2_Init+0x94>)
 8001216:	f001 fb8b 	bl	8002930 <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001220:	f000 f910 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001228:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4619      	mov	r1, r3
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <MX_TIM2_Init+0x94>)
 8001232:	f001 fd91 	bl	8002d58 <HAL_TIM_ConfigClockSource>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800123c:	f000 f902 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_TIM2_Init+0x94>)
 800124e:	f001 ff97 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001258:	f000 f8f4 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000244 	.word	0x20000244

08001268 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_TIM3_Init+0x94>)
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <MX_TIM3_Init+0x98>)
 8001288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM3_Init+0x94>)
 800128c:	2253      	movs	r2, #83	; 0x53
 800128e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM3_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_TIM3_Init+0x94>)
 8001298:	f240 32e7 	movw	r2, #999	; 0x3e7
 800129c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_TIM3_Init+0x94>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_TIM3_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <MX_TIM3_Init+0x94>)
 80012ac:	f001 fb40 	bl	8002930 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012b6:	f000 f8c5 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_TIM3_Init+0x94>)
 80012c8:	f001 fd46 	bl	8002d58 <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f000 f8b7 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_TIM3_Init+0x94>)
 80012e4:	f001 ff4c 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80012ee:	f000 f8a9 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000028c 	.word	0x2000028c
 8001300:	40000400 	.word	0x40000400

08001304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_USART2_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800133c:	f001 ffa2 	bl	8003284 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f000 f87d 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002d4 	.word	0x200002d4
 8001354:	40004400 	.word	0x40004400

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <MX_GPIO_Init+0xe0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a30      	ldr	r2, [pc, #192]	; (8001438 <MX_GPIO_Init+0xe0>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <MX_GPIO_Init+0xe0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MX_GPIO_Init+0xe0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a29      	ldr	r2, [pc, #164]	; (8001438 <MX_GPIO_Init+0xe0>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <MX_GPIO_Init+0xe0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a22      	ldr	r2, [pc, #136]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_GPIO_Init+0xe0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2120      	movs	r1, #32
 80013e2:	4816      	ldr	r0, [pc, #88]	; (800143c <MX_GPIO_Init+0xe4>)
 80013e4:	f000 fdce 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4810      	ldr	r0, [pc, #64]	; (8001440 <MX_GPIO_Init+0xe8>)
 8001400:	f000 fc3c 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001404:	2320      	movs	r3, #32
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4808      	ldr	r0, [pc, #32]	; (800143c <MX_GPIO_Init+0xe4>)
 800141c:	f000 fc2e 	bl	8001c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2028      	movs	r0, #40	; 0x28
 8001426:	f000 fbf2 	bl	8001c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800142a:	2028      	movs	r0, #40	; 0x28
 800142c:	f000 fc0b 	bl	8001c46 <HAL_NVIC_EnableIRQ>

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020800 	.word	0x40020800

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	e7fe      	b.n	800144c <Error_Handler+0x8>
	...

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_MspInit+0x4c>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_MspInit+0x4c>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800148e:	2006      	movs	r0, #6
 8001490:	f000 fbb2 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a26      	ldr	r2, [pc, #152]	; (8001548 <HAL_TIM_Base_MspInit+0xa8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d116      	bne.n	80014e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a24      	ldr	r2, [pc, #144]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2101      	movs	r1, #1
 80014d2:	2019      	movs	r0, #25
 80014d4:	f000 fb9b 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014d8:	2019      	movs	r0, #25
 80014da:	f000 fbb4 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014de:	e02e      	b.n	800153e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e8:	d10e      	bne.n	8001508 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a16      	ldr	r2, [pc, #88]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
}
 8001506:	e01a      	b.n	800153e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_TIM_Base_MspInit+0xb0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d115      	bne.n	800153e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a0c      	ldr	r2, [pc, #48]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_TIM_Base_MspInit+0xac>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	201d      	movs	r0, #29
 8001534:	f000 fb6b 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001538:	201d      	movs	r0, #29
 800153a:	f000 fb84 	bl	8001c46 <HAL_NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40010000 	.word	0x40010000
 800154c:	40023800 	.word	0x40023800
 8001550:	40000400 	.word	0x40000400

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_UART_MspInit+0x84>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12b      	bne.n	80015ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_UART_MspInit+0x88>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_UART_MspInit+0x88>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_UART_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ae:	230c      	movs	r3, #12
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015be:	2307      	movs	r3, #7
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <HAL_UART_MspInit+0x8c>)
 80015ca:	f000 fb57 	bl	8001c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40004400 	.word	0x40004400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 f9f2 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  if(GPIOA->ODR & 0x00000020){
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f003 0320 	and.w	r3, r3, #32
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <TIM1_UP_TIM10_IRQHandler+0x1e>
	  GPIOA->ODR=GPIOA->ODR & 0xFFFFFFDF;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800164e:	f023 0320 	bic.w	r3, r3, #32
 8001652:	6153      	str	r3, [r2, #20]
 8001654:	e005      	b.n	8001662 <TIM1_UP_TIM10_IRQHandler+0x2a>
  }
  else{
	  GPIOA->ODR=GPIOA->ODR | 0x00000020;
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <TIM1_UP_TIM10_IRQHandler+0x34>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	6153      	str	r3, [r2, #20]
  }
  //SERIAL_SendInt(TIM2->CNT);
  //SERIAL_SendNL();
  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001664:	f001 fa70 	bl	8002b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40020000 	.word	0x40020000
 8001670:	200001fc 	.word	0x200001fc
 8001674:	00000000 	.word	0x00000000

08001678 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  ITM_Port32(31)=1;// Time identification of Port 31 with 1
 800167e:	4b30      	ldr	r3, [pc, #192]	; (8001740 <TIM3_IRQHandler+0xc8>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]
  if(globalCounter<100){
 8001684:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <TIM3_IRQHandler+0xcc>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b63      	cmp	r3, #99	; 0x63
 800168a:	d846      	bhi.n	800171a <TIM3_IRQHandler+0xa2>
	  double counter = (double) TIM2->CNT;
 800168c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff3e 	bl	8000514 <__aeabi_ui2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  counter *= 0.000001;
 80016a0:	a321      	add	r3, pc, #132	; (adr r3, 8001728 <TIM3_IRQHandler+0xb0>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016aa:	f7fe ffad 	bl	8000608 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  double tenH =sin(2*M_PI*10*counter);
 80016b6:	a31e      	add	r3, pc, #120	; (adr r3, 8001730 <TIM3_IRQHandler+0xb8>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016c0:	f7fe ffa2 	bl	8000608 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	ec43 2b17 	vmov	d7, r2, r3
 80016cc:	eeb0 0a47 	vmov.f32	s0, s14
 80016d0:	eef0 0a67 	vmov.f32	s1, s15
 80016d4:	f006 ff08 	bl	80084e8 <sin>
 80016d8:	ed87 0b02 	vstr	d0, [r7, #8]
	  double twoH =sin(2*M_PI*2*counter);
 80016dc:	a316      	add	r3, pc, #88	; (adr r3, 8001738 <TIM3_IRQHandler+0xc0>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016e6:	f7fe ff8f 	bl	8000608 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	ec43 2b17 	vmov	d7, r2, r3
 80016f2:	eeb0 0a47 	vmov.f32	s0, s14
 80016f6:	eef0 0a67 	vmov.f32	s1, s15
 80016fa:	f006 fef5 	bl	80084e8 <sin>
 80016fe:	ed87 0b00 	vstr	d0, [r7]
	  SERIAL_SendFloatToPlot(tenH, twoH);
 8001702:	ed97 1b00 	vldr	d1, [r7]
 8001706:	ed97 0b02 	vldr	d0, [r7, #8]
 800170a:	f002 fa1b 	bl	8003b44 <SERIAL_SendFloatToPlot>
	  globalCounter++;
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <TIM3_IRQHandler+0xcc>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <TIM3_IRQHandler+0xcc>)
 8001718:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800171a:	480b      	ldr	r0, [pc, #44]	; (8001748 <TIM3_IRQHandler+0xd0>)
 800171c:	f001 fa14 	bl	8002b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	a0b5ed8d 	.word	0xa0b5ed8d
 800172c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001730:	2955385e 	.word	0x2955385e
 8001734:	404f6a7a 	.word	0x404f6a7a
 8001738:	54442d18 	.word	0x54442d18
 800173c:	402921fb 	.word	0x402921fb
 8001740:	e000007c 	.word	0xe000007c
 8001744:	20000318 	.word	0x20000318
 8001748:	2000028c 	.word	0x2000028c

0800174c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Stop_IT(&htim3);
  }
  else{
	  HAL_TIM_Base_Start_IT(&htim3);
  }*/
  if(globalCounter==100){
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <EXTI15_10_IRQHandler+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b64      	cmp	r3, #100	; 0x64
 8001756:	d102      	bne.n	800175e <EXTI15_10_IRQHandler+0x12>
	  globalCounter=0;
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <EXTI15_10_IRQHandler+0x20>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800175e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001762:	f000 fc29 	bl	8001fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000318 	.word	0x20000318

08001770 <_getpid>:
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
 8001774:	2301      	movs	r3, #1
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_kill>:
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	f002 fa09 	bl	8003ba0 <__errno>
 800178e:	4603      	mov	r3, r0
 8001790:	2216      	movs	r2, #22
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_exit>:
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffe7 	bl	8001780 <_kill>
 80017b2:	e7fe      	b.n	80017b2 <_exit+0x12>

080017b4 <_read>:
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e00a      	b.n	80017dc <_read+0x28>
 80017c6:	f3af 8000 	nop.w
 80017ca:	4601      	mov	r1, r0
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60ba      	str	r2, [r7, #8]
 80017d2:	b2ca      	uxtb	r2, r1
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbf0      	blt.n	80017c6 <_read+0x12>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_write>:
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e009      	b.n	8001814 <_write+0x26>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	60ba      	str	r2, [r7, #8]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f3af 8000 	nop.w
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf1      	blt.n	8001800 <_write+0x12>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_close>:
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_fstat>:
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	2300      	movs	r3, #0
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_isatty>:
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	2301      	movs	r3, #1
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_lseek>:
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	2300      	movs	r3, #0
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <_sbrk>:
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	4a14      	ldr	r2, [pc, #80]	; (80018ec <_sbrk+0x5c>)
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <_sbrk+0x60>)
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <_sbrk+0x22>
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <_sbrk+0x64>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <_sbrk+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <_sbrk+0x40>
 80018c0:	f002 f96e 	bl	8003ba0 <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	e009      	b.n	80018e4 <_sbrk+0x54>
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <_sbrk+0x64>)
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20018000 	.word	0x20018000
 80018f0:	00000400 	.word	0x00000400
 80018f4:	2000031c 	.word	0x2000031c
 80018f8:	20000348 	.word	0x20000348

080018fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <Reset_Handler>:
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopFillZerobss+0x12>
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <LoopFillZerobss+0x16>)
 8001926:	490e      	ldr	r1, [pc, #56]	; (8001960 <LoopFillZerobss+0x1a>)
 8001928:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <LoopFillZerobss+0x1e>)
 800192a:	2300      	movs	r3, #0
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:
 800192e:	58d4      	ldr	r4, [r2, r3]
 8001930:	50c4      	str	r4, [r0, r3]
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:
 8001934:	18c4      	adds	r4, r0, r3
 8001936:	428c      	cmp	r4, r1
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <LoopFillZerobss+0x22>)
 800193c:	4c0b      	ldr	r4, [pc, #44]	; (800196c <LoopFillZerobss+0x26>)
 800193e:	2300      	movs	r3, #0
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:
 8001946:	42a2      	cmp	r2, r4
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>
 800194a:	f7ff ffd7 	bl	80018fc <SystemInit>
 800194e:	f002 f92d 	bl	8003bac <__libc_init_array>
 8001952:	f7ff fb59 	bl	8001008 <main>
 8001956:	4770      	bx	lr
 8001958:	20018000 	.word	0x20018000
 800195c:	20000000 	.word	0x20000000
 8001960:	200001e0 	.word	0x200001e0
 8001964:	08009c58 	.word	0x08009c58
 8001968:	200001e0 	.word	0x200001e0
 800196c:	20000348 	.word	0x20000348

08001970 <ADC_IRQHandler>:
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_Init+0x40>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_Init+0x40>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_Init+0x40>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 f92b 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 f808 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fd52 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f943 	bl	8001c62 <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f000 f90b 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20000320 	.word	0x20000320

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000320 	.word	0x20000320

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff8e 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff29 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff3e 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff8e 	bl	8001b4c <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5d 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff31 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffa2 	bl	8001bb4 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e159      	b.n	8001f4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8148 	bne.w	8001f46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d005      	beq.n	8001cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d130      	bne.n	8001d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 0201 	and.w	r2, r3, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d017      	beq.n	8001d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d123      	bne.n	8001dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80a2 	beq.w	8001f46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a56      	ldr	r2, [pc, #344]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b54      	ldr	r3, [pc, #336]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1e:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <HAL_GPIO_Init+0x2f0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d019      	beq.n	8001e7e <HAL_GPIO_Init+0x202>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a48      	ldr	r2, [pc, #288]	; (8001f70 <HAL_GPIO_Init+0x2f4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_GPIO_Init+0x1fe>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a47      	ldr	r2, [pc, #284]	; (8001f74 <HAL_GPIO_Init+0x2f8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00d      	beq.n	8001e76 <HAL_GPIO_Init+0x1fa>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a46      	ldr	r2, [pc, #280]	; (8001f78 <HAL_GPIO_Init+0x2fc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x1f6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a45      	ldr	r2, [pc, #276]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d101      	bne.n	8001e6e <HAL_GPIO_Init+0x1f2>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e008      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e6e:	2307      	movs	r3, #7
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e72:	2303      	movs	r3, #3
 8001e74:	e004      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	f002 0203 	and.w	r2, r2, #3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	4093      	lsls	r3, r2
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e90:	4935      	ldr	r1, [pc, #212]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec2:	4a2f      	ldr	r2, [pc, #188]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eec:	4a24      	ldr	r2, [pc, #144]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef2:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f16:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f40:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	f67f aea2 	bls.w	8001c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f806 	bl	8001fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e267      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d075      	beq.n	800210a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d00c      	beq.n	8002044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202a:	4b85      	ldr	r3, [pc, #532]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002032:	2b08      	cmp	r3, #8
 8002034:	d112      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002036:	4b82      	ldr	r3, [pc, #520]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002042:	d10b      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	4b7e      	ldr	r3, [pc, #504]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d05b      	beq.n	8002108 <HAL_RCC_OscConfig+0x108>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d157      	bne.n	8002108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e242      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002064:	d106      	bne.n	8002074 <HAL_RCC_OscConfig+0x74>
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a75      	ldr	r2, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e01d      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x98>
 800207e:	4b70      	ldr	r3, [pc, #448]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6f      	ldr	r2, [pc, #444]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6c      	ldr	r2, [pc, #432]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002098:	4b69      	ldr	r3, [pc, #420]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a68      	ldr	r2, [pc, #416]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b66      	ldr	r3, [pc, #408]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a65      	ldr	r2, [pc, #404]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fcc2 	bl	8001a40 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff fcbe 	bl	8001a40 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e207      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0xc0>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fcae 	bl	8001a40 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fcaa 	bl	8001a40 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1f3      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0xe8>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d063      	beq.n	80021de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002116:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212a:	2b08      	cmp	r3, #8
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b44      	ldr	r3, [pc, #272]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1c7      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4937      	ldr	r1, [pc, #220]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e03a      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b34      	ldr	r3, [pc, #208]	; (8002244 <HAL_RCC_OscConfig+0x244>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7ff fc63 	bl	8001a40 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217e:	f7ff fc5f 	bl	8001a40 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1a8      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4925      	ldr	r1, [pc, #148]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_RCC_OscConfig+0x244>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff fc42 	bl	8001a40 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c0:	f7ff fc3e 	bl	8001a40 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e187      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d036      	beq.n	8002258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_RCC_OscConfig+0x248>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7ff fc22 	bl	8001a40 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff fc1e 	bl	8001a40 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e167      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x200>
 800221e:	e01b      	b.n	8002258 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_OscConfig+0x248>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7ff fc0b 	bl	8001a40 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	e00e      	b.n	800224c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222e:	f7ff fc07 	bl	8001a40 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d907      	bls.n	800224c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e150      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
 8002240:	40023800 	.word	0x40023800
 8002244:	42470000 	.word	0x42470000
 8002248:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ea      	bne.n	800222e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8097 	beq.w	8002394 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b81      	ldr	r3, [pc, #516]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b7d      	ldr	r3, [pc, #500]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a7c      	ldr	r2, [pc, #496]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b7a      	ldr	r3, [pc, #488]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b77      	ldr	r3, [pc, #476]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b74      	ldr	r3, [pc, #464]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a73      	ldr	r2, [pc, #460]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7ff fbc7 	bl	8001a40 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7ff fbc3 	bl	8001a40 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e10c      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x2ea>
 80022dc:	4b64      	ldr	r3, [pc, #400]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4a63      	ldr	r2, [pc, #396]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6713      	str	r3, [r2, #112]	; 0x70
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x324>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x30c>
 80022f2:	4b5f      	ldr	r3, [pc, #380]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a5e      	ldr	r2, [pc, #376]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	4b5c      	ldr	r3, [pc, #368]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a5b      	ldr	r2, [pc, #364]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0x324>
 800230c:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4a57      	ldr	r2, [pc, #348]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	6713      	str	r3, [r2, #112]	; 0x70
 8002318:	4b55      	ldr	r3, [pc, #340]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a54      	ldr	r2, [pc, #336]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800231e:	f023 0304 	bic.w	r3, r3, #4
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7ff fb88 	bl	8001a40 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7ff fb84 	bl	8001a40 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0cb      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	4b49      	ldr	r3, [pc, #292]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0ee      	beq.n	8002334 <HAL_RCC_OscConfig+0x334>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7ff fb72 	bl	8001a40 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7ff fb6e 	bl	8001a40 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0b5      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002376:	4b3e      	ldr	r3, [pc, #248]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ee      	bne.n	8002360 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b39      	ldr	r3, [pc, #228]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	4a38      	ldr	r2, [pc, #224]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002392:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80a1 	beq.w	80024e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239e:	4b34      	ldr	r3, [pc, #208]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d05c      	beq.n	8002464 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d141      	bne.n	8002436 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b31      	ldr	r3, [pc, #196]	; (8002478 <HAL_RCC_OscConfig+0x478>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7ff fb42 	bl	8001a40 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7ff fb3e 	bl	8001a40 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e087      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	491b      	ldr	r1, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x478>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7ff fb17 	bl	8001a40 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002416:	f7ff fb13 	bl	8001a40 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e05c      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x416>
 8002434:	e054      	b.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_RCC_OscConfig+0x478>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff fb00 	bl	8001a40 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7ff fafc 	bl	8001a40 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e045      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x444>
 8002462:	e03d      	b.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d107      	bne.n	800247c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e038      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
 8002470:	40023800 	.word	0x40023800
 8002474:	40007000 	.word	0x40007000
 8002478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x4ec>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d028      	beq.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d121      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d11a      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024ac:	4013      	ands	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d111      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	3b01      	subs	r3, #1
 80024c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800

080024f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0cc      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d90c      	bls.n	800252c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b8      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800254e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	494d      	ldr	r1, [pc, #308]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d044      	beq.n	8002610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d119      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b3f      	ldr	r3, [pc, #252]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e06f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e067      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b37      	ldr	r3, [pc, #220]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4934      	ldr	r1, [pc, #208]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7ff fa2e 	bl	8001a40 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7ff fa2a 	bl	8001a40 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e04f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d20c      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e032      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4916      	ldr	r1, [pc, #88]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f821 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490a      	ldr	r1, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff f98e 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00
 80026ac:	40023800 	.word	0x40023800
 80026b0:	080095b0 	.word	0x080095b0
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c0:	b094      	sub	sp, #80	; 0x50
 80026c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	647b      	str	r3, [r7, #68]	; 0x44
 80026c8:	2300      	movs	r3, #0
 80026ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026cc:	2300      	movs	r3, #0
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d4:	4b79      	ldr	r3, [pc, #484]	; (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d00d      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x40>
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	f200 80e1 	bhi.w	80028a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x34>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ee:	e0db      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b73      	ldr	r3, [pc, #460]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026f4:	e0db      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f6:	4b73      	ldr	r3, [pc, #460]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80026f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026fa:	e0d8      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026fc:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002704:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002706:	4b6d      	ldr	r3, [pc, #436]	; (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d063      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002712:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	099b      	lsrs	r3, r3, #6
 8002718:	2200      	movs	r2, #0
 800271a:	63bb      	str	r3, [r7, #56]	; 0x38
 800271c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002724:	633b      	str	r3, [r7, #48]	; 0x30
 8002726:	2300      	movs	r3, #0
 8002728:	637b      	str	r3, [r7, #52]	; 0x34
 800272a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800272e:	4622      	mov	r2, r4
 8002730:	462b      	mov	r3, r5
 8002732:	f04f 0000 	mov.w	r0, #0
 8002736:	f04f 0100 	mov.w	r1, #0
 800273a:	0159      	lsls	r1, r3, #5
 800273c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002740:	0150      	lsls	r0, r2, #5
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4621      	mov	r1, r4
 8002748:	1a51      	subs	r1, r2, r1
 800274a:	6139      	str	r1, [r7, #16]
 800274c:	4629      	mov	r1, r5
 800274e:	eb63 0301 	sbc.w	r3, r3, r1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002760:	4659      	mov	r1, fp
 8002762:	018b      	lsls	r3, r1, #6
 8002764:	4651      	mov	r1, sl
 8002766:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800276a:	4651      	mov	r1, sl
 800276c:	018a      	lsls	r2, r1, #6
 800276e:	4651      	mov	r1, sl
 8002770:	ebb2 0801 	subs.w	r8, r2, r1
 8002774:	4659      	mov	r1, fp
 8002776:	eb63 0901 	sbc.w	r9, r3, r1
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800278a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800278e:	4690      	mov	r8, r2
 8002790:	4699      	mov	r9, r3
 8002792:	4623      	mov	r3, r4
 8002794:	eb18 0303 	adds.w	r3, r8, r3
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	462b      	mov	r3, r5
 800279c:	eb49 0303 	adc.w	r3, r9, r3
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ae:	4629      	mov	r1, r5
 80027b0:	024b      	lsls	r3, r1, #9
 80027b2:	4621      	mov	r1, r4
 80027b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027b8:	4621      	mov	r1, r4
 80027ba:	024a      	lsls	r2, r1, #9
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c2:	2200      	movs	r2, #0
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027cc:	f7fe fa64 	bl	8000c98 <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4613      	mov	r3, r2
 80027d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027d8:	e058      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027da:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	099b      	lsrs	r3, r3, #6
 80027e0:	2200      	movs	r2, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	4611      	mov	r1, r2
 80027e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	2300      	movs	r3, #0
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
 80027f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027f4:	4642      	mov	r2, r8
 80027f6:	464b      	mov	r3, r9
 80027f8:	f04f 0000 	mov.w	r0, #0
 80027fc:	f04f 0100 	mov.w	r1, #0
 8002800:	0159      	lsls	r1, r3, #5
 8002802:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002806:	0150      	lsls	r0, r2, #5
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4641      	mov	r1, r8
 800280e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002812:	4649      	mov	r1, r9
 8002814:	eb63 0b01 	sbc.w	fp, r3, r1
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002824:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002828:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800282c:	ebb2 040a 	subs.w	r4, r2, sl
 8002830:	eb63 050b 	sbc.w	r5, r3, fp
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	00eb      	lsls	r3, r5, #3
 800283e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002842:	00e2      	lsls	r2, r4, #3
 8002844:	4614      	mov	r4, r2
 8002846:	461d      	mov	r5, r3
 8002848:	4643      	mov	r3, r8
 800284a:	18e3      	adds	r3, r4, r3
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	464b      	mov	r3, r9
 8002850:	eb45 0303 	adc.w	r3, r5, r3
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002862:	4629      	mov	r1, r5
 8002864:	028b      	lsls	r3, r1, #10
 8002866:	4621      	mov	r1, r4
 8002868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800286c:	4621      	mov	r1, r4
 800286e:	028a      	lsls	r2, r1, #10
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002876:	2200      	movs	r2, #0
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	61fa      	str	r2, [r7, #28]
 800287c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002880:	f7fe fa0a 	bl	8000c98 <__aeabi_uldivmod>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4613      	mov	r3, r2
 800288a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	3301      	adds	r3, #1
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800289c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800289e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028a6:	e002      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3750      	adds	r7, #80	; 0x50
 80028b4:	46bd      	mov	sp, r7
 80028b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800
 80028c0:	00f42400 	.word	0x00f42400
 80028c4:	007a1200 	.word	0x007a1200

080028c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000000 	.word	0x20000000

080028e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028e4:	f7ff fff0 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0a9b      	lsrs	r3, r3, #10
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4903      	ldr	r1, [pc, #12]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40023800 	.word	0x40023800
 8002904:	080095c0 	.word	0x080095c0

08002908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800290c:	f7ff ffdc 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0b5b      	lsrs	r3, r3, #13
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4903      	ldr	r1, [pc, #12]	; (800292c <HAL_RCC_GetPCLK2Freq+0x24>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	080095c0 	.word	0x080095c0

08002930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e041      	b.n	80029c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe fda2 	bl	80014a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f000 faec 	bl	8002f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d001      	beq.n	80029e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e03c      	b.n	8002a62 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_TIM_Base_Start+0xa0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d018      	beq.n	8002a2c <HAL_TIM_Base_Start+0x5c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d013      	beq.n	8002a2c <HAL_TIM_Base_Start+0x5c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <HAL_TIM_Base_Start+0xa4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00e      	beq.n	8002a2c <HAL_TIM_Base_Start+0x5c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <HAL_TIM_Base_Start+0xa8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d009      	beq.n	8002a2c <HAL_TIM_Base_Start+0x5c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <HAL_TIM_Base_Start+0xac>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d004      	beq.n	8002a2c <HAL_TIM_Base_Start+0x5c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <HAL_TIM_Base_Start+0xb0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d111      	bne.n	8002a50 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d010      	beq.n	8002a60 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4e:	e007      	b.n	8002a60 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40010000 	.word	0x40010000
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800
 8002a7c:	40000c00 	.word	0x40000c00
 8002a80:	40014000 	.word	0x40014000

08002a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d001      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e044      	b.n	8002b26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <HAL_TIM_Base_Start_IT+0xb0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x6c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d013      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a19      	ldr	r2, [pc, #100]	; (8002b3c <HAL_TIM_Base_Start_IT+0xb8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x6c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a17      	ldr	r2, [pc, #92]	; (8002b40 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <HAL_TIM_Base_Start_IT+0xc0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d111      	bne.n	8002b14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d010      	beq.n	8002b24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b12:	e007      	b.n	8002b24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40010000 	.word	0x40010000
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40000c00 	.word	0x40000c00
 8002b44:	40014000 	.word	0x40014000

08002b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d122      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d11b      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0202 	mvn.w	r2, #2
 8002b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f9bf 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f9b1 	bl	8002efa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f9c2 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d122      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d11b      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0204 	mvn.w	r2, #4
 8002bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f995 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002be4:	e005      	b.n	8002bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f987 	bl	8002efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f998 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d122      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d11b      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0208 	mvn.w	r2, #8
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2204      	movs	r2, #4
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f96b 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f95d 	bl	8002efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f96e 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0210 	mvn.w	r2, #16
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2208      	movs	r2, #8
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f941 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f933 	bl	8002efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f944 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10e      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d107      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0201 	mvn.w	r2, #1
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f90d 	bl	8002ee6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	2b80      	cmp	r3, #128	; 0x80
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	2b80      	cmp	r3, #128	; 0x80
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fabc 	bl	8003270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b40      	cmp	r3, #64	; 0x40
 8002d04:	d10e      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f909 	bl	8002f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0220 	mvn.w	r2, #32
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fa86 	bl	800325c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_TIM_ConfigClockSource+0x1c>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e0b4      	b.n	8002ede <HAL_TIM_ConfigClockSource+0x186>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dac:	d03e      	beq.n	8002e2c <HAL_TIM_ConfigClockSource+0xd4>
 8002dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db2:	f200 8087 	bhi.w	8002ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dba:	f000 8086 	beq.w	8002eca <HAL_TIM_ConfigClockSource+0x172>
 8002dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc2:	d87f      	bhi.n	8002ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc4:	2b70      	cmp	r3, #112	; 0x70
 8002dc6:	d01a      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0xa6>
 8002dc8:	2b70      	cmp	r3, #112	; 0x70
 8002dca:	d87b      	bhi.n	8002ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dcc:	2b60      	cmp	r3, #96	; 0x60
 8002dce:	d050      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x11a>
 8002dd0:	2b60      	cmp	r3, #96	; 0x60
 8002dd2:	d877      	bhi.n	8002ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd4:	2b50      	cmp	r3, #80	; 0x50
 8002dd6:	d03c      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0xfa>
 8002dd8:	2b50      	cmp	r3, #80	; 0x50
 8002dda:	d873      	bhi.n	8002ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d058      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x13a>
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	d86f      	bhi.n	8002ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8002de4:	2b30      	cmp	r3, #48	; 0x30
 8002de6:	d064      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002de8:	2b30      	cmp	r3, #48	; 0x30
 8002dea:	d86b      	bhi.n	8002ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d060      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d867      	bhi.n	8002ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d05c      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d05a      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002dfc:	e062      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6899      	ldr	r1, [r3, #8]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f000 f997 	bl	8003140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	609a      	str	r2, [r3, #8]
      break;
 8002e2a:	e04f      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6899      	ldr	r1, [r3, #8]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f000 f980 	bl	8003140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e4e:	609a      	str	r2, [r3, #8]
      break;
 8002e50:	e03c      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6859      	ldr	r1, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f000 f8f4 	bl	800304c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2150      	movs	r1, #80	; 0x50
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 f94d 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002e70:	e02c      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6859      	ldr	r1, [r3, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f000 f913 	bl	80030aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2160      	movs	r1, #96	; 0x60
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f93d 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002e90:	e01c      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f000 f8d4 	bl	800304c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2140      	movs	r1, #64	; 0x40
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f92d 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002eb0:	e00c      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f000 f924 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002ec2:	e003      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec8:	e000      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002eca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a34      	ldr	r2, [pc, #208]	; (8003030 <TIM_Base_SetConfig+0xe4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00f      	beq.n	8002f84 <TIM_Base_SetConfig+0x38>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6a:	d00b      	beq.n	8002f84 <TIM_Base_SetConfig+0x38>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a31      	ldr	r2, [pc, #196]	; (8003034 <TIM_Base_SetConfig+0xe8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d007      	beq.n	8002f84 <TIM_Base_SetConfig+0x38>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a30      	ldr	r2, [pc, #192]	; (8003038 <TIM_Base_SetConfig+0xec>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d003      	beq.n	8002f84 <TIM_Base_SetConfig+0x38>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a2f      	ldr	r2, [pc, #188]	; (800303c <TIM_Base_SetConfig+0xf0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d108      	bne.n	8002f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a25      	ldr	r2, [pc, #148]	; (8003030 <TIM_Base_SetConfig+0xe4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01b      	beq.n	8002fd6 <TIM_Base_SetConfig+0x8a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa4:	d017      	beq.n	8002fd6 <TIM_Base_SetConfig+0x8a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a22      	ldr	r2, [pc, #136]	; (8003034 <TIM_Base_SetConfig+0xe8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <TIM_Base_SetConfig+0x8a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a21      	ldr	r2, [pc, #132]	; (8003038 <TIM_Base_SetConfig+0xec>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00f      	beq.n	8002fd6 <TIM_Base_SetConfig+0x8a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a20      	ldr	r2, [pc, #128]	; (800303c <TIM_Base_SetConfig+0xf0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <TIM_Base_SetConfig+0x8a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1f      	ldr	r2, [pc, #124]	; (8003040 <TIM_Base_SetConfig+0xf4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_Base_SetConfig+0x8a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <TIM_Base_SetConfig+0xf8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_Base_SetConfig+0x8a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <TIM_Base_SetConfig+0xfc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d108      	bne.n	8002fe8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a08      	ldr	r2, [pc, #32]	; (8003030 <TIM_Base_SetConfig+0xe4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d103      	bne.n	800301c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	615a      	str	r2, [r3, #20]
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40010000 	.word	0x40010000
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800
 800303c:	40000c00 	.word	0x40000c00
 8003040:	40014000 	.word	0x40014000
 8003044:	40014400 	.word	0x40014400
 8003048:	40014800 	.word	0x40014800

0800304c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0201 	bic.w	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 030a 	bic.w	r3, r3, #10
 8003088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	621a      	str	r2, [r3, #32]
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b087      	sub	sp, #28
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f023 0210 	bic.w	r2, r3, #16
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	031b      	lsls	r3, r3, #12
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	621a      	str	r2, [r3, #32]
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	f043 0307 	orr.w	r3, r3, #7
 800312c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800315a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	021a      	lsls	r2, r3, #8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	431a      	orrs	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4313      	orrs	r3, r2
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	609a      	str	r2, [r3, #8]
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003194:	2302      	movs	r3, #2
 8003196:	e050      	b.n	800323a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d018      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e4:	d013      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a18      	ldr	r2, [pc, #96]	; (800324c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00e      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a16      	ldr	r2, [pc, #88]	; (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a13      	ldr	r2, [pc, #76]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10c      	bne.n	8003228 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	4313      	orrs	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40010000 	.word	0x40010000
 800324c:	40000400 	.word	0x40000400
 8003250:	40000800 	.word	0x40000800
 8003254:	40000c00 	.word	0x40000c00
 8003258:	40014000 	.word	0x40014000

0800325c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e03f      	b.n	8003316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fe f952 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2224      	movs	r2, #36	; 0x24
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f929 	bl	8003520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b08a      	sub	sp, #40	; 0x28
 8003322:	af02      	add	r7, sp, #8
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	d17c      	bne.n	8003438 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_UART_Transmit+0x2c>
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e075      	b.n	800343a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_UART_Transmit+0x3e>
 8003358:	2302      	movs	r3, #2
 800335a:	e06e      	b.n	800343a <HAL_UART_Transmit+0x11c>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2221      	movs	r2, #33	; 0x21
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003372:	f7fe fb65 	bl	8001a40 <HAL_GetTick>
 8003376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	88fa      	ldrh	r2, [r7, #6]
 800337c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	88fa      	ldrh	r2, [r7, #6]
 8003382:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338c:	d108      	bne.n	80033a0 <HAL_UART_Transmit+0x82>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	e003      	b.n	80033a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033b0:	e02a      	b.n	8003408 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	2180      	movs	r1, #128	; 0x80
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f840 	bl	8003442 <UART_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e036      	b.n	800343a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10b      	bne.n	80033ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	3302      	adds	r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	e007      	b.n	80033fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3301      	adds	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1cf      	bne.n	80033b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2200      	movs	r2, #0
 800341a:	2140      	movs	r1, #64	; 0x40
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f810 	bl	8003442 <UART_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e006      	b.n	800343a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b090      	sub	sp, #64	; 0x40
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	603b      	str	r3, [r7, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003452:	e050      	b.n	80034f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345a:	d04c      	beq.n	80034f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800345c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0x30>
 8003462:	f7fe faed 	bl	8001a40 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800346e:	429a      	cmp	r2, r3
 8003470:	d241      	bcs.n	80034f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	330c      	adds	r3, #12
 8003490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003492:	637a      	str	r2, [r7, #52]	; 0x34
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800349a:	e841 2300 	strex	r3, r2, [r1]
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1e5      	bne.n	8003472 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3314      	adds	r3, #20
 80034ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	e853 3f00 	ldrex	r3, [r3]
 80034b4:	613b      	str	r3, [r7, #16]
   return(result);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3314      	adds	r3, #20
 80034c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c6:	623a      	str	r2, [r7, #32]
 80034c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	69f9      	ldr	r1, [r7, #28]
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e5      	bne.n	80034a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e00f      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4013      	ands	r3, r2
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	429a      	cmp	r2, r3
 8003512:	d09f      	beq.n	8003454 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3740      	adds	r7, #64	; 0x40
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003524:	b0c0      	sub	sp, #256	; 0x100
 8003526:	af00      	add	r7, sp, #0
 8003528:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353c:	68d9      	ldr	r1, [r3, #12]
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	ea40 0301 	orr.w	r3, r0, r1
 8003548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	431a      	orrs	r2, r3
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003578:	f021 010c 	bic.w	r1, r1, #12
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003586:	430b      	orrs	r3, r1
 8003588:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359a:	6999      	ldr	r1, [r3, #24]
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	ea40 0301 	orr.w	r3, r0, r1
 80035a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b8f      	ldr	r3, [pc, #572]	; (80037ec <UART_SetConfig+0x2cc>)
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d005      	beq.n	80035c0 <UART_SetConfig+0xa0>
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b8d      	ldr	r3, [pc, #564]	; (80037f0 <UART_SetConfig+0x2d0>)
 80035bc:	429a      	cmp	r2, r3
 80035be:	d104      	bne.n	80035ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035c0:	f7ff f9a2 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 80035c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035c8:	e003      	b.n	80035d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035ca:	f7ff f989 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 80035ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035dc:	f040 810c 	bne.w	80037f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e4:	2200      	movs	r2, #0
 80035e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035f2:	4622      	mov	r2, r4
 80035f4:	462b      	mov	r3, r5
 80035f6:	1891      	adds	r1, r2, r2
 80035f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80035fa:	415b      	adcs	r3, r3
 80035fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003602:	4621      	mov	r1, r4
 8003604:	eb12 0801 	adds.w	r8, r2, r1
 8003608:	4629      	mov	r1, r5
 800360a:	eb43 0901 	adc.w	r9, r3, r1
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800361a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800361e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003622:	4690      	mov	r8, r2
 8003624:	4699      	mov	r9, r3
 8003626:	4623      	mov	r3, r4
 8003628:	eb18 0303 	adds.w	r3, r8, r3
 800362c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003630:	462b      	mov	r3, r5
 8003632:	eb49 0303 	adc.w	r3, r9, r3
 8003636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003646:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800364a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800364e:	460b      	mov	r3, r1
 8003650:	18db      	adds	r3, r3, r3
 8003652:	653b      	str	r3, [r7, #80]	; 0x50
 8003654:	4613      	mov	r3, r2
 8003656:	eb42 0303 	adc.w	r3, r2, r3
 800365a:	657b      	str	r3, [r7, #84]	; 0x54
 800365c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003660:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003664:	f7fd fb18 	bl	8000c98 <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <UART_SetConfig+0x2d4>)
 800366e:	fba3 2302 	umull	r2, r3, r3, r2
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	011c      	lsls	r4, r3, #4
 8003676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800367a:	2200      	movs	r2, #0
 800367c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003680:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003684:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003688:	4642      	mov	r2, r8
 800368a:	464b      	mov	r3, r9
 800368c:	1891      	adds	r1, r2, r2
 800368e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003690:	415b      	adcs	r3, r3
 8003692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003698:	4641      	mov	r1, r8
 800369a:	eb12 0a01 	adds.w	sl, r2, r1
 800369e:	4649      	mov	r1, r9
 80036a0:	eb43 0b01 	adc.w	fp, r3, r1
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b8:	4692      	mov	sl, r2
 80036ba:	469b      	mov	fp, r3
 80036bc:	4643      	mov	r3, r8
 80036be:	eb1a 0303 	adds.w	r3, sl, r3
 80036c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036c6:	464b      	mov	r3, r9
 80036c8:	eb4b 0303 	adc.w	r3, fp, r3
 80036cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036e4:	460b      	mov	r3, r1
 80036e6:	18db      	adds	r3, r3, r3
 80036e8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ea:	4613      	mov	r3, r2
 80036ec:	eb42 0303 	adc.w	r3, r2, r3
 80036f0:	647b      	str	r3, [r7, #68]	; 0x44
 80036f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036fa:	f7fd facd 	bl	8000c98 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4611      	mov	r1, r2
 8003704:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <UART_SetConfig+0x2d4>)
 8003706:	fba3 2301 	umull	r2, r3, r3, r1
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2264      	movs	r2, #100	; 0x64
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	1acb      	subs	r3, r1, r3
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800371a:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <UART_SetConfig+0x2d4>)
 800371c:	fba3 2302 	umull	r2, r3, r3, r2
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003728:	441c      	add	r4, r3
 800372a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800372e:	2200      	movs	r2, #0
 8003730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003734:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003738:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800373c:	4642      	mov	r2, r8
 800373e:	464b      	mov	r3, r9
 8003740:	1891      	adds	r1, r2, r2
 8003742:	63b9      	str	r1, [r7, #56]	; 0x38
 8003744:	415b      	adcs	r3, r3
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800374c:	4641      	mov	r1, r8
 800374e:	1851      	adds	r1, r2, r1
 8003750:	6339      	str	r1, [r7, #48]	; 0x30
 8003752:	4649      	mov	r1, r9
 8003754:	414b      	adcs	r3, r1
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003764:	4659      	mov	r1, fp
 8003766:	00cb      	lsls	r3, r1, #3
 8003768:	4651      	mov	r1, sl
 800376a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800376e:	4651      	mov	r1, sl
 8003770:	00ca      	lsls	r2, r1, #3
 8003772:	4610      	mov	r0, r2
 8003774:	4619      	mov	r1, r3
 8003776:	4603      	mov	r3, r0
 8003778:	4642      	mov	r2, r8
 800377a:	189b      	adds	r3, r3, r2
 800377c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003780:	464b      	mov	r3, r9
 8003782:	460a      	mov	r2, r1
 8003784:	eb42 0303 	adc.w	r3, r2, r3
 8003788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003798:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800379c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037a0:	460b      	mov	r3, r1
 80037a2:	18db      	adds	r3, r3, r3
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a6:	4613      	mov	r3, r2
 80037a8:	eb42 0303 	adc.w	r3, r2, r3
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037b6:	f7fd fa6f 	bl	8000c98 <__aeabi_uldivmod>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <UART_SetConfig+0x2d4>)
 80037c0:	fba3 1302 	umull	r1, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	2164      	movs	r1, #100	; 0x64
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	3332      	adds	r3, #50	; 0x32
 80037d2:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <UART_SetConfig+0x2d4>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	f003 0207 	and.w	r2, r3, #7
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4422      	add	r2, r4
 80037e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037e8:	e105      	b.n	80039f6 <UART_SetConfig+0x4d6>
 80037ea:	bf00      	nop
 80037ec:	40011000 	.word	0x40011000
 80037f0:	40011400 	.word	0x40011400
 80037f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003802:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003806:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800380a:	4642      	mov	r2, r8
 800380c:	464b      	mov	r3, r9
 800380e:	1891      	adds	r1, r2, r2
 8003810:	6239      	str	r1, [r7, #32]
 8003812:	415b      	adcs	r3, r3
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800381a:	4641      	mov	r1, r8
 800381c:	1854      	adds	r4, r2, r1
 800381e:	4649      	mov	r1, r9
 8003820:	eb43 0501 	adc.w	r5, r3, r1
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	00eb      	lsls	r3, r5, #3
 800382e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003832:	00e2      	lsls	r2, r4, #3
 8003834:	4614      	mov	r4, r2
 8003836:	461d      	mov	r5, r3
 8003838:	4643      	mov	r3, r8
 800383a:	18e3      	adds	r3, r4, r3
 800383c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003840:	464b      	mov	r3, r9
 8003842:	eb45 0303 	adc.w	r3, r5, r3
 8003846:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003856:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003866:	4629      	mov	r1, r5
 8003868:	008b      	lsls	r3, r1, #2
 800386a:	4621      	mov	r1, r4
 800386c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003870:	4621      	mov	r1, r4
 8003872:	008a      	lsls	r2, r1, #2
 8003874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003878:	f7fd fa0e 	bl	8000c98 <__aeabi_uldivmod>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4b60      	ldr	r3, [pc, #384]	; (8003a04 <UART_SetConfig+0x4e4>)
 8003882:	fba3 2302 	umull	r2, r3, r3, r2
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	011c      	lsls	r4, r3, #4
 800388a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003894:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003898:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800389c:	4642      	mov	r2, r8
 800389e:	464b      	mov	r3, r9
 80038a0:	1891      	adds	r1, r2, r2
 80038a2:	61b9      	str	r1, [r7, #24]
 80038a4:	415b      	adcs	r3, r3
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ac:	4641      	mov	r1, r8
 80038ae:	1851      	adds	r1, r2, r1
 80038b0:	6139      	str	r1, [r7, #16]
 80038b2:	4649      	mov	r1, r9
 80038b4:	414b      	adcs	r3, r1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038c4:	4659      	mov	r1, fp
 80038c6:	00cb      	lsls	r3, r1, #3
 80038c8:	4651      	mov	r1, sl
 80038ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ce:	4651      	mov	r1, sl
 80038d0:	00ca      	lsls	r2, r1, #3
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	4642      	mov	r2, r8
 80038da:	189b      	adds	r3, r3, r2
 80038dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038e0:	464b      	mov	r3, r9
 80038e2:	460a      	mov	r2, r1
 80038e4:	eb42 0303 	adc.w	r3, r2, r3
 80038e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003904:	4649      	mov	r1, r9
 8003906:	008b      	lsls	r3, r1, #2
 8003908:	4641      	mov	r1, r8
 800390a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800390e:	4641      	mov	r1, r8
 8003910:	008a      	lsls	r2, r1, #2
 8003912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003916:	f7fd f9bf 	bl	8000c98 <__aeabi_uldivmod>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <UART_SetConfig+0x4e4>)
 8003920:	fba3 1302 	umull	r1, r3, r3, r2
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	2164      	movs	r1, #100	; 0x64
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	3332      	adds	r3, #50	; 0x32
 8003932:	4a34      	ldr	r2, [pc, #208]	; (8003a04 <UART_SetConfig+0x4e4>)
 8003934:	fba2 2303 	umull	r2, r3, r2, r3
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800393e:	441c      	add	r4, r3
 8003940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003944:	2200      	movs	r2, #0
 8003946:	673b      	str	r3, [r7, #112]	; 0x70
 8003948:	677a      	str	r2, [r7, #116]	; 0x74
 800394a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800394e:	4642      	mov	r2, r8
 8003950:	464b      	mov	r3, r9
 8003952:	1891      	adds	r1, r2, r2
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	415b      	adcs	r3, r3
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800395e:	4641      	mov	r1, r8
 8003960:	1851      	adds	r1, r2, r1
 8003962:	6039      	str	r1, [r7, #0]
 8003964:	4649      	mov	r1, r9
 8003966:	414b      	adcs	r3, r1
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003976:	4659      	mov	r1, fp
 8003978:	00cb      	lsls	r3, r1, #3
 800397a:	4651      	mov	r1, sl
 800397c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003980:	4651      	mov	r1, sl
 8003982:	00ca      	lsls	r2, r1, #3
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	4603      	mov	r3, r0
 800398a:	4642      	mov	r2, r8
 800398c:	189b      	adds	r3, r3, r2
 800398e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003990:	464b      	mov	r3, r9
 8003992:	460a      	mov	r2, r1
 8003994:	eb42 0303 	adc.w	r3, r2, r3
 8003998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	663b      	str	r3, [r7, #96]	; 0x60
 80039a4:	667a      	str	r2, [r7, #100]	; 0x64
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039b2:	4649      	mov	r1, r9
 80039b4:	008b      	lsls	r3, r1, #2
 80039b6:	4641      	mov	r1, r8
 80039b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039bc:	4641      	mov	r1, r8
 80039be:	008a      	lsls	r2, r1, #2
 80039c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039c4:	f7fd f968 	bl	8000c98 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <UART_SetConfig+0x4e4>)
 80039ce:	fba3 1302 	umull	r1, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2164      	movs	r1, #100	; 0x64
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	3332      	adds	r3, #50	; 0x32
 80039e0:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <UART_SetConfig+0x4e4>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	f003 020f 	and.w	r2, r3, #15
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4422      	add	r2, r4
 80039f4:	609a      	str	r2, [r3, #8]
}
 80039f6:	bf00      	nop
 80039f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a02:	bf00      	nop
 8003a04:	51eb851f 	.word	0x51eb851f

08003a08 <test>:
#include "serial.h"

void test(int aIntegerNumber, float aFloatNumber){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	ed87 0a00 	vstr	s0, [r7]
	SERIAL_SendInt(aIntegerNumber);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f829 	bl	8003a6c <SERIAL_SendInt>
	SERIAL_SendTAB();
 8003a1a:	f000 f881 	bl	8003b20 <SERIAL_SendTAB>
	SERIAL_SendFloat(aFloatNumber);
 8003a1e:	ed97 0a00 	vldr	s0, [r7]
 8003a22:	f000 f843 	bl	8003aac <SERIAL_SendFloat>
	SERIAL_SendNL();
 8003a26:	f000 f867 	bl	8003af8 <SERIAL_SendNL>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <SERIAL_SendCharBuf>:

extern UART_HandleTypeDef huart2;
char gbuf[20];


void SERIAL_SendCharBuf(char *buf){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	int taille=0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
	taille=strlen(buf);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7fc fbcd 	bl	80001e0 <strlen>
 8003a46:	4603      	mov	r3, r0
 8003a48:	60fb      	str	r3, [r7, #12]
	if(taille>0)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	dd06      	ble.n	8003a5e <SERIAL_SendCharBuf+0x2a>
		HAL_UART_Transmit(&huart2, (unsigned char *)buf, taille, 1);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	2301      	movs	r3, #1
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4803      	ldr	r0, [pc, #12]	; (8003a68 <SERIAL_SendCharBuf+0x34>)
 8003a5a:	f7ff fc60 	bl	800331e <HAL_UART_Transmit>
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	200002d4 	.word	0x200002d4

08003a6c <SERIAL_SendInt>:

void SERIAL_SendInt(int n){
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	int taille=0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
	taille=sprintf (gbuf,"%d",n);
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4909      	ldr	r1, [pc, #36]	; (8003aa0 <SERIAL_SendInt+0x34>)
 8003a7c:	4809      	ldr	r0, [pc, #36]	; (8003aa4 <SERIAL_SendInt+0x38>)
 8003a7e:	f000 ff41 	bl	8004904 <siprintf>
 8003a82:	60f8      	str	r0, [r7, #12]
	if(taille>0)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	dd06      	ble.n	8003a98 <SERIAL_SendInt+0x2c>
		HAL_UART_Transmit(&huart2, (unsigned char *)gbuf, taille, 1);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	2301      	movs	r3, #1
 8003a90:	4904      	ldr	r1, [pc, #16]	; (8003aa4 <SERIAL_SendInt+0x38>)
 8003a92:	4805      	ldr	r0, [pc, #20]	; (8003aa8 <SERIAL_SendInt+0x3c>)
 8003a94:	f7ff fc43 	bl	800331e <HAL_UART_Transmit>
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	08009598 	.word	0x08009598
 8003aa4:	20000324 	.word	0x20000324
 8003aa8:	200002d4 	.word	0x200002d4

08003aac <SERIAL_SendFloat>:

void SERIAL_SendFloat(float v){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	ed87 0a01 	vstr	s0, [r7, #4]
	int taille=0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]

	taille=sprintf (gbuf, "%3.3f",v); // @suppress("Float formatting support")
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fc fd4c 	bl	8000558 <__aeabi_f2d>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4909      	ldr	r1, [pc, #36]	; (8003aec <SERIAL_SendFloat+0x40>)
 8003ac6:	480a      	ldr	r0, [pc, #40]	; (8003af0 <SERIAL_SendFloat+0x44>)
 8003ac8:	f000 ff1c 	bl	8004904 <siprintf>
 8003acc:	60f8      	str	r0, [r7, #12]
	if(taille>0)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	dd06      	ble.n	8003ae2 <SERIAL_SendFloat+0x36>
		HAL_UART_Transmit(&huart2, (unsigned char *)gbuf, taille, 1);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	2301      	movs	r3, #1
 8003ada:	4905      	ldr	r1, [pc, #20]	; (8003af0 <SERIAL_SendFloat+0x44>)
 8003adc:	4805      	ldr	r0, [pc, #20]	; (8003af4 <SERIAL_SendFloat+0x48>)
 8003ade:	f7ff fc1e 	bl	800331e <HAL_UART_Transmit>
}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	0800959c 	.word	0x0800959c
 8003af0:	20000324 	.word	0x20000324
 8003af4:	200002d4 	.word	0x200002d4

08003af8 <SERIAL_SendNL>:

void SERIAL_SendNL(){
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	gbuf[0]=13;
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <SERIAL_SendNL+0x20>)
 8003afe:	220d      	movs	r2, #13
 8003b00:	701a      	strb	r2, [r3, #0]
	gbuf[1]=10;
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <SERIAL_SendNL+0x20>)
 8003b04:	220a      	movs	r2, #10
 8003b06:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&huart2, (unsigned char *)gbuf, 2, 1);
 8003b08:	2301      	movs	r3, #1
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	4902      	ldr	r1, [pc, #8]	; (8003b18 <SERIAL_SendNL+0x20>)
 8003b0e:	4803      	ldr	r0, [pc, #12]	; (8003b1c <SERIAL_SendNL+0x24>)
 8003b10:	f7ff fc05 	bl	800331e <HAL_UART_Transmit>

}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000324 	.word	0x20000324
 8003b1c:	200002d4 	.word	0x200002d4

08003b20 <SERIAL_SendTAB>:

void SERIAL_SendTAB(){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
	gbuf[0]=9;
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <SERIAL_SendTAB+0x1c>)
 8003b26:	2209      	movs	r2, #9
 8003b28:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, (unsigned char *)gbuf, 1, 1);
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	4903      	ldr	r1, [pc, #12]	; (8003b3c <SERIAL_SendTAB+0x1c>)
 8003b30:	4803      	ldr	r0, [pc, #12]	; (8003b40 <SERIAL_SendTAB+0x20>)
 8003b32:	f7ff fbf4 	bl	800331e <HAL_UART_Transmit>

}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000324 	.word	0x20000324
 8003b40:	200002d4 	.word	0x200002d4

08003b44 <SERIAL_SendFloatToPlot>:
		SERIAL_SendInt(dataB[n]);
		SERIAL_SendNL();
	}
}

void SERIAL_SendFloatToPlot(double dataA, double dataB){
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	ed87 0b02 	vstr	d0, [r7, #8]
 8003b4e:	ed87 1b00 	vstr	d1, [r7]
	SERIAL_SendCharBuf("a:");
 8003b52:	4810      	ldr	r0, [pc, #64]	; (8003b94 <SERIAL_SendFloatToPlot+0x50>)
 8003b54:	f7ff ff6e 	bl	8003a34 <SERIAL_SendCharBuf>
	SERIAL_SendFloat(dataA);
 8003b58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b5c:	f7fd f84c 	bl	8000bf8 <__aeabi_d2f>
 8003b60:	4603      	mov	r3, r0
 8003b62:	ee00 3a10 	vmov	s0, r3
 8003b66:	f7ff ffa1 	bl	8003aac <SERIAL_SendFloat>
	SERIAL_SendCharBuf(",");
 8003b6a:	480b      	ldr	r0, [pc, #44]	; (8003b98 <SERIAL_SendFloatToPlot+0x54>)
 8003b6c:	f7ff ff62 	bl	8003a34 <SERIAL_SendCharBuf>
	SERIAL_SendCharBuf("b:");
 8003b70:	480a      	ldr	r0, [pc, #40]	; (8003b9c <SERIAL_SendFloatToPlot+0x58>)
 8003b72:	f7ff ff5f 	bl	8003a34 <SERIAL_SendCharBuf>
	SERIAL_SendFloat(dataB);
 8003b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b7a:	f7fd f83d 	bl	8000bf8 <__aeabi_d2f>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	ee00 3a10 	vmov	s0, r3
 8003b84:	f7ff ff92 	bl	8003aac <SERIAL_SendFloat>
	SERIAL_SendNL();
 8003b88:	f7ff ffb6 	bl	8003af8 <SERIAL_SendNL>
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	080095a4 	.word	0x080095a4
 8003b98:	080095a8 	.word	0x080095a8
 8003b9c:	080095ac 	.word	0x080095ac

08003ba0 <__errno>:
 8003ba0:	4b01      	ldr	r3, [pc, #4]	; (8003ba8 <__errno+0x8>)
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	2000000c 	.word	0x2000000c

08003bac <__libc_init_array>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	4d0d      	ldr	r5, [pc, #52]	; (8003be4 <__libc_init_array+0x38>)
 8003bb0:	4c0d      	ldr	r4, [pc, #52]	; (8003be8 <__libc_init_array+0x3c>)
 8003bb2:	1b64      	subs	r4, r4, r5
 8003bb4:	10a4      	asrs	r4, r4, #2
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	42a6      	cmp	r6, r4
 8003bba:	d109      	bne.n	8003bd0 <__libc_init_array+0x24>
 8003bbc:	4d0b      	ldr	r5, [pc, #44]	; (8003bec <__libc_init_array+0x40>)
 8003bbe:	4c0c      	ldr	r4, [pc, #48]	; (8003bf0 <__libc_init_array+0x44>)
 8003bc0:	f005 fcdc 	bl	800957c <_init>
 8003bc4:	1b64      	subs	r4, r4, r5
 8003bc6:	10a4      	asrs	r4, r4, #2
 8003bc8:	2600      	movs	r6, #0
 8003bca:	42a6      	cmp	r6, r4
 8003bcc:	d105      	bne.n	8003bda <__libc_init_array+0x2e>
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd4:	4798      	blx	r3
 8003bd6:	3601      	adds	r6, #1
 8003bd8:	e7ee      	b.n	8003bb8 <__libc_init_array+0xc>
 8003bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bde:	4798      	blx	r3
 8003be0:	3601      	adds	r6, #1
 8003be2:	e7f2      	b.n	8003bca <__libc_init_array+0x1e>
 8003be4:	08009c50 	.word	0x08009c50
 8003be8:	08009c50 	.word	0x08009c50
 8003bec:	08009c50 	.word	0x08009c50
 8003bf0:	08009c54 	.word	0x08009c54

08003bf4 <memset>:
 8003bf4:	4402      	add	r2, r0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d100      	bne.n	8003bfe <memset+0xa>
 8003bfc:	4770      	bx	lr
 8003bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8003c02:	e7f9      	b.n	8003bf8 <memset+0x4>

08003c04 <__cvt>:
 8003c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c08:	ec55 4b10 	vmov	r4, r5, d0
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	460e      	mov	r6, r1
 8003c10:	4619      	mov	r1, r3
 8003c12:	462b      	mov	r3, r5
 8003c14:	bfbb      	ittet	lt
 8003c16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003c1a:	461d      	movlt	r5, r3
 8003c1c:	2300      	movge	r3, #0
 8003c1e:	232d      	movlt	r3, #45	; 0x2d
 8003c20:	700b      	strb	r3, [r1, #0]
 8003c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003c28:	4691      	mov	r9, r2
 8003c2a:	f023 0820 	bic.w	r8, r3, #32
 8003c2e:	bfbc      	itt	lt
 8003c30:	4622      	movlt	r2, r4
 8003c32:	4614      	movlt	r4, r2
 8003c34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c38:	d005      	beq.n	8003c46 <__cvt+0x42>
 8003c3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003c3e:	d100      	bne.n	8003c42 <__cvt+0x3e>
 8003c40:	3601      	adds	r6, #1
 8003c42:	2102      	movs	r1, #2
 8003c44:	e000      	b.n	8003c48 <__cvt+0x44>
 8003c46:	2103      	movs	r1, #3
 8003c48:	ab03      	add	r3, sp, #12
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	ab02      	add	r3, sp, #8
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	ec45 4b10 	vmov	d0, r4, r5
 8003c54:	4653      	mov	r3, sl
 8003c56:	4632      	mov	r2, r6
 8003c58:	f001 fdae 	bl	80057b8 <_dtoa_r>
 8003c5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003c60:	4607      	mov	r7, r0
 8003c62:	d102      	bne.n	8003c6a <__cvt+0x66>
 8003c64:	f019 0f01 	tst.w	r9, #1
 8003c68:	d022      	beq.n	8003cb0 <__cvt+0xac>
 8003c6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c6e:	eb07 0906 	add.w	r9, r7, r6
 8003c72:	d110      	bne.n	8003c96 <__cvt+0x92>
 8003c74:	783b      	ldrb	r3, [r7, #0]
 8003c76:	2b30      	cmp	r3, #48	; 0x30
 8003c78:	d10a      	bne.n	8003c90 <__cvt+0x8c>
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4620      	mov	r0, r4
 8003c80:	4629      	mov	r1, r5
 8003c82:	f7fc ff29 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c86:	b918      	cbnz	r0, 8003c90 <__cvt+0x8c>
 8003c88:	f1c6 0601 	rsb	r6, r6, #1
 8003c8c:	f8ca 6000 	str.w	r6, [sl]
 8003c90:	f8da 3000 	ldr.w	r3, [sl]
 8003c94:	4499      	add	r9, r3
 8003c96:	2200      	movs	r2, #0
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	f7fc ff1b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ca2:	b108      	cbz	r0, 8003ca8 <__cvt+0xa4>
 8003ca4:	f8cd 900c 	str.w	r9, [sp, #12]
 8003ca8:	2230      	movs	r2, #48	; 0x30
 8003caa:	9b03      	ldr	r3, [sp, #12]
 8003cac:	454b      	cmp	r3, r9
 8003cae:	d307      	bcc.n	8003cc0 <__cvt+0xbc>
 8003cb0:	9b03      	ldr	r3, [sp, #12]
 8003cb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cb4:	1bdb      	subs	r3, r3, r7
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	b004      	add	sp, #16
 8003cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc0:	1c59      	adds	r1, r3, #1
 8003cc2:	9103      	str	r1, [sp, #12]
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e7f0      	b.n	8003caa <__cvt+0xa6>

08003cc8 <__exponent>:
 8003cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2900      	cmp	r1, #0
 8003cce:	bfb8      	it	lt
 8003cd0:	4249      	neglt	r1, r1
 8003cd2:	f803 2b02 	strb.w	r2, [r3], #2
 8003cd6:	bfb4      	ite	lt
 8003cd8:	222d      	movlt	r2, #45	; 0x2d
 8003cda:	222b      	movge	r2, #43	; 0x2b
 8003cdc:	2909      	cmp	r1, #9
 8003cde:	7042      	strb	r2, [r0, #1]
 8003ce0:	dd2a      	ble.n	8003d38 <__exponent+0x70>
 8003ce2:	f10d 0407 	add.w	r4, sp, #7
 8003ce6:	46a4      	mov	ip, r4
 8003ce8:	270a      	movs	r7, #10
 8003cea:	46a6      	mov	lr, r4
 8003cec:	460a      	mov	r2, r1
 8003cee:	fb91 f6f7 	sdiv	r6, r1, r7
 8003cf2:	fb07 1516 	mls	r5, r7, r6, r1
 8003cf6:	3530      	adds	r5, #48	; 0x30
 8003cf8:	2a63      	cmp	r2, #99	; 0x63
 8003cfa:	f104 34ff 	add.w	r4, r4, #4294967295
 8003cfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003d02:	4631      	mov	r1, r6
 8003d04:	dcf1      	bgt.n	8003cea <__exponent+0x22>
 8003d06:	3130      	adds	r1, #48	; 0x30
 8003d08:	f1ae 0502 	sub.w	r5, lr, #2
 8003d0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003d10:	1c44      	adds	r4, r0, #1
 8003d12:	4629      	mov	r1, r5
 8003d14:	4561      	cmp	r1, ip
 8003d16:	d30a      	bcc.n	8003d2e <__exponent+0x66>
 8003d18:	f10d 0209 	add.w	r2, sp, #9
 8003d1c:	eba2 020e 	sub.w	r2, r2, lr
 8003d20:	4565      	cmp	r5, ip
 8003d22:	bf88      	it	hi
 8003d24:	2200      	movhi	r2, #0
 8003d26:	4413      	add	r3, r2
 8003d28:	1a18      	subs	r0, r3, r0
 8003d2a:	b003      	add	sp, #12
 8003d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003d36:	e7ed      	b.n	8003d14 <__exponent+0x4c>
 8003d38:	2330      	movs	r3, #48	; 0x30
 8003d3a:	3130      	adds	r1, #48	; 0x30
 8003d3c:	7083      	strb	r3, [r0, #2]
 8003d3e:	70c1      	strb	r1, [r0, #3]
 8003d40:	1d03      	adds	r3, r0, #4
 8003d42:	e7f1      	b.n	8003d28 <__exponent+0x60>

08003d44 <_printf_float>:
 8003d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d48:	ed2d 8b02 	vpush	{d8}
 8003d4c:	b08d      	sub	sp, #52	; 0x34
 8003d4e:	460c      	mov	r4, r1
 8003d50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003d54:	4616      	mov	r6, r2
 8003d56:	461f      	mov	r7, r3
 8003d58:	4605      	mov	r5, r0
 8003d5a:	f002 fe8b 	bl	8006a74 <_localeconv_r>
 8003d5e:	f8d0 a000 	ldr.w	sl, [r0]
 8003d62:	4650      	mov	r0, sl
 8003d64:	f7fc fa3c 	bl	80001e0 <strlen>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	9305      	str	r3, [sp, #20]
 8003d70:	f8d8 3000 	ldr.w	r3, [r8]
 8003d74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003d78:	3307      	adds	r3, #7
 8003d7a:	f023 0307 	bic.w	r3, r3, #7
 8003d7e:	f103 0208 	add.w	r2, r3, #8
 8003d82:	f8c8 2000 	str.w	r2, [r8]
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003d8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003d92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003d96:	9307      	str	r3, [sp, #28]
 8003d98:	f8cd 8018 	str.w	r8, [sp, #24]
 8003d9c:	ee08 0a10 	vmov	s16, r0
 8003da0:	4b9f      	ldr	r3, [pc, #636]	; (8004020 <_printf_float+0x2dc>)
 8003da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003da6:	f04f 32ff 	mov.w	r2, #4294967295
 8003daa:	f7fc fec7 	bl	8000b3c <__aeabi_dcmpun>
 8003dae:	bb88      	cbnz	r0, 8003e14 <_printf_float+0xd0>
 8003db0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003db4:	4b9a      	ldr	r3, [pc, #616]	; (8004020 <_printf_float+0x2dc>)
 8003db6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dba:	f7fc fea1 	bl	8000b00 <__aeabi_dcmple>
 8003dbe:	bb48      	cbnz	r0, 8003e14 <_printf_float+0xd0>
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	f7fc fe90 	bl	8000aec <__aeabi_dcmplt>
 8003dcc:	b110      	cbz	r0, 8003dd4 <_printf_float+0x90>
 8003dce:	232d      	movs	r3, #45	; 0x2d
 8003dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd4:	4b93      	ldr	r3, [pc, #588]	; (8004024 <_printf_float+0x2e0>)
 8003dd6:	4894      	ldr	r0, [pc, #592]	; (8004028 <_printf_float+0x2e4>)
 8003dd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003ddc:	bf94      	ite	ls
 8003dde:	4698      	movls	r8, r3
 8003de0:	4680      	movhi	r8, r0
 8003de2:	2303      	movs	r3, #3
 8003de4:	6123      	str	r3, [r4, #16]
 8003de6:	9b05      	ldr	r3, [sp, #20]
 8003de8:	f023 0204 	bic.w	r2, r3, #4
 8003dec:	6022      	str	r2, [r4, #0]
 8003dee:	f04f 0900 	mov.w	r9, #0
 8003df2:	9700      	str	r7, [sp, #0]
 8003df4:	4633      	mov	r3, r6
 8003df6:	aa0b      	add	r2, sp, #44	; 0x2c
 8003df8:	4621      	mov	r1, r4
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f000 f9d8 	bl	80041b0 <_printf_common>
 8003e00:	3001      	adds	r0, #1
 8003e02:	f040 8090 	bne.w	8003f26 <_printf_float+0x1e2>
 8003e06:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0a:	b00d      	add	sp, #52	; 0x34
 8003e0c:	ecbd 8b02 	vpop	{d8}
 8003e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	4640      	mov	r0, r8
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	f7fc fe8e 	bl	8000b3c <__aeabi_dcmpun>
 8003e20:	b140      	cbz	r0, 8003e34 <_printf_float+0xf0>
 8003e22:	464b      	mov	r3, r9
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bfbc      	itt	lt
 8003e28:	232d      	movlt	r3, #45	; 0x2d
 8003e2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003e2e:	487f      	ldr	r0, [pc, #508]	; (800402c <_printf_float+0x2e8>)
 8003e30:	4b7f      	ldr	r3, [pc, #508]	; (8004030 <_printf_float+0x2ec>)
 8003e32:	e7d1      	b.n	8003dd8 <_printf_float+0x94>
 8003e34:	6863      	ldr	r3, [r4, #4]
 8003e36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003e3a:	9206      	str	r2, [sp, #24]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	d13f      	bne.n	8003ec0 <_printf_float+0x17c>
 8003e40:	2306      	movs	r3, #6
 8003e42:	6063      	str	r3, [r4, #4]
 8003e44:	9b05      	ldr	r3, [sp, #20]
 8003e46:	6861      	ldr	r1, [r4, #4]
 8003e48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	9303      	str	r3, [sp, #12]
 8003e50:	ab0a      	add	r3, sp, #40	; 0x28
 8003e52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003e56:	ab09      	add	r3, sp, #36	; 0x24
 8003e58:	ec49 8b10 	vmov	d0, r8, r9
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6022      	str	r2, [r4, #0]
 8003e60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003e64:	4628      	mov	r0, r5
 8003e66:	f7ff fecd 	bl	8003c04 <__cvt>
 8003e6a:	9b06      	ldr	r3, [sp, #24]
 8003e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e6e:	2b47      	cmp	r3, #71	; 0x47
 8003e70:	4680      	mov	r8, r0
 8003e72:	d108      	bne.n	8003e86 <_printf_float+0x142>
 8003e74:	1cc8      	adds	r0, r1, #3
 8003e76:	db02      	blt.n	8003e7e <_printf_float+0x13a>
 8003e78:	6863      	ldr	r3, [r4, #4]
 8003e7a:	4299      	cmp	r1, r3
 8003e7c:	dd41      	ble.n	8003f02 <_printf_float+0x1be>
 8003e7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003e82:	fa5f fb8b 	uxtb.w	fp, fp
 8003e86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e8a:	d820      	bhi.n	8003ece <_printf_float+0x18a>
 8003e8c:	3901      	subs	r1, #1
 8003e8e:	465a      	mov	r2, fp
 8003e90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003e94:	9109      	str	r1, [sp, #36]	; 0x24
 8003e96:	f7ff ff17 	bl	8003cc8 <__exponent>
 8003e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e9c:	1813      	adds	r3, r2, r0
 8003e9e:	2a01      	cmp	r2, #1
 8003ea0:	4681      	mov	r9, r0
 8003ea2:	6123      	str	r3, [r4, #16]
 8003ea4:	dc02      	bgt.n	8003eac <_printf_float+0x168>
 8003ea6:	6822      	ldr	r2, [r4, #0]
 8003ea8:	07d2      	lsls	r2, r2, #31
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_float+0x16c>
 8003eac:	3301      	adds	r3, #1
 8003eae:	6123      	str	r3, [r4, #16]
 8003eb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d09c      	beq.n	8003df2 <_printf_float+0xae>
 8003eb8:	232d      	movs	r3, #45	; 0x2d
 8003eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ebe:	e798      	b.n	8003df2 <_printf_float+0xae>
 8003ec0:	9a06      	ldr	r2, [sp, #24]
 8003ec2:	2a47      	cmp	r2, #71	; 0x47
 8003ec4:	d1be      	bne.n	8003e44 <_printf_float+0x100>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1bc      	bne.n	8003e44 <_printf_float+0x100>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e7b9      	b.n	8003e42 <_printf_float+0xfe>
 8003ece:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003ed2:	d118      	bne.n	8003f06 <_printf_float+0x1c2>
 8003ed4:	2900      	cmp	r1, #0
 8003ed6:	6863      	ldr	r3, [r4, #4]
 8003ed8:	dd0b      	ble.n	8003ef2 <_printf_float+0x1ae>
 8003eda:	6121      	str	r1, [r4, #16]
 8003edc:	b913      	cbnz	r3, 8003ee4 <_printf_float+0x1a0>
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	07d0      	lsls	r0, r2, #31
 8003ee2:	d502      	bpl.n	8003eea <_printf_float+0x1a6>
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	440b      	add	r3, r1
 8003ee8:	6123      	str	r3, [r4, #16]
 8003eea:	65a1      	str	r1, [r4, #88]	; 0x58
 8003eec:	f04f 0900 	mov.w	r9, #0
 8003ef0:	e7de      	b.n	8003eb0 <_printf_float+0x16c>
 8003ef2:	b913      	cbnz	r3, 8003efa <_printf_float+0x1b6>
 8003ef4:	6822      	ldr	r2, [r4, #0]
 8003ef6:	07d2      	lsls	r2, r2, #31
 8003ef8:	d501      	bpl.n	8003efe <_printf_float+0x1ba>
 8003efa:	3302      	adds	r3, #2
 8003efc:	e7f4      	b.n	8003ee8 <_printf_float+0x1a4>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e7f2      	b.n	8003ee8 <_printf_float+0x1a4>
 8003f02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f08:	4299      	cmp	r1, r3
 8003f0a:	db05      	blt.n	8003f18 <_printf_float+0x1d4>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	6121      	str	r1, [r4, #16]
 8003f10:	07d8      	lsls	r0, r3, #31
 8003f12:	d5ea      	bpl.n	8003eea <_printf_float+0x1a6>
 8003f14:	1c4b      	adds	r3, r1, #1
 8003f16:	e7e7      	b.n	8003ee8 <_printf_float+0x1a4>
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	bfd4      	ite	le
 8003f1c:	f1c1 0202 	rsble	r2, r1, #2
 8003f20:	2201      	movgt	r2, #1
 8003f22:	4413      	add	r3, r2
 8003f24:	e7e0      	b.n	8003ee8 <_printf_float+0x1a4>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	055a      	lsls	r2, r3, #21
 8003f2a:	d407      	bmi.n	8003f3c <_printf_float+0x1f8>
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	4642      	mov	r2, r8
 8003f30:	4631      	mov	r1, r6
 8003f32:	4628      	mov	r0, r5
 8003f34:	47b8      	blx	r7
 8003f36:	3001      	adds	r0, #1
 8003f38:	d12c      	bne.n	8003f94 <_printf_float+0x250>
 8003f3a:	e764      	b.n	8003e06 <_printf_float+0xc2>
 8003f3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003f40:	f240 80e0 	bls.w	8004104 <_printf_float+0x3c0>
 8003f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f7fc fdc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d034      	beq.n	8003fbe <_printf_float+0x27a>
 8003f54:	4a37      	ldr	r2, [pc, #220]	; (8004034 <_printf_float+0x2f0>)
 8003f56:	2301      	movs	r3, #1
 8003f58:	4631      	mov	r1, r6
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	47b8      	blx	r7
 8003f5e:	3001      	adds	r0, #1
 8003f60:	f43f af51 	beq.w	8003e06 <_printf_float+0xc2>
 8003f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	db02      	blt.n	8003f72 <_printf_float+0x22e>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	07d8      	lsls	r0, r3, #31
 8003f70:	d510      	bpl.n	8003f94 <_printf_float+0x250>
 8003f72:	ee18 3a10 	vmov	r3, s16
 8003f76:	4652      	mov	r2, sl
 8003f78:	4631      	mov	r1, r6
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	47b8      	blx	r7
 8003f7e:	3001      	adds	r0, #1
 8003f80:	f43f af41 	beq.w	8003e06 <_printf_float+0xc2>
 8003f84:	f04f 0800 	mov.w	r8, #0
 8003f88:	f104 091a 	add.w	r9, r4, #26
 8003f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	4543      	cmp	r3, r8
 8003f92:	dc09      	bgt.n	8003fa8 <_printf_float+0x264>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	079b      	lsls	r3, r3, #30
 8003f98:	f100 8105 	bmi.w	80041a6 <_printf_float+0x462>
 8003f9c:	68e0      	ldr	r0, [r4, #12]
 8003f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fa0:	4298      	cmp	r0, r3
 8003fa2:	bfb8      	it	lt
 8003fa4:	4618      	movlt	r0, r3
 8003fa6:	e730      	b.n	8003e0a <_printf_float+0xc6>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	464a      	mov	r2, r9
 8003fac:	4631      	mov	r1, r6
 8003fae:	4628      	mov	r0, r5
 8003fb0:	47b8      	blx	r7
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	f43f af27 	beq.w	8003e06 <_printf_float+0xc2>
 8003fb8:	f108 0801 	add.w	r8, r8, #1
 8003fbc:	e7e6      	b.n	8003f8c <_printf_float+0x248>
 8003fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	dc39      	bgt.n	8004038 <_printf_float+0x2f4>
 8003fc4:	4a1b      	ldr	r2, [pc, #108]	; (8004034 <_printf_float+0x2f0>)
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4631      	mov	r1, r6
 8003fca:	4628      	mov	r0, r5
 8003fcc:	47b8      	blx	r7
 8003fce:	3001      	adds	r0, #1
 8003fd0:	f43f af19 	beq.w	8003e06 <_printf_float+0xc2>
 8003fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	d102      	bne.n	8003fe2 <_printf_float+0x29e>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	07d9      	lsls	r1, r3, #31
 8003fe0:	d5d8      	bpl.n	8003f94 <_printf_float+0x250>
 8003fe2:	ee18 3a10 	vmov	r3, s16
 8003fe6:	4652      	mov	r2, sl
 8003fe8:	4631      	mov	r1, r6
 8003fea:	4628      	mov	r0, r5
 8003fec:	47b8      	blx	r7
 8003fee:	3001      	adds	r0, #1
 8003ff0:	f43f af09 	beq.w	8003e06 <_printf_float+0xc2>
 8003ff4:	f04f 0900 	mov.w	r9, #0
 8003ff8:	f104 0a1a 	add.w	sl, r4, #26
 8003ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ffe:	425b      	negs	r3, r3
 8004000:	454b      	cmp	r3, r9
 8004002:	dc01      	bgt.n	8004008 <_printf_float+0x2c4>
 8004004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004006:	e792      	b.n	8003f2e <_printf_float+0x1ea>
 8004008:	2301      	movs	r3, #1
 800400a:	4652      	mov	r2, sl
 800400c:	4631      	mov	r1, r6
 800400e:	4628      	mov	r0, r5
 8004010:	47b8      	blx	r7
 8004012:	3001      	adds	r0, #1
 8004014:	f43f aef7 	beq.w	8003e06 <_printf_float+0xc2>
 8004018:	f109 0901 	add.w	r9, r9, #1
 800401c:	e7ee      	b.n	8003ffc <_printf_float+0x2b8>
 800401e:	bf00      	nop
 8004020:	7fefffff 	.word	0x7fefffff
 8004024:	080095cc 	.word	0x080095cc
 8004028:	080095d0 	.word	0x080095d0
 800402c:	080095d8 	.word	0x080095d8
 8004030:	080095d4 	.word	0x080095d4
 8004034:	080095dc 	.word	0x080095dc
 8004038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800403a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800403c:	429a      	cmp	r2, r3
 800403e:	bfa8      	it	ge
 8004040:	461a      	movge	r2, r3
 8004042:	2a00      	cmp	r2, #0
 8004044:	4691      	mov	r9, r2
 8004046:	dc37      	bgt.n	80040b8 <_printf_float+0x374>
 8004048:	f04f 0b00 	mov.w	fp, #0
 800404c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004050:	f104 021a 	add.w	r2, r4, #26
 8004054:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004056:	9305      	str	r3, [sp, #20]
 8004058:	eba3 0309 	sub.w	r3, r3, r9
 800405c:	455b      	cmp	r3, fp
 800405e:	dc33      	bgt.n	80040c8 <_printf_float+0x384>
 8004060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004064:	429a      	cmp	r2, r3
 8004066:	db3b      	blt.n	80040e0 <_printf_float+0x39c>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	07da      	lsls	r2, r3, #31
 800406c:	d438      	bmi.n	80040e0 <_printf_float+0x39c>
 800406e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004070:	9a05      	ldr	r2, [sp, #20]
 8004072:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004074:	1a9a      	subs	r2, r3, r2
 8004076:	eba3 0901 	sub.w	r9, r3, r1
 800407a:	4591      	cmp	r9, r2
 800407c:	bfa8      	it	ge
 800407e:	4691      	movge	r9, r2
 8004080:	f1b9 0f00 	cmp.w	r9, #0
 8004084:	dc35      	bgt.n	80040f2 <_printf_float+0x3ae>
 8004086:	f04f 0800 	mov.w	r8, #0
 800408a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800408e:	f104 0a1a 	add.w	sl, r4, #26
 8004092:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	eba3 0309 	sub.w	r3, r3, r9
 800409c:	4543      	cmp	r3, r8
 800409e:	f77f af79 	ble.w	8003f94 <_printf_float+0x250>
 80040a2:	2301      	movs	r3, #1
 80040a4:	4652      	mov	r2, sl
 80040a6:	4631      	mov	r1, r6
 80040a8:	4628      	mov	r0, r5
 80040aa:	47b8      	blx	r7
 80040ac:	3001      	adds	r0, #1
 80040ae:	f43f aeaa 	beq.w	8003e06 <_printf_float+0xc2>
 80040b2:	f108 0801 	add.w	r8, r8, #1
 80040b6:	e7ec      	b.n	8004092 <_printf_float+0x34e>
 80040b8:	4613      	mov	r3, r2
 80040ba:	4631      	mov	r1, r6
 80040bc:	4642      	mov	r2, r8
 80040be:	4628      	mov	r0, r5
 80040c0:	47b8      	blx	r7
 80040c2:	3001      	adds	r0, #1
 80040c4:	d1c0      	bne.n	8004048 <_printf_float+0x304>
 80040c6:	e69e      	b.n	8003e06 <_printf_float+0xc2>
 80040c8:	2301      	movs	r3, #1
 80040ca:	4631      	mov	r1, r6
 80040cc:	4628      	mov	r0, r5
 80040ce:	9205      	str	r2, [sp, #20]
 80040d0:	47b8      	blx	r7
 80040d2:	3001      	adds	r0, #1
 80040d4:	f43f ae97 	beq.w	8003e06 <_printf_float+0xc2>
 80040d8:	9a05      	ldr	r2, [sp, #20]
 80040da:	f10b 0b01 	add.w	fp, fp, #1
 80040de:	e7b9      	b.n	8004054 <_printf_float+0x310>
 80040e0:	ee18 3a10 	vmov	r3, s16
 80040e4:	4652      	mov	r2, sl
 80040e6:	4631      	mov	r1, r6
 80040e8:	4628      	mov	r0, r5
 80040ea:	47b8      	blx	r7
 80040ec:	3001      	adds	r0, #1
 80040ee:	d1be      	bne.n	800406e <_printf_float+0x32a>
 80040f0:	e689      	b.n	8003e06 <_printf_float+0xc2>
 80040f2:	9a05      	ldr	r2, [sp, #20]
 80040f4:	464b      	mov	r3, r9
 80040f6:	4442      	add	r2, r8
 80040f8:	4631      	mov	r1, r6
 80040fa:	4628      	mov	r0, r5
 80040fc:	47b8      	blx	r7
 80040fe:	3001      	adds	r0, #1
 8004100:	d1c1      	bne.n	8004086 <_printf_float+0x342>
 8004102:	e680      	b.n	8003e06 <_printf_float+0xc2>
 8004104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004106:	2a01      	cmp	r2, #1
 8004108:	dc01      	bgt.n	800410e <_printf_float+0x3ca>
 800410a:	07db      	lsls	r3, r3, #31
 800410c:	d538      	bpl.n	8004180 <_printf_float+0x43c>
 800410e:	2301      	movs	r3, #1
 8004110:	4642      	mov	r2, r8
 8004112:	4631      	mov	r1, r6
 8004114:	4628      	mov	r0, r5
 8004116:	47b8      	blx	r7
 8004118:	3001      	adds	r0, #1
 800411a:	f43f ae74 	beq.w	8003e06 <_printf_float+0xc2>
 800411e:	ee18 3a10 	vmov	r3, s16
 8004122:	4652      	mov	r2, sl
 8004124:	4631      	mov	r1, r6
 8004126:	4628      	mov	r0, r5
 8004128:	47b8      	blx	r7
 800412a:	3001      	adds	r0, #1
 800412c:	f43f ae6b 	beq.w	8003e06 <_printf_float+0xc2>
 8004130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004134:	2200      	movs	r2, #0
 8004136:	2300      	movs	r3, #0
 8004138:	f7fc fcce 	bl	8000ad8 <__aeabi_dcmpeq>
 800413c:	b9d8      	cbnz	r0, 8004176 <_printf_float+0x432>
 800413e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004140:	f108 0201 	add.w	r2, r8, #1
 8004144:	3b01      	subs	r3, #1
 8004146:	4631      	mov	r1, r6
 8004148:	4628      	mov	r0, r5
 800414a:	47b8      	blx	r7
 800414c:	3001      	adds	r0, #1
 800414e:	d10e      	bne.n	800416e <_printf_float+0x42a>
 8004150:	e659      	b.n	8003e06 <_printf_float+0xc2>
 8004152:	2301      	movs	r3, #1
 8004154:	4652      	mov	r2, sl
 8004156:	4631      	mov	r1, r6
 8004158:	4628      	mov	r0, r5
 800415a:	47b8      	blx	r7
 800415c:	3001      	adds	r0, #1
 800415e:	f43f ae52 	beq.w	8003e06 <_printf_float+0xc2>
 8004162:	f108 0801 	add.w	r8, r8, #1
 8004166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	4543      	cmp	r3, r8
 800416c:	dcf1      	bgt.n	8004152 <_printf_float+0x40e>
 800416e:	464b      	mov	r3, r9
 8004170:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004174:	e6dc      	b.n	8003f30 <_printf_float+0x1ec>
 8004176:	f04f 0800 	mov.w	r8, #0
 800417a:	f104 0a1a 	add.w	sl, r4, #26
 800417e:	e7f2      	b.n	8004166 <_printf_float+0x422>
 8004180:	2301      	movs	r3, #1
 8004182:	4642      	mov	r2, r8
 8004184:	e7df      	b.n	8004146 <_printf_float+0x402>
 8004186:	2301      	movs	r3, #1
 8004188:	464a      	mov	r2, r9
 800418a:	4631      	mov	r1, r6
 800418c:	4628      	mov	r0, r5
 800418e:	47b8      	blx	r7
 8004190:	3001      	adds	r0, #1
 8004192:	f43f ae38 	beq.w	8003e06 <_printf_float+0xc2>
 8004196:	f108 0801 	add.w	r8, r8, #1
 800419a:	68e3      	ldr	r3, [r4, #12]
 800419c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800419e:	1a5b      	subs	r3, r3, r1
 80041a0:	4543      	cmp	r3, r8
 80041a2:	dcf0      	bgt.n	8004186 <_printf_float+0x442>
 80041a4:	e6fa      	b.n	8003f9c <_printf_float+0x258>
 80041a6:	f04f 0800 	mov.w	r8, #0
 80041aa:	f104 0919 	add.w	r9, r4, #25
 80041ae:	e7f4      	b.n	800419a <_printf_float+0x456>

080041b0 <_printf_common>:
 80041b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b4:	4616      	mov	r6, r2
 80041b6:	4699      	mov	r9, r3
 80041b8:	688a      	ldr	r2, [r1, #8]
 80041ba:	690b      	ldr	r3, [r1, #16]
 80041bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041c0:	4293      	cmp	r3, r2
 80041c2:	bfb8      	it	lt
 80041c4:	4613      	movlt	r3, r2
 80041c6:	6033      	str	r3, [r6, #0]
 80041c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041cc:	4607      	mov	r7, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	b10a      	cbz	r2, 80041d6 <_printf_common+0x26>
 80041d2:	3301      	adds	r3, #1
 80041d4:	6033      	str	r3, [r6, #0]
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	0699      	lsls	r1, r3, #26
 80041da:	bf42      	ittt	mi
 80041dc:	6833      	ldrmi	r3, [r6, #0]
 80041de:	3302      	addmi	r3, #2
 80041e0:	6033      	strmi	r3, [r6, #0]
 80041e2:	6825      	ldr	r5, [r4, #0]
 80041e4:	f015 0506 	ands.w	r5, r5, #6
 80041e8:	d106      	bne.n	80041f8 <_printf_common+0x48>
 80041ea:	f104 0a19 	add.w	sl, r4, #25
 80041ee:	68e3      	ldr	r3, [r4, #12]
 80041f0:	6832      	ldr	r2, [r6, #0]
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	42ab      	cmp	r3, r5
 80041f6:	dc26      	bgt.n	8004246 <_printf_common+0x96>
 80041f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041fc:	1e13      	subs	r3, r2, #0
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	bf18      	it	ne
 8004202:	2301      	movne	r3, #1
 8004204:	0692      	lsls	r2, r2, #26
 8004206:	d42b      	bmi.n	8004260 <_printf_common+0xb0>
 8004208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800420c:	4649      	mov	r1, r9
 800420e:	4638      	mov	r0, r7
 8004210:	47c0      	blx	r8
 8004212:	3001      	adds	r0, #1
 8004214:	d01e      	beq.n	8004254 <_printf_common+0xa4>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	68e5      	ldr	r5, [r4, #12]
 800421a:	6832      	ldr	r2, [r6, #0]
 800421c:	f003 0306 	and.w	r3, r3, #6
 8004220:	2b04      	cmp	r3, #4
 8004222:	bf08      	it	eq
 8004224:	1aad      	subeq	r5, r5, r2
 8004226:	68a3      	ldr	r3, [r4, #8]
 8004228:	6922      	ldr	r2, [r4, #16]
 800422a:	bf0c      	ite	eq
 800422c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004230:	2500      	movne	r5, #0
 8004232:	4293      	cmp	r3, r2
 8004234:	bfc4      	itt	gt
 8004236:	1a9b      	subgt	r3, r3, r2
 8004238:	18ed      	addgt	r5, r5, r3
 800423a:	2600      	movs	r6, #0
 800423c:	341a      	adds	r4, #26
 800423e:	42b5      	cmp	r5, r6
 8004240:	d11a      	bne.n	8004278 <_printf_common+0xc8>
 8004242:	2000      	movs	r0, #0
 8004244:	e008      	b.n	8004258 <_printf_common+0xa8>
 8004246:	2301      	movs	r3, #1
 8004248:	4652      	mov	r2, sl
 800424a:	4649      	mov	r1, r9
 800424c:	4638      	mov	r0, r7
 800424e:	47c0      	blx	r8
 8004250:	3001      	adds	r0, #1
 8004252:	d103      	bne.n	800425c <_printf_common+0xac>
 8004254:	f04f 30ff 	mov.w	r0, #4294967295
 8004258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425c:	3501      	adds	r5, #1
 800425e:	e7c6      	b.n	80041ee <_printf_common+0x3e>
 8004260:	18e1      	adds	r1, r4, r3
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	2030      	movs	r0, #48	; 0x30
 8004266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800426a:	4422      	add	r2, r4
 800426c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004274:	3302      	adds	r3, #2
 8004276:	e7c7      	b.n	8004208 <_printf_common+0x58>
 8004278:	2301      	movs	r3, #1
 800427a:	4622      	mov	r2, r4
 800427c:	4649      	mov	r1, r9
 800427e:	4638      	mov	r0, r7
 8004280:	47c0      	blx	r8
 8004282:	3001      	adds	r0, #1
 8004284:	d0e6      	beq.n	8004254 <_printf_common+0xa4>
 8004286:	3601      	adds	r6, #1
 8004288:	e7d9      	b.n	800423e <_printf_common+0x8e>
	...

0800428c <_printf_i>:
 800428c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004290:	7e0f      	ldrb	r7, [r1, #24]
 8004292:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004294:	2f78      	cmp	r7, #120	; 0x78
 8004296:	4691      	mov	r9, r2
 8004298:	4680      	mov	r8, r0
 800429a:	460c      	mov	r4, r1
 800429c:	469a      	mov	sl, r3
 800429e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042a2:	d807      	bhi.n	80042b4 <_printf_i+0x28>
 80042a4:	2f62      	cmp	r7, #98	; 0x62
 80042a6:	d80a      	bhi.n	80042be <_printf_i+0x32>
 80042a8:	2f00      	cmp	r7, #0
 80042aa:	f000 80d8 	beq.w	800445e <_printf_i+0x1d2>
 80042ae:	2f58      	cmp	r7, #88	; 0x58
 80042b0:	f000 80a3 	beq.w	80043fa <_printf_i+0x16e>
 80042b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042bc:	e03a      	b.n	8004334 <_printf_i+0xa8>
 80042be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042c2:	2b15      	cmp	r3, #21
 80042c4:	d8f6      	bhi.n	80042b4 <_printf_i+0x28>
 80042c6:	a101      	add	r1, pc, #4	; (adr r1, 80042cc <_printf_i+0x40>)
 80042c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042cc:	08004325 	.word	0x08004325
 80042d0:	08004339 	.word	0x08004339
 80042d4:	080042b5 	.word	0x080042b5
 80042d8:	080042b5 	.word	0x080042b5
 80042dc:	080042b5 	.word	0x080042b5
 80042e0:	080042b5 	.word	0x080042b5
 80042e4:	08004339 	.word	0x08004339
 80042e8:	080042b5 	.word	0x080042b5
 80042ec:	080042b5 	.word	0x080042b5
 80042f0:	080042b5 	.word	0x080042b5
 80042f4:	080042b5 	.word	0x080042b5
 80042f8:	08004445 	.word	0x08004445
 80042fc:	08004369 	.word	0x08004369
 8004300:	08004427 	.word	0x08004427
 8004304:	080042b5 	.word	0x080042b5
 8004308:	080042b5 	.word	0x080042b5
 800430c:	08004467 	.word	0x08004467
 8004310:	080042b5 	.word	0x080042b5
 8004314:	08004369 	.word	0x08004369
 8004318:	080042b5 	.word	0x080042b5
 800431c:	080042b5 	.word	0x080042b5
 8004320:	0800442f 	.word	0x0800442f
 8004324:	682b      	ldr	r3, [r5, #0]
 8004326:	1d1a      	adds	r2, r3, #4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	602a      	str	r2, [r5, #0]
 800432c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004334:	2301      	movs	r3, #1
 8004336:	e0a3      	b.n	8004480 <_printf_i+0x1f4>
 8004338:	6820      	ldr	r0, [r4, #0]
 800433a:	6829      	ldr	r1, [r5, #0]
 800433c:	0606      	lsls	r6, r0, #24
 800433e:	f101 0304 	add.w	r3, r1, #4
 8004342:	d50a      	bpl.n	800435a <_printf_i+0xce>
 8004344:	680e      	ldr	r6, [r1, #0]
 8004346:	602b      	str	r3, [r5, #0]
 8004348:	2e00      	cmp	r6, #0
 800434a:	da03      	bge.n	8004354 <_printf_i+0xc8>
 800434c:	232d      	movs	r3, #45	; 0x2d
 800434e:	4276      	negs	r6, r6
 8004350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004354:	485e      	ldr	r0, [pc, #376]	; (80044d0 <_printf_i+0x244>)
 8004356:	230a      	movs	r3, #10
 8004358:	e019      	b.n	800438e <_printf_i+0x102>
 800435a:	680e      	ldr	r6, [r1, #0]
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004362:	bf18      	it	ne
 8004364:	b236      	sxthne	r6, r6
 8004366:	e7ef      	b.n	8004348 <_printf_i+0xbc>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	6820      	ldr	r0, [r4, #0]
 800436c:	1d19      	adds	r1, r3, #4
 800436e:	6029      	str	r1, [r5, #0]
 8004370:	0601      	lsls	r1, r0, #24
 8004372:	d501      	bpl.n	8004378 <_printf_i+0xec>
 8004374:	681e      	ldr	r6, [r3, #0]
 8004376:	e002      	b.n	800437e <_printf_i+0xf2>
 8004378:	0646      	lsls	r6, r0, #25
 800437a:	d5fb      	bpl.n	8004374 <_printf_i+0xe8>
 800437c:	881e      	ldrh	r6, [r3, #0]
 800437e:	4854      	ldr	r0, [pc, #336]	; (80044d0 <_printf_i+0x244>)
 8004380:	2f6f      	cmp	r7, #111	; 0x6f
 8004382:	bf0c      	ite	eq
 8004384:	2308      	moveq	r3, #8
 8004386:	230a      	movne	r3, #10
 8004388:	2100      	movs	r1, #0
 800438a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800438e:	6865      	ldr	r5, [r4, #4]
 8004390:	60a5      	str	r5, [r4, #8]
 8004392:	2d00      	cmp	r5, #0
 8004394:	bfa2      	ittt	ge
 8004396:	6821      	ldrge	r1, [r4, #0]
 8004398:	f021 0104 	bicge.w	r1, r1, #4
 800439c:	6021      	strge	r1, [r4, #0]
 800439e:	b90e      	cbnz	r6, 80043a4 <_printf_i+0x118>
 80043a0:	2d00      	cmp	r5, #0
 80043a2:	d04d      	beq.n	8004440 <_printf_i+0x1b4>
 80043a4:	4615      	mov	r5, r2
 80043a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80043aa:	fb03 6711 	mls	r7, r3, r1, r6
 80043ae:	5dc7      	ldrb	r7, [r0, r7]
 80043b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043b4:	4637      	mov	r7, r6
 80043b6:	42bb      	cmp	r3, r7
 80043b8:	460e      	mov	r6, r1
 80043ba:	d9f4      	bls.n	80043a6 <_printf_i+0x11a>
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d10b      	bne.n	80043d8 <_printf_i+0x14c>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	07de      	lsls	r6, r3, #31
 80043c4:	d508      	bpl.n	80043d8 <_printf_i+0x14c>
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	6861      	ldr	r1, [r4, #4]
 80043ca:	4299      	cmp	r1, r3
 80043cc:	bfde      	ittt	le
 80043ce:	2330      	movle	r3, #48	; 0x30
 80043d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043d8:	1b52      	subs	r2, r2, r5
 80043da:	6122      	str	r2, [r4, #16]
 80043dc:	f8cd a000 	str.w	sl, [sp]
 80043e0:	464b      	mov	r3, r9
 80043e2:	aa03      	add	r2, sp, #12
 80043e4:	4621      	mov	r1, r4
 80043e6:	4640      	mov	r0, r8
 80043e8:	f7ff fee2 	bl	80041b0 <_printf_common>
 80043ec:	3001      	adds	r0, #1
 80043ee:	d14c      	bne.n	800448a <_printf_i+0x1fe>
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	b004      	add	sp, #16
 80043f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fa:	4835      	ldr	r0, [pc, #212]	; (80044d0 <_printf_i+0x244>)
 80043fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004400:	6829      	ldr	r1, [r5, #0]
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	f851 6b04 	ldr.w	r6, [r1], #4
 8004408:	6029      	str	r1, [r5, #0]
 800440a:	061d      	lsls	r5, r3, #24
 800440c:	d514      	bpl.n	8004438 <_printf_i+0x1ac>
 800440e:	07df      	lsls	r7, r3, #31
 8004410:	bf44      	itt	mi
 8004412:	f043 0320 	orrmi.w	r3, r3, #32
 8004416:	6023      	strmi	r3, [r4, #0]
 8004418:	b91e      	cbnz	r6, 8004422 <_printf_i+0x196>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	f023 0320 	bic.w	r3, r3, #32
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	2310      	movs	r3, #16
 8004424:	e7b0      	b.n	8004388 <_printf_i+0xfc>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	f043 0320 	orr.w	r3, r3, #32
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	2378      	movs	r3, #120	; 0x78
 8004430:	4828      	ldr	r0, [pc, #160]	; (80044d4 <_printf_i+0x248>)
 8004432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004436:	e7e3      	b.n	8004400 <_printf_i+0x174>
 8004438:	0659      	lsls	r1, r3, #25
 800443a:	bf48      	it	mi
 800443c:	b2b6      	uxthmi	r6, r6
 800443e:	e7e6      	b.n	800440e <_printf_i+0x182>
 8004440:	4615      	mov	r5, r2
 8004442:	e7bb      	b.n	80043bc <_printf_i+0x130>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	6826      	ldr	r6, [r4, #0]
 8004448:	6961      	ldr	r1, [r4, #20]
 800444a:	1d18      	adds	r0, r3, #4
 800444c:	6028      	str	r0, [r5, #0]
 800444e:	0635      	lsls	r5, r6, #24
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	d501      	bpl.n	8004458 <_printf_i+0x1cc>
 8004454:	6019      	str	r1, [r3, #0]
 8004456:	e002      	b.n	800445e <_printf_i+0x1d2>
 8004458:	0670      	lsls	r0, r6, #25
 800445a:	d5fb      	bpl.n	8004454 <_printf_i+0x1c8>
 800445c:	8019      	strh	r1, [r3, #0]
 800445e:	2300      	movs	r3, #0
 8004460:	6123      	str	r3, [r4, #16]
 8004462:	4615      	mov	r5, r2
 8004464:	e7ba      	b.n	80043dc <_printf_i+0x150>
 8004466:	682b      	ldr	r3, [r5, #0]
 8004468:	1d1a      	adds	r2, r3, #4
 800446a:	602a      	str	r2, [r5, #0]
 800446c:	681d      	ldr	r5, [r3, #0]
 800446e:	6862      	ldr	r2, [r4, #4]
 8004470:	2100      	movs	r1, #0
 8004472:	4628      	mov	r0, r5
 8004474:	f7fb febc 	bl	80001f0 <memchr>
 8004478:	b108      	cbz	r0, 800447e <_printf_i+0x1f2>
 800447a:	1b40      	subs	r0, r0, r5
 800447c:	6060      	str	r0, [r4, #4]
 800447e:	6863      	ldr	r3, [r4, #4]
 8004480:	6123      	str	r3, [r4, #16]
 8004482:	2300      	movs	r3, #0
 8004484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004488:	e7a8      	b.n	80043dc <_printf_i+0x150>
 800448a:	6923      	ldr	r3, [r4, #16]
 800448c:	462a      	mov	r2, r5
 800448e:	4649      	mov	r1, r9
 8004490:	4640      	mov	r0, r8
 8004492:	47d0      	blx	sl
 8004494:	3001      	adds	r0, #1
 8004496:	d0ab      	beq.n	80043f0 <_printf_i+0x164>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	079b      	lsls	r3, r3, #30
 800449c:	d413      	bmi.n	80044c6 <_printf_i+0x23a>
 800449e:	68e0      	ldr	r0, [r4, #12]
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	4298      	cmp	r0, r3
 80044a4:	bfb8      	it	lt
 80044a6:	4618      	movlt	r0, r3
 80044a8:	e7a4      	b.n	80043f4 <_printf_i+0x168>
 80044aa:	2301      	movs	r3, #1
 80044ac:	4632      	mov	r2, r6
 80044ae:	4649      	mov	r1, r9
 80044b0:	4640      	mov	r0, r8
 80044b2:	47d0      	blx	sl
 80044b4:	3001      	adds	r0, #1
 80044b6:	d09b      	beq.n	80043f0 <_printf_i+0x164>
 80044b8:	3501      	adds	r5, #1
 80044ba:	68e3      	ldr	r3, [r4, #12]
 80044bc:	9903      	ldr	r1, [sp, #12]
 80044be:	1a5b      	subs	r3, r3, r1
 80044c0:	42ab      	cmp	r3, r5
 80044c2:	dcf2      	bgt.n	80044aa <_printf_i+0x21e>
 80044c4:	e7eb      	b.n	800449e <_printf_i+0x212>
 80044c6:	2500      	movs	r5, #0
 80044c8:	f104 0619 	add.w	r6, r4, #25
 80044cc:	e7f5      	b.n	80044ba <_printf_i+0x22e>
 80044ce:	bf00      	nop
 80044d0:	080095de 	.word	0x080095de
 80044d4:	080095ef 	.word	0x080095ef

080044d8 <_scanf_float>:
 80044d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044dc:	b087      	sub	sp, #28
 80044de:	4617      	mov	r7, r2
 80044e0:	9303      	str	r3, [sp, #12]
 80044e2:	688b      	ldr	r3, [r1, #8]
 80044e4:	1e5a      	subs	r2, r3, #1
 80044e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80044ea:	bf83      	ittte	hi
 80044ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80044f0:	195b      	addhi	r3, r3, r5
 80044f2:	9302      	strhi	r3, [sp, #8]
 80044f4:	2300      	movls	r3, #0
 80044f6:	bf86      	itte	hi
 80044f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80044fc:	608b      	strhi	r3, [r1, #8]
 80044fe:	9302      	strls	r3, [sp, #8]
 8004500:	680b      	ldr	r3, [r1, #0]
 8004502:	468b      	mov	fp, r1
 8004504:	2500      	movs	r5, #0
 8004506:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800450a:	f84b 3b1c 	str.w	r3, [fp], #28
 800450e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004512:	4680      	mov	r8, r0
 8004514:	460c      	mov	r4, r1
 8004516:	465e      	mov	r6, fp
 8004518:	46aa      	mov	sl, r5
 800451a:	46a9      	mov	r9, r5
 800451c:	9501      	str	r5, [sp, #4]
 800451e:	68a2      	ldr	r2, [r4, #8]
 8004520:	b152      	cbz	r2, 8004538 <_scanf_float+0x60>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b4e      	cmp	r3, #78	; 0x4e
 8004528:	d864      	bhi.n	80045f4 <_scanf_float+0x11c>
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d83c      	bhi.n	80045a8 <_scanf_float+0xd0>
 800452e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004532:	b2c8      	uxtb	r0, r1
 8004534:	280e      	cmp	r0, #14
 8004536:	d93a      	bls.n	80045ae <_scanf_float+0xd6>
 8004538:	f1b9 0f00 	cmp.w	r9, #0
 800453c:	d003      	beq.n	8004546 <_scanf_float+0x6e>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	f10a 3aff 	add.w	sl, sl, #4294967295
 800454a:	f1ba 0f01 	cmp.w	sl, #1
 800454e:	f200 8113 	bhi.w	8004778 <_scanf_float+0x2a0>
 8004552:	455e      	cmp	r6, fp
 8004554:	f200 8105 	bhi.w	8004762 <_scanf_float+0x28a>
 8004558:	2501      	movs	r5, #1
 800455a:	4628      	mov	r0, r5
 800455c:	b007      	add	sp, #28
 800455e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004562:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004566:	2a0d      	cmp	r2, #13
 8004568:	d8e6      	bhi.n	8004538 <_scanf_float+0x60>
 800456a:	a101      	add	r1, pc, #4	; (adr r1, 8004570 <_scanf_float+0x98>)
 800456c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004570:	080046af 	.word	0x080046af
 8004574:	08004539 	.word	0x08004539
 8004578:	08004539 	.word	0x08004539
 800457c:	08004539 	.word	0x08004539
 8004580:	0800470f 	.word	0x0800470f
 8004584:	080046e7 	.word	0x080046e7
 8004588:	08004539 	.word	0x08004539
 800458c:	08004539 	.word	0x08004539
 8004590:	080046bd 	.word	0x080046bd
 8004594:	08004539 	.word	0x08004539
 8004598:	08004539 	.word	0x08004539
 800459c:	08004539 	.word	0x08004539
 80045a0:	08004539 	.word	0x08004539
 80045a4:	08004675 	.word	0x08004675
 80045a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80045ac:	e7db      	b.n	8004566 <_scanf_float+0x8e>
 80045ae:	290e      	cmp	r1, #14
 80045b0:	d8c2      	bhi.n	8004538 <_scanf_float+0x60>
 80045b2:	a001      	add	r0, pc, #4	; (adr r0, 80045b8 <_scanf_float+0xe0>)
 80045b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80045b8:	08004667 	.word	0x08004667
 80045bc:	08004539 	.word	0x08004539
 80045c0:	08004667 	.word	0x08004667
 80045c4:	080046fb 	.word	0x080046fb
 80045c8:	08004539 	.word	0x08004539
 80045cc:	08004615 	.word	0x08004615
 80045d0:	08004651 	.word	0x08004651
 80045d4:	08004651 	.word	0x08004651
 80045d8:	08004651 	.word	0x08004651
 80045dc:	08004651 	.word	0x08004651
 80045e0:	08004651 	.word	0x08004651
 80045e4:	08004651 	.word	0x08004651
 80045e8:	08004651 	.word	0x08004651
 80045ec:	08004651 	.word	0x08004651
 80045f0:	08004651 	.word	0x08004651
 80045f4:	2b6e      	cmp	r3, #110	; 0x6e
 80045f6:	d809      	bhi.n	800460c <_scanf_float+0x134>
 80045f8:	2b60      	cmp	r3, #96	; 0x60
 80045fa:	d8b2      	bhi.n	8004562 <_scanf_float+0x8a>
 80045fc:	2b54      	cmp	r3, #84	; 0x54
 80045fe:	d077      	beq.n	80046f0 <_scanf_float+0x218>
 8004600:	2b59      	cmp	r3, #89	; 0x59
 8004602:	d199      	bne.n	8004538 <_scanf_float+0x60>
 8004604:	2d07      	cmp	r5, #7
 8004606:	d197      	bne.n	8004538 <_scanf_float+0x60>
 8004608:	2508      	movs	r5, #8
 800460a:	e029      	b.n	8004660 <_scanf_float+0x188>
 800460c:	2b74      	cmp	r3, #116	; 0x74
 800460e:	d06f      	beq.n	80046f0 <_scanf_float+0x218>
 8004610:	2b79      	cmp	r3, #121	; 0x79
 8004612:	e7f6      	b.n	8004602 <_scanf_float+0x12a>
 8004614:	6821      	ldr	r1, [r4, #0]
 8004616:	05c8      	lsls	r0, r1, #23
 8004618:	d51a      	bpl.n	8004650 <_scanf_float+0x178>
 800461a:	9b02      	ldr	r3, [sp, #8]
 800461c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004620:	6021      	str	r1, [r4, #0]
 8004622:	f109 0901 	add.w	r9, r9, #1
 8004626:	b11b      	cbz	r3, 8004630 <_scanf_float+0x158>
 8004628:	3b01      	subs	r3, #1
 800462a:	3201      	adds	r2, #1
 800462c:	9302      	str	r3, [sp, #8]
 800462e:	60a2      	str	r2, [r4, #8]
 8004630:	68a3      	ldr	r3, [r4, #8]
 8004632:	3b01      	subs	r3, #1
 8004634:	60a3      	str	r3, [r4, #8]
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	3301      	adds	r3, #1
 800463a:	6123      	str	r3, [r4, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	607b      	str	r3, [r7, #4]
 8004644:	f340 8084 	ble.w	8004750 <_scanf_float+0x278>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	e766      	b.n	800451e <_scanf_float+0x46>
 8004650:	eb1a 0f05 	cmn.w	sl, r5
 8004654:	f47f af70 	bne.w	8004538 <_scanf_float+0x60>
 8004658:	6822      	ldr	r2, [r4, #0]
 800465a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800465e:	6022      	str	r2, [r4, #0]
 8004660:	f806 3b01 	strb.w	r3, [r6], #1
 8004664:	e7e4      	b.n	8004630 <_scanf_float+0x158>
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	0610      	lsls	r0, r2, #24
 800466a:	f57f af65 	bpl.w	8004538 <_scanf_float+0x60>
 800466e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004672:	e7f4      	b.n	800465e <_scanf_float+0x186>
 8004674:	f1ba 0f00 	cmp.w	sl, #0
 8004678:	d10e      	bne.n	8004698 <_scanf_float+0x1c0>
 800467a:	f1b9 0f00 	cmp.w	r9, #0
 800467e:	d10e      	bne.n	800469e <_scanf_float+0x1c6>
 8004680:	6822      	ldr	r2, [r4, #0]
 8004682:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004686:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800468a:	d108      	bne.n	800469e <_scanf_float+0x1c6>
 800468c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004690:	6022      	str	r2, [r4, #0]
 8004692:	f04f 0a01 	mov.w	sl, #1
 8004696:	e7e3      	b.n	8004660 <_scanf_float+0x188>
 8004698:	f1ba 0f02 	cmp.w	sl, #2
 800469c:	d055      	beq.n	800474a <_scanf_float+0x272>
 800469e:	2d01      	cmp	r5, #1
 80046a0:	d002      	beq.n	80046a8 <_scanf_float+0x1d0>
 80046a2:	2d04      	cmp	r5, #4
 80046a4:	f47f af48 	bne.w	8004538 <_scanf_float+0x60>
 80046a8:	3501      	adds	r5, #1
 80046aa:	b2ed      	uxtb	r5, r5
 80046ac:	e7d8      	b.n	8004660 <_scanf_float+0x188>
 80046ae:	f1ba 0f01 	cmp.w	sl, #1
 80046b2:	f47f af41 	bne.w	8004538 <_scanf_float+0x60>
 80046b6:	f04f 0a02 	mov.w	sl, #2
 80046ba:	e7d1      	b.n	8004660 <_scanf_float+0x188>
 80046bc:	b97d      	cbnz	r5, 80046de <_scanf_float+0x206>
 80046be:	f1b9 0f00 	cmp.w	r9, #0
 80046c2:	f47f af3c 	bne.w	800453e <_scanf_float+0x66>
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80046cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80046d0:	f47f af39 	bne.w	8004546 <_scanf_float+0x6e>
 80046d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80046d8:	6022      	str	r2, [r4, #0]
 80046da:	2501      	movs	r5, #1
 80046dc:	e7c0      	b.n	8004660 <_scanf_float+0x188>
 80046de:	2d03      	cmp	r5, #3
 80046e0:	d0e2      	beq.n	80046a8 <_scanf_float+0x1d0>
 80046e2:	2d05      	cmp	r5, #5
 80046e4:	e7de      	b.n	80046a4 <_scanf_float+0x1cc>
 80046e6:	2d02      	cmp	r5, #2
 80046e8:	f47f af26 	bne.w	8004538 <_scanf_float+0x60>
 80046ec:	2503      	movs	r5, #3
 80046ee:	e7b7      	b.n	8004660 <_scanf_float+0x188>
 80046f0:	2d06      	cmp	r5, #6
 80046f2:	f47f af21 	bne.w	8004538 <_scanf_float+0x60>
 80046f6:	2507      	movs	r5, #7
 80046f8:	e7b2      	b.n	8004660 <_scanf_float+0x188>
 80046fa:	6822      	ldr	r2, [r4, #0]
 80046fc:	0591      	lsls	r1, r2, #22
 80046fe:	f57f af1b 	bpl.w	8004538 <_scanf_float+0x60>
 8004702:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004706:	6022      	str	r2, [r4, #0]
 8004708:	f8cd 9004 	str.w	r9, [sp, #4]
 800470c:	e7a8      	b.n	8004660 <_scanf_float+0x188>
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004714:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004718:	d006      	beq.n	8004728 <_scanf_float+0x250>
 800471a:	0550      	lsls	r0, r2, #21
 800471c:	f57f af0c 	bpl.w	8004538 <_scanf_float+0x60>
 8004720:	f1b9 0f00 	cmp.w	r9, #0
 8004724:	f43f af0f 	beq.w	8004546 <_scanf_float+0x6e>
 8004728:	0591      	lsls	r1, r2, #22
 800472a:	bf58      	it	pl
 800472c:	9901      	ldrpl	r1, [sp, #4]
 800472e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004732:	bf58      	it	pl
 8004734:	eba9 0101 	subpl.w	r1, r9, r1
 8004738:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800473c:	bf58      	it	pl
 800473e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004742:	6022      	str	r2, [r4, #0]
 8004744:	f04f 0900 	mov.w	r9, #0
 8004748:	e78a      	b.n	8004660 <_scanf_float+0x188>
 800474a:	f04f 0a03 	mov.w	sl, #3
 800474e:	e787      	b.n	8004660 <_scanf_float+0x188>
 8004750:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004754:	4639      	mov	r1, r7
 8004756:	4640      	mov	r0, r8
 8004758:	4798      	blx	r3
 800475a:	2800      	cmp	r0, #0
 800475c:	f43f aedf 	beq.w	800451e <_scanf_float+0x46>
 8004760:	e6ea      	b.n	8004538 <_scanf_float+0x60>
 8004762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004766:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800476a:	463a      	mov	r2, r7
 800476c:	4640      	mov	r0, r8
 800476e:	4798      	blx	r3
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	3b01      	subs	r3, #1
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	e6ec      	b.n	8004552 <_scanf_float+0x7a>
 8004778:	1e6b      	subs	r3, r5, #1
 800477a:	2b06      	cmp	r3, #6
 800477c:	d825      	bhi.n	80047ca <_scanf_float+0x2f2>
 800477e:	2d02      	cmp	r5, #2
 8004780:	d836      	bhi.n	80047f0 <_scanf_float+0x318>
 8004782:	455e      	cmp	r6, fp
 8004784:	f67f aee8 	bls.w	8004558 <_scanf_float+0x80>
 8004788:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800478c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004790:	463a      	mov	r2, r7
 8004792:	4640      	mov	r0, r8
 8004794:	4798      	blx	r3
 8004796:	6923      	ldr	r3, [r4, #16]
 8004798:	3b01      	subs	r3, #1
 800479a:	6123      	str	r3, [r4, #16]
 800479c:	e7f1      	b.n	8004782 <_scanf_float+0x2aa>
 800479e:	9802      	ldr	r0, [sp, #8]
 80047a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80047a8:	9002      	str	r0, [sp, #8]
 80047aa:	463a      	mov	r2, r7
 80047ac:	4640      	mov	r0, r8
 80047ae:	4798      	blx	r3
 80047b0:	6923      	ldr	r3, [r4, #16]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	6123      	str	r3, [r4, #16]
 80047b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047ba:	fa5f fa8a 	uxtb.w	sl, sl
 80047be:	f1ba 0f02 	cmp.w	sl, #2
 80047c2:	d1ec      	bne.n	800479e <_scanf_float+0x2c6>
 80047c4:	3d03      	subs	r5, #3
 80047c6:	b2ed      	uxtb	r5, r5
 80047c8:	1b76      	subs	r6, r6, r5
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	05da      	lsls	r2, r3, #23
 80047ce:	d52f      	bpl.n	8004830 <_scanf_float+0x358>
 80047d0:	055b      	lsls	r3, r3, #21
 80047d2:	d510      	bpl.n	80047f6 <_scanf_float+0x31e>
 80047d4:	455e      	cmp	r6, fp
 80047d6:	f67f aebf 	bls.w	8004558 <_scanf_float+0x80>
 80047da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047e2:	463a      	mov	r2, r7
 80047e4:	4640      	mov	r0, r8
 80047e6:	4798      	blx	r3
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	6123      	str	r3, [r4, #16]
 80047ee:	e7f1      	b.n	80047d4 <_scanf_float+0x2fc>
 80047f0:	46aa      	mov	sl, r5
 80047f2:	9602      	str	r6, [sp, #8]
 80047f4:	e7df      	b.n	80047b6 <_scanf_float+0x2de>
 80047f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80047fa:	6923      	ldr	r3, [r4, #16]
 80047fc:	2965      	cmp	r1, #101	; 0x65
 80047fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8004802:	f106 35ff 	add.w	r5, r6, #4294967295
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	d00c      	beq.n	8004824 <_scanf_float+0x34c>
 800480a:	2945      	cmp	r1, #69	; 0x45
 800480c:	d00a      	beq.n	8004824 <_scanf_float+0x34c>
 800480e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004812:	463a      	mov	r2, r7
 8004814:	4640      	mov	r0, r8
 8004816:	4798      	blx	r3
 8004818:	6923      	ldr	r3, [r4, #16]
 800481a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800481e:	3b01      	subs	r3, #1
 8004820:	1eb5      	subs	r5, r6, #2
 8004822:	6123      	str	r3, [r4, #16]
 8004824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004828:	463a      	mov	r2, r7
 800482a:	4640      	mov	r0, r8
 800482c:	4798      	blx	r3
 800482e:	462e      	mov	r6, r5
 8004830:	6825      	ldr	r5, [r4, #0]
 8004832:	f015 0510 	ands.w	r5, r5, #16
 8004836:	d159      	bne.n	80048ec <_scanf_float+0x414>
 8004838:	7035      	strb	r5, [r6, #0]
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004844:	d11b      	bne.n	800487e <_scanf_float+0x3a6>
 8004846:	9b01      	ldr	r3, [sp, #4]
 8004848:	454b      	cmp	r3, r9
 800484a:	eba3 0209 	sub.w	r2, r3, r9
 800484e:	d123      	bne.n	8004898 <_scanf_float+0x3c0>
 8004850:	2200      	movs	r2, #0
 8004852:	4659      	mov	r1, fp
 8004854:	4640      	mov	r0, r8
 8004856:	f000 fe99 	bl	800558c <_strtod_r>
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	f012 0f02 	tst.w	r2, #2
 8004862:	ec57 6b10 	vmov	r6, r7, d0
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	d021      	beq.n	80048ae <_scanf_float+0x3d6>
 800486a:	9903      	ldr	r1, [sp, #12]
 800486c:	1d1a      	adds	r2, r3, #4
 800486e:	600a      	str	r2, [r1, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	e9c3 6700 	strd	r6, r7, [r3]
 8004876:	68e3      	ldr	r3, [r4, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60e3      	str	r3, [r4, #12]
 800487c:	e66d      	b.n	800455a <_scanf_float+0x82>
 800487e:	9b04      	ldr	r3, [sp, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0e5      	beq.n	8004850 <_scanf_float+0x378>
 8004884:	9905      	ldr	r1, [sp, #20]
 8004886:	230a      	movs	r3, #10
 8004888:	462a      	mov	r2, r5
 800488a:	3101      	adds	r1, #1
 800488c:	4640      	mov	r0, r8
 800488e:	f000 ff05 	bl	800569c <_strtol_r>
 8004892:	9b04      	ldr	r3, [sp, #16]
 8004894:	9e05      	ldr	r6, [sp, #20]
 8004896:	1ac2      	subs	r2, r0, r3
 8004898:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800489c:	429e      	cmp	r6, r3
 800489e:	bf28      	it	cs
 80048a0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80048a4:	4912      	ldr	r1, [pc, #72]	; (80048f0 <_scanf_float+0x418>)
 80048a6:	4630      	mov	r0, r6
 80048a8:	f000 f82c 	bl	8004904 <siprintf>
 80048ac:	e7d0      	b.n	8004850 <_scanf_float+0x378>
 80048ae:	9903      	ldr	r1, [sp, #12]
 80048b0:	f012 0f04 	tst.w	r2, #4
 80048b4:	f103 0204 	add.w	r2, r3, #4
 80048b8:	600a      	str	r2, [r1, #0]
 80048ba:	d1d9      	bne.n	8004870 <_scanf_float+0x398>
 80048bc:	f8d3 8000 	ldr.w	r8, [r3]
 80048c0:	ee10 2a10 	vmov	r2, s0
 80048c4:	ee10 0a10 	vmov	r0, s0
 80048c8:	463b      	mov	r3, r7
 80048ca:	4639      	mov	r1, r7
 80048cc:	f7fc f936 	bl	8000b3c <__aeabi_dcmpun>
 80048d0:	b128      	cbz	r0, 80048de <_scanf_float+0x406>
 80048d2:	4808      	ldr	r0, [pc, #32]	; (80048f4 <_scanf_float+0x41c>)
 80048d4:	f000 f810 	bl	80048f8 <nanf>
 80048d8:	ed88 0a00 	vstr	s0, [r8]
 80048dc:	e7cb      	b.n	8004876 <_scanf_float+0x39e>
 80048de:	4630      	mov	r0, r6
 80048e0:	4639      	mov	r1, r7
 80048e2:	f7fc f989 	bl	8000bf8 <__aeabi_d2f>
 80048e6:	f8c8 0000 	str.w	r0, [r8]
 80048ea:	e7c4      	b.n	8004876 <_scanf_float+0x39e>
 80048ec:	2500      	movs	r5, #0
 80048ee:	e634      	b.n	800455a <_scanf_float+0x82>
 80048f0:	08009600 	.word	0x08009600
 80048f4:	08009a08 	.word	0x08009a08

080048f8 <nanf>:
 80048f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004900 <nanf+0x8>
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	7fc00000 	.word	0x7fc00000

08004904 <siprintf>:
 8004904:	b40e      	push	{r1, r2, r3}
 8004906:	b500      	push	{lr}
 8004908:	b09c      	sub	sp, #112	; 0x70
 800490a:	ab1d      	add	r3, sp, #116	; 0x74
 800490c:	9002      	str	r0, [sp, #8]
 800490e:	9006      	str	r0, [sp, #24]
 8004910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004914:	4809      	ldr	r0, [pc, #36]	; (800493c <siprintf+0x38>)
 8004916:	9107      	str	r1, [sp, #28]
 8004918:	9104      	str	r1, [sp, #16]
 800491a:	4909      	ldr	r1, [pc, #36]	; (8004940 <siprintf+0x3c>)
 800491c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004920:	9105      	str	r1, [sp, #20]
 8004922:	6800      	ldr	r0, [r0, #0]
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	a902      	add	r1, sp, #8
 8004928:	f002 fee4 	bl	80076f4 <_svfiprintf_r>
 800492c:	9b02      	ldr	r3, [sp, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	b01c      	add	sp, #112	; 0x70
 8004934:	f85d eb04 	ldr.w	lr, [sp], #4
 8004938:	b003      	add	sp, #12
 800493a:	4770      	bx	lr
 800493c:	2000000c 	.word	0x2000000c
 8004940:	ffff0208 	.word	0xffff0208

08004944 <sulp>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	4604      	mov	r4, r0
 8004948:	460d      	mov	r5, r1
 800494a:	ec45 4b10 	vmov	d0, r4, r5
 800494e:	4616      	mov	r6, r2
 8004950:	f002 fc2e 	bl	80071b0 <__ulp>
 8004954:	ec51 0b10 	vmov	r0, r1, d0
 8004958:	b17e      	cbz	r6, 800497a <sulp+0x36>
 800495a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800495e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004962:	2b00      	cmp	r3, #0
 8004964:	dd09      	ble.n	800497a <sulp+0x36>
 8004966:	051b      	lsls	r3, r3, #20
 8004968:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800496c:	2400      	movs	r4, #0
 800496e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004972:	4622      	mov	r2, r4
 8004974:	462b      	mov	r3, r5
 8004976:	f7fb fe47 	bl	8000608 <__aeabi_dmul>
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	0000      	movs	r0, r0
	...

08004980 <_strtod_l>:
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	ed2d 8b02 	vpush	{d8}
 8004988:	b09d      	sub	sp, #116	; 0x74
 800498a:	461f      	mov	r7, r3
 800498c:	2300      	movs	r3, #0
 800498e:	9318      	str	r3, [sp, #96]	; 0x60
 8004990:	4ba2      	ldr	r3, [pc, #648]	; (8004c1c <_strtod_l+0x29c>)
 8004992:	9213      	str	r2, [sp, #76]	; 0x4c
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	9305      	str	r3, [sp, #20]
 8004998:	4604      	mov	r4, r0
 800499a:	4618      	mov	r0, r3
 800499c:	4688      	mov	r8, r1
 800499e:	f7fb fc1f 	bl	80001e0 <strlen>
 80049a2:	f04f 0a00 	mov.w	sl, #0
 80049a6:	4605      	mov	r5, r0
 80049a8:	f04f 0b00 	mov.w	fp, #0
 80049ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80049b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80049b2:	781a      	ldrb	r2, [r3, #0]
 80049b4:	2a2b      	cmp	r2, #43	; 0x2b
 80049b6:	d04e      	beq.n	8004a56 <_strtod_l+0xd6>
 80049b8:	d83b      	bhi.n	8004a32 <_strtod_l+0xb2>
 80049ba:	2a0d      	cmp	r2, #13
 80049bc:	d834      	bhi.n	8004a28 <_strtod_l+0xa8>
 80049be:	2a08      	cmp	r2, #8
 80049c0:	d834      	bhi.n	8004a2c <_strtod_l+0xac>
 80049c2:	2a00      	cmp	r2, #0
 80049c4:	d03e      	beq.n	8004a44 <_strtod_l+0xc4>
 80049c6:	2300      	movs	r3, #0
 80049c8:	930a      	str	r3, [sp, #40]	; 0x28
 80049ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80049cc:	7833      	ldrb	r3, [r6, #0]
 80049ce:	2b30      	cmp	r3, #48	; 0x30
 80049d0:	f040 80b0 	bne.w	8004b34 <_strtod_l+0x1b4>
 80049d4:	7873      	ldrb	r3, [r6, #1]
 80049d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80049da:	2b58      	cmp	r3, #88	; 0x58
 80049dc:	d168      	bne.n	8004ab0 <_strtod_l+0x130>
 80049de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	ab18      	add	r3, sp, #96	; 0x60
 80049e4:	9702      	str	r7, [sp, #8]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	4a8d      	ldr	r2, [pc, #564]	; (8004c20 <_strtod_l+0x2a0>)
 80049ea:	ab19      	add	r3, sp, #100	; 0x64
 80049ec:	a917      	add	r1, sp, #92	; 0x5c
 80049ee:	4620      	mov	r0, r4
 80049f0:	f001 fd38 	bl	8006464 <__gethex>
 80049f4:	f010 0707 	ands.w	r7, r0, #7
 80049f8:	4605      	mov	r5, r0
 80049fa:	d005      	beq.n	8004a08 <_strtod_l+0x88>
 80049fc:	2f06      	cmp	r7, #6
 80049fe:	d12c      	bne.n	8004a5a <_strtod_l+0xda>
 8004a00:	3601      	adds	r6, #1
 8004a02:	2300      	movs	r3, #0
 8004a04:	9617      	str	r6, [sp, #92]	; 0x5c
 8004a06:	930a      	str	r3, [sp, #40]	; 0x28
 8004a08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f040 8590 	bne.w	8005530 <_strtod_l+0xbb0>
 8004a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a12:	b1eb      	cbz	r3, 8004a50 <_strtod_l+0xd0>
 8004a14:	4652      	mov	r2, sl
 8004a16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004a1a:	ec43 2b10 	vmov	d0, r2, r3
 8004a1e:	b01d      	add	sp, #116	; 0x74
 8004a20:	ecbd 8b02 	vpop	{d8}
 8004a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a28:	2a20      	cmp	r2, #32
 8004a2a:	d1cc      	bne.n	80049c6 <_strtod_l+0x46>
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004a30:	e7be      	b.n	80049b0 <_strtod_l+0x30>
 8004a32:	2a2d      	cmp	r2, #45	; 0x2d
 8004a34:	d1c7      	bne.n	80049c6 <_strtod_l+0x46>
 8004a36:	2201      	movs	r2, #1
 8004a38:	920a      	str	r2, [sp, #40]	; 0x28
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a3e:	785b      	ldrb	r3, [r3, #1]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1c2      	bne.n	80049ca <_strtod_l+0x4a>
 8004a44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 856e 	bne.w	800552c <_strtod_l+0xbac>
 8004a50:	4652      	mov	r2, sl
 8004a52:	465b      	mov	r3, fp
 8004a54:	e7e1      	b.n	8004a1a <_strtod_l+0x9a>
 8004a56:	2200      	movs	r2, #0
 8004a58:	e7ee      	b.n	8004a38 <_strtod_l+0xb8>
 8004a5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004a5c:	b13a      	cbz	r2, 8004a6e <_strtod_l+0xee>
 8004a5e:	2135      	movs	r1, #53	; 0x35
 8004a60:	a81a      	add	r0, sp, #104	; 0x68
 8004a62:	f002 fcb0 	bl	80073c6 <__copybits>
 8004a66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f002 f86f 	bl	8006b4c <_Bfree>
 8004a6e:	3f01      	subs	r7, #1
 8004a70:	2f04      	cmp	r7, #4
 8004a72:	d806      	bhi.n	8004a82 <_strtod_l+0x102>
 8004a74:	e8df f007 	tbb	[pc, r7]
 8004a78:	1714030a 	.word	0x1714030a
 8004a7c:	0a          	.byte	0x0a
 8004a7d:	00          	.byte	0x00
 8004a7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004a82:	0728      	lsls	r0, r5, #28
 8004a84:	d5c0      	bpl.n	8004a08 <_strtod_l+0x88>
 8004a86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004a8a:	e7bd      	b.n	8004a08 <_strtod_l+0x88>
 8004a8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004a90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004a92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004a96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004a9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004a9e:	e7f0      	b.n	8004a82 <_strtod_l+0x102>
 8004aa0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004c24 <_strtod_l+0x2a4>
 8004aa4:	e7ed      	b.n	8004a82 <_strtod_l+0x102>
 8004aa6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004aaa:	f04f 3aff 	mov.w	sl, #4294967295
 8004aae:	e7e8      	b.n	8004a82 <_strtod_l+0x102>
 8004ab0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	2b30      	cmp	r3, #48	; 0x30
 8004aba:	d0f9      	beq.n	8004ab0 <_strtod_l+0x130>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0a3      	beq.n	8004a08 <_strtod_l+0x88>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f04f 0900 	mov.w	r9, #0
 8004ac6:	9304      	str	r3, [sp, #16]
 8004ac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004aca:	9308      	str	r3, [sp, #32]
 8004acc:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ad0:	464f      	mov	r7, r9
 8004ad2:	220a      	movs	r2, #10
 8004ad4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004ad6:	7806      	ldrb	r6, [r0, #0]
 8004ad8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004adc:	b2d9      	uxtb	r1, r3
 8004ade:	2909      	cmp	r1, #9
 8004ae0:	d92a      	bls.n	8004b38 <_strtod_l+0x1b8>
 8004ae2:	9905      	ldr	r1, [sp, #20]
 8004ae4:	462a      	mov	r2, r5
 8004ae6:	f002 ff1f 	bl	8007928 <strncmp>
 8004aea:	b398      	cbz	r0, 8004b54 <_strtod_l+0x1d4>
 8004aec:	2000      	movs	r0, #0
 8004aee:	4632      	mov	r2, r6
 8004af0:	463d      	mov	r5, r7
 8004af2:	9005      	str	r0, [sp, #20]
 8004af4:	4603      	mov	r3, r0
 8004af6:	2a65      	cmp	r2, #101	; 0x65
 8004af8:	d001      	beq.n	8004afe <_strtod_l+0x17e>
 8004afa:	2a45      	cmp	r2, #69	; 0x45
 8004afc:	d118      	bne.n	8004b30 <_strtod_l+0x1b0>
 8004afe:	b91d      	cbnz	r5, 8004b08 <_strtod_l+0x188>
 8004b00:	9a04      	ldr	r2, [sp, #16]
 8004b02:	4302      	orrs	r2, r0
 8004b04:	d09e      	beq.n	8004a44 <_strtod_l+0xc4>
 8004b06:	2500      	movs	r5, #0
 8004b08:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004b0c:	f108 0201 	add.w	r2, r8, #1
 8004b10:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b12:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004b16:	2a2b      	cmp	r2, #43	; 0x2b
 8004b18:	d075      	beq.n	8004c06 <_strtod_l+0x286>
 8004b1a:	2a2d      	cmp	r2, #45	; 0x2d
 8004b1c:	d07b      	beq.n	8004c16 <_strtod_l+0x296>
 8004b1e:	f04f 0c00 	mov.w	ip, #0
 8004b22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004b26:	2909      	cmp	r1, #9
 8004b28:	f240 8082 	bls.w	8004c30 <_strtod_l+0x2b0>
 8004b2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004b30:	2600      	movs	r6, #0
 8004b32:	e09d      	b.n	8004c70 <_strtod_l+0x2f0>
 8004b34:	2300      	movs	r3, #0
 8004b36:	e7c4      	b.n	8004ac2 <_strtod_l+0x142>
 8004b38:	2f08      	cmp	r7, #8
 8004b3a:	bfd8      	it	le
 8004b3c:	9907      	ldrle	r1, [sp, #28]
 8004b3e:	f100 0001 	add.w	r0, r0, #1
 8004b42:	bfda      	itte	le
 8004b44:	fb02 3301 	mlale	r3, r2, r1, r3
 8004b48:	9307      	strle	r3, [sp, #28]
 8004b4a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004b4e:	3701      	adds	r7, #1
 8004b50:	9017      	str	r0, [sp, #92]	; 0x5c
 8004b52:	e7bf      	b.n	8004ad4 <_strtod_l+0x154>
 8004b54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b56:	195a      	adds	r2, r3, r5
 8004b58:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b5a:	5d5a      	ldrb	r2, [r3, r5]
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	d037      	beq.n	8004bd0 <_strtod_l+0x250>
 8004b60:	9005      	str	r0, [sp, #20]
 8004b62:	463d      	mov	r5, r7
 8004b64:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004b68:	2b09      	cmp	r3, #9
 8004b6a:	d912      	bls.n	8004b92 <_strtod_l+0x212>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e7c2      	b.n	8004af6 <_strtod_l+0x176>
 8004b70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b76:	785a      	ldrb	r2, [r3, #1]
 8004b78:	3001      	adds	r0, #1
 8004b7a:	2a30      	cmp	r2, #48	; 0x30
 8004b7c:	d0f8      	beq.n	8004b70 <_strtod_l+0x1f0>
 8004b7e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	f200 84d9 	bhi.w	800553a <_strtod_l+0xbba>
 8004b88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b8a:	9005      	str	r0, [sp, #20]
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	9308      	str	r3, [sp, #32]
 8004b90:	4605      	mov	r5, r0
 8004b92:	3a30      	subs	r2, #48	; 0x30
 8004b94:	f100 0301 	add.w	r3, r0, #1
 8004b98:	d014      	beq.n	8004bc4 <_strtod_l+0x244>
 8004b9a:	9905      	ldr	r1, [sp, #20]
 8004b9c:	4419      	add	r1, r3
 8004b9e:	9105      	str	r1, [sp, #20]
 8004ba0:	462b      	mov	r3, r5
 8004ba2:	eb00 0e05 	add.w	lr, r0, r5
 8004ba6:	210a      	movs	r1, #10
 8004ba8:	4573      	cmp	r3, lr
 8004baa:	d113      	bne.n	8004bd4 <_strtod_l+0x254>
 8004bac:	182b      	adds	r3, r5, r0
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	f105 0501 	add.w	r5, r5, #1
 8004bb4:	4405      	add	r5, r0
 8004bb6:	dc1c      	bgt.n	8004bf2 <_strtod_l+0x272>
 8004bb8:	9907      	ldr	r1, [sp, #28]
 8004bba:	230a      	movs	r3, #10
 8004bbc:	fb03 2301 	mla	r3, r3, r1, r2
 8004bc0:	9307      	str	r3, [sp, #28]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004bc6:	1c51      	adds	r1, r2, #1
 8004bc8:	9117      	str	r1, [sp, #92]	; 0x5c
 8004bca:	7852      	ldrb	r2, [r2, #1]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	e7c9      	b.n	8004b64 <_strtod_l+0x1e4>
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	e7d2      	b.n	8004b7a <_strtod_l+0x1fa>
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	dc04      	bgt.n	8004be2 <_strtod_l+0x262>
 8004bd8:	9e07      	ldr	r6, [sp, #28]
 8004bda:	434e      	muls	r6, r1
 8004bdc:	9607      	str	r6, [sp, #28]
 8004bde:	3301      	adds	r3, #1
 8004be0:	e7e2      	b.n	8004ba8 <_strtod_l+0x228>
 8004be2:	f103 0c01 	add.w	ip, r3, #1
 8004be6:	f1bc 0f10 	cmp.w	ip, #16
 8004bea:	bfd8      	it	le
 8004bec:	fb01 f909 	mulle.w	r9, r1, r9
 8004bf0:	e7f5      	b.n	8004bde <_strtod_l+0x25e>
 8004bf2:	2d10      	cmp	r5, #16
 8004bf4:	bfdc      	itt	le
 8004bf6:	230a      	movle	r3, #10
 8004bf8:	fb03 2909 	mlale	r9, r3, r9, r2
 8004bfc:	e7e1      	b.n	8004bc2 <_strtod_l+0x242>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9305      	str	r3, [sp, #20]
 8004c02:	2301      	movs	r3, #1
 8004c04:	e77c      	b.n	8004b00 <_strtod_l+0x180>
 8004c06:	f04f 0c00 	mov.w	ip, #0
 8004c0a:	f108 0202 	add.w	r2, r8, #2
 8004c0e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004c10:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004c14:	e785      	b.n	8004b22 <_strtod_l+0x1a2>
 8004c16:	f04f 0c01 	mov.w	ip, #1
 8004c1a:	e7f6      	b.n	8004c0a <_strtod_l+0x28a>
 8004c1c:	08009850 	.word	0x08009850
 8004c20:	08009608 	.word	0x08009608
 8004c24:	7ff00000 	.word	0x7ff00000
 8004c28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004c2a:	1c51      	adds	r1, r2, #1
 8004c2c:	9117      	str	r1, [sp, #92]	; 0x5c
 8004c2e:	7852      	ldrb	r2, [r2, #1]
 8004c30:	2a30      	cmp	r2, #48	; 0x30
 8004c32:	d0f9      	beq.n	8004c28 <_strtod_l+0x2a8>
 8004c34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004c38:	2908      	cmp	r1, #8
 8004c3a:	f63f af79 	bhi.w	8004b30 <_strtod_l+0x1b0>
 8004c3e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004c42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004c44:	9206      	str	r2, [sp, #24]
 8004c46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004c48:	1c51      	adds	r1, r2, #1
 8004c4a:	9117      	str	r1, [sp, #92]	; 0x5c
 8004c4c:	7852      	ldrb	r2, [r2, #1]
 8004c4e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004c52:	2e09      	cmp	r6, #9
 8004c54:	d937      	bls.n	8004cc6 <_strtod_l+0x346>
 8004c56:	9e06      	ldr	r6, [sp, #24]
 8004c58:	1b89      	subs	r1, r1, r6
 8004c5a:	2908      	cmp	r1, #8
 8004c5c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004c60:	dc02      	bgt.n	8004c68 <_strtod_l+0x2e8>
 8004c62:	4576      	cmp	r6, lr
 8004c64:	bfa8      	it	ge
 8004c66:	4676      	movge	r6, lr
 8004c68:	f1bc 0f00 	cmp.w	ip, #0
 8004c6c:	d000      	beq.n	8004c70 <_strtod_l+0x2f0>
 8004c6e:	4276      	negs	r6, r6
 8004c70:	2d00      	cmp	r5, #0
 8004c72:	d14d      	bne.n	8004d10 <_strtod_l+0x390>
 8004c74:	9904      	ldr	r1, [sp, #16]
 8004c76:	4301      	orrs	r1, r0
 8004c78:	f47f aec6 	bne.w	8004a08 <_strtod_l+0x88>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f47f aee1 	bne.w	8004a44 <_strtod_l+0xc4>
 8004c82:	2a69      	cmp	r2, #105	; 0x69
 8004c84:	d027      	beq.n	8004cd6 <_strtod_l+0x356>
 8004c86:	dc24      	bgt.n	8004cd2 <_strtod_l+0x352>
 8004c88:	2a49      	cmp	r2, #73	; 0x49
 8004c8a:	d024      	beq.n	8004cd6 <_strtod_l+0x356>
 8004c8c:	2a4e      	cmp	r2, #78	; 0x4e
 8004c8e:	f47f aed9 	bne.w	8004a44 <_strtod_l+0xc4>
 8004c92:	499f      	ldr	r1, [pc, #636]	; (8004f10 <_strtod_l+0x590>)
 8004c94:	a817      	add	r0, sp, #92	; 0x5c
 8004c96:	f001 fe3d 	bl	8006914 <__match>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	f43f aed2 	beq.w	8004a44 <_strtod_l+0xc4>
 8004ca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b28      	cmp	r3, #40	; 0x28
 8004ca6:	d12d      	bne.n	8004d04 <_strtod_l+0x384>
 8004ca8:	499a      	ldr	r1, [pc, #616]	; (8004f14 <_strtod_l+0x594>)
 8004caa:	aa1a      	add	r2, sp, #104	; 0x68
 8004cac:	a817      	add	r0, sp, #92	; 0x5c
 8004cae:	f001 fe45 	bl	800693c <__hexnan>
 8004cb2:	2805      	cmp	r0, #5
 8004cb4:	d126      	bne.n	8004d04 <_strtod_l+0x384>
 8004cb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cb8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004cbc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004cc0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004cc4:	e6a0      	b.n	8004a08 <_strtod_l+0x88>
 8004cc6:	210a      	movs	r1, #10
 8004cc8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004ccc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004cd0:	e7b9      	b.n	8004c46 <_strtod_l+0x2c6>
 8004cd2:	2a6e      	cmp	r2, #110	; 0x6e
 8004cd4:	e7db      	b.n	8004c8e <_strtod_l+0x30e>
 8004cd6:	4990      	ldr	r1, [pc, #576]	; (8004f18 <_strtod_l+0x598>)
 8004cd8:	a817      	add	r0, sp, #92	; 0x5c
 8004cda:	f001 fe1b 	bl	8006914 <__match>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	f43f aeb0 	beq.w	8004a44 <_strtod_l+0xc4>
 8004ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ce6:	498d      	ldr	r1, [pc, #564]	; (8004f1c <_strtod_l+0x59c>)
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	a817      	add	r0, sp, #92	; 0x5c
 8004cec:	9317      	str	r3, [sp, #92]	; 0x5c
 8004cee:	f001 fe11 	bl	8006914 <__match>
 8004cf2:	b910      	cbnz	r0, 8004cfa <_strtod_l+0x37a>
 8004cf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	9317      	str	r3, [sp, #92]	; 0x5c
 8004cfa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004f2c <_strtod_l+0x5ac>
 8004cfe:	f04f 0a00 	mov.w	sl, #0
 8004d02:	e681      	b.n	8004a08 <_strtod_l+0x88>
 8004d04:	4886      	ldr	r0, [pc, #536]	; (8004f20 <_strtod_l+0x5a0>)
 8004d06:	f002 fdf7 	bl	80078f8 <nan>
 8004d0a:	ec5b ab10 	vmov	sl, fp, d0
 8004d0e:	e67b      	b.n	8004a08 <_strtod_l+0x88>
 8004d10:	9b05      	ldr	r3, [sp, #20]
 8004d12:	9807      	ldr	r0, [sp, #28]
 8004d14:	1af3      	subs	r3, r6, r3
 8004d16:	2f00      	cmp	r7, #0
 8004d18:	bf08      	it	eq
 8004d1a:	462f      	moveq	r7, r5
 8004d1c:	2d10      	cmp	r5, #16
 8004d1e:	9306      	str	r3, [sp, #24]
 8004d20:	46a8      	mov	r8, r5
 8004d22:	bfa8      	it	ge
 8004d24:	f04f 0810 	movge.w	r8, #16
 8004d28:	f7fb fbf4 	bl	8000514 <__aeabi_ui2d>
 8004d2c:	2d09      	cmp	r5, #9
 8004d2e:	4682      	mov	sl, r0
 8004d30:	468b      	mov	fp, r1
 8004d32:	dd13      	ble.n	8004d5c <_strtod_l+0x3dc>
 8004d34:	4b7b      	ldr	r3, [pc, #492]	; (8004f24 <_strtod_l+0x5a4>)
 8004d36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004d3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004d3e:	f7fb fc63 	bl	8000608 <__aeabi_dmul>
 8004d42:	4682      	mov	sl, r0
 8004d44:	4648      	mov	r0, r9
 8004d46:	468b      	mov	fp, r1
 8004d48:	f7fb fbe4 	bl	8000514 <__aeabi_ui2d>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4650      	mov	r0, sl
 8004d52:	4659      	mov	r1, fp
 8004d54:	f7fb faa2 	bl	800029c <__adddf3>
 8004d58:	4682      	mov	sl, r0
 8004d5a:	468b      	mov	fp, r1
 8004d5c:	2d0f      	cmp	r5, #15
 8004d5e:	dc38      	bgt.n	8004dd2 <_strtod_l+0x452>
 8004d60:	9b06      	ldr	r3, [sp, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f43f ae50 	beq.w	8004a08 <_strtod_l+0x88>
 8004d68:	dd24      	ble.n	8004db4 <_strtod_l+0x434>
 8004d6a:	2b16      	cmp	r3, #22
 8004d6c:	dc0b      	bgt.n	8004d86 <_strtod_l+0x406>
 8004d6e:	496d      	ldr	r1, [pc, #436]	; (8004f24 <_strtod_l+0x5a4>)
 8004d70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d78:	4652      	mov	r2, sl
 8004d7a:	465b      	mov	r3, fp
 8004d7c:	f7fb fc44 	bl	8000608 <__aeabi_dmul>
 8004d80:	4682      	mov	sl, r0
 8004d82:	468b      	mov	fp, r1
 8004d84:	e640      	b.n	8004a08 <_strtod_l+0x88>
 8004d86:	9a06      	ldr	r2, [sp, #24]
 8004d88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	db20      	blt.n	8004dd2 <_strtod_l+0x452>
 8004d90:	4c64      	ldr	r4, [pc, #400]	; (8004f24 <_strtod_l+0x5a4>)
 8004d92:	f1c5 050f 	rsb	r5, r5, #15
 8004d96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004d9a:	4652      	mov	r2, sl
 8004d9c:	465b      	mov	r3, fp
 8004d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004da2:	f7fb fc31 	bl	8000608 <__aeabi_dmul>
 8004da6:	9b06      	ldr	r3, [sp, #24]
 8004da8:	1b5d      	subs	r5, r3, r5
 8004daa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004dae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004db2:	e7e3      	b.n	8004d7c <_strtod_l+0x3fc>
 8004db4:	9b06      	ldr	r3, [sp, #24]
 8004db6:	3316      	adds	r3, #22
 8004db8:	db0b      	blt.n	8004dd2 <_strtod_l+0x452>
 8004dba:	9b05      	ldr	r3, [sp, #20]
 8004dbc:	1b9e      	subs	r6, r3, r6
 8004dbe:	4b59      	ldr	r3, [pc, #356]	; (8004f24 <_strtod_l+0x5a4>)
 8004dc0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004dc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004dc8:	4650      	mov	r0, sl
 8004dca:	4659      	mov	r1, fp
 8004dcc:	f7fb fd46 	bl	800085c <__aeabi_ddiv>
 8004dd0:	e7d6      	b.n	8004d80 <_strtod_l+0x400>
 8004dd2:	9b06      	ldr	r3, [sp, #24]
 8004dd4:	eba5 0808 	sub.w	r8, r5, r8
 8004dd8:	4498      	add	r8, r3
 8004dda:	f1b8 0f00 	cmp.w	r8, #0
 8004dde:	dd74      	ble.n	8004eca <_strtod_l+0x54a>
 8004de0:	f018 030f 	ands.w	r3, r8, #15
 8004de4:	d00a      	beq.n	8004dfc <_strtod_l+0x47c>
 8004de6:	494f      	ldr	r1, [pc, #316]	; (8004f24 <_strtod_l+0x5a4>)
 8004de8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004dec:	4652      	mov	r2, sl
 8004dee:	465b      	mov	r3, fp
 8004df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004df4:	f7fb fc08 	bl	8000608 <__aeabi_dmul>
 8004df8:	4682      	mov	sl, r0
 8004dfa:	468b      	mov	fp, r1
 8004dfc:	f038 080f 	bics.w	r8, r8, #15
 8004e00:	d04f      	beq.n	8004ea2 <_strtod_l+0x522>
 8004e02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004e06:	dd22      	ble.n	8004e4e <_strtod_l+0x4ce>
 8004e08:	2500      	movs	r5, #0
 8004e0a:	462e      	mov	r6, r5
 8004e0c:	9507      	str	r5, [sp, #28]
 8004e0e:	9505      	str	r5, [sp, #20]
 8004e10:	2322      	movs	r3, #34	; 0x22
 8004e12:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004f2c <_strtod_l+0x5ac>
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	f04f 0a00 	mov.w	sl, #0
 8004e1c:	9b07      	ldr	r3, [sp, #28]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f43f adf2 	beq.w	8004a08 <_strtod_l+0x88>
 8004e24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004e26:	4620      	mov	r0, r4
 8004e28:	f001 fe90 	bl	8006b4c <_Bfree>
 8004e2c:	9905      	ldr	r1, [sp, #20]
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f001 fe8c 	bl	8006b4c <_Bfree>
 8004e34:	4631      	mov	r1, r6
 8004e36:	4620      	mov	r0, r4
 8004e38:	f001 fe88 	bl	8006b4c <_Bfree>
 8004e3c:	9907      	ldr	r1, [sp, #28]
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f001 fe84 	bl	8006b4c <_Bfree>
 8004e44:	4629      	mov	r1, r5
 8004e46:	4620      	mov	r0, r4
 8004e48:	f001 fe80 	bl	8006b4c <_Bfree>
 8004e4c:	e5dc      	b.n	8004a08 <_strtod_l+0x88>
 8004e4e:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <_strtod_l+0x5a8>)
 8004e50:	9304      	str	r3, [sp, #16]
 8004e52:	2300      	movs	r3, #0
 8004e54:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004e58:	4650      	mov	r0, sl
 8004e5a:	4659      	mov	r1, fp
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	f1b8 0f01 	cmp.w	r8, #1
 8004e62:	dc21      	bgt.n	8004ea8 <_strtod_l+0x528>
 8004e64:	b10b      	cbz	r3, 8004e6a <_strtod_l+0x4ea>
 8004e66:	4682      	mov	sl, r0
 8004e68:	468b      	mov	fp, r1
 8004e6a:	4b2f      	ldr	r3, [pc, #188]	; (8004f28 <_strtod_l+0x5a8>)
 8004e6c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004e70:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004e74:	4652      	mov	r2, sl
 8004e76:	465b      	mov	r3, fp
 8004e78:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004e7c:	f7fb fbc4 	bl	8000608 <__aeabi_dmul>
 8004e80:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <_strtod_l+0x5ac>)
 8004e82:	460a      	mov	r2, r1
 8004e84:	400b      	ands	r3, r1
 8004e86:	492a      	ldr	r1, [pc, #168]	; (8004f30 <_strtod_l+0x5b0>)
 8004e88:	428b      	cmp	r3, r1
 8004e8a:	4682      	mov	sl, r0
 8004e8c:	d8bc      	bhi.n	8004e08 <_strtod_l+0x488>
 8004e8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004e92:	428b      	cmp	r3, r1
 8004e94:	bf86      	itte	hi
 8004e96:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004f34 <_strtod_l+0x5b4>
 8004e9a:	f04f 3aff 	movhi.w	sl, #4294967295
 8004e9e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9304      	str	r3, [sp, #16]
 8004ea6:	e084      	b.n	8004fb2 <_strtod_l+0x632>
 8004ea8:	f018 0f01 	tst.w	r8, #1
 8004eac:	d005      	beq.n	8004eba <_strtod_l+0x53a>
 8004eae:	9b04      	ldr	r3, [sp, #16]
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f7fb fba8 	bl	8000608 <__aeabi_dmul>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	9a04      	ldr	r2, [sp, #16]
 8004ebc:	3208      	adds	r2, #8
 8004ebe:	f109 0901 	add.w	r9, r9, #1
 8004ec2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004ec6:	9204      	str	r2, [sp, #16]
 8004ec8:	e7c9      	b.n	8004e5e <_strtod_l+0x4de>
 8004eca:	d0ea      	beq.n	8004ea2 <_strtod_l+0x522>
 8004ecc:	f1c8 0800 	rsb	r8, r8, #0
 8004ed0:	f018 020f 	ands.w	r2, r8, #15
 8004ed4:	d00a      	beq.n	8004eec <_strtod_l+0x56c>
 8004ed6:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <_strtod_l+0x5a4>)
 8004ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004edc:	4650      	mov	r0, sl
 8004ede:	4659      	mov	r1, fp
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb fcba 	bl	800085c <__aeabi_ddiv>
 8004ee8:	4682      	mov	sl, r0
 8004eea:	468b      	mov	fp, r1
 8004eec:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004ef0:	d0d7      	beq.n	8004ea2 <_strtod_l+0x522>
 8004ef2:	f1b8 0f1f 	cmp.w	r8, #31
 8004ef6:	dd1f      	ble.n	8004f38 <_strtod_l+0x5b8>
 8004ef8:	2500      	movs	r5, #0
 8004efa:	462e      	mov	r6, r5
 8004efc:	9507      	str	r5, [sp, #28]
 8004efe:	9505      	str	r5, [sp, #20]
 8004f00:	2322      	movs	r3, #34	; 0x22
 8004f02:	f04f 0a00 	mov.w	sl, #0
 8004f06:	f04f 0b00 	mov.w	fp, #0
 8004f0a:	6023      	str	r3, [r4, #0]
 8004f0c:	e786      	b.n	8004e1c <_strtod_l+0x49c>
 8004f0e:	bf00      	nop
 8004f10:	080095d9 	.word	0x080095d9
 8004f14:	0800961c 	.word	0x0800961c
 8004f18:	080095d1 	.word	0x080095d1
 8004f1c:	0800975c 	.word	0x0800975c
 8004f20:	08009a08 	.word	0x08009a08
 8004f24:	080098e8 	.word	0x080098e8
 8004f28:	080098c0 	.word	0x080098c0
 8004f2c:	7ff00000 	.word	0x7ff00000
 8004f30:	7ca00000 	.word	0x7ca00000
 8004f34:	7fefffff 	.word	0x7fefffff
 8004f38:	f018 0310 	ands.w	r3, r8, #16
 8004f3c:	bf18      	it	ne
 8004f3e:	236a      	movne	r3, #106	; 0x6a
 8004f40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80052f0 <_strtod_l+0x970>
 8004f44:	9304      	str	r3, [sp, #16]
 8004f46:	4650      	mov	r0, sl
 8004f48:	4659      	mov	r1, fp
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f018 0f01 	tst.w	r8, #1
 8004f50:	d004      	beq.n	8004f5c <_strtod_l+0x5dc>
 8004f52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004f56:	f7fb fb57 	bl	8000608 <__aeabi_dmul>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004f60:	f109 0908 	add.w	r9, r9, #8
 8004f64:	d1f2      	bne.n	8004f4c <_strtod_l+0x5cc>
 8004f66:	b10b      	cbz	r3, 8004f6c <_strtod_l+0x5ec>
 8004f68:	4682      	mov	sl, r0
 8004f6a:	468b      	mov	fp, r1
 8004f6c:	9b04      	ldr	r3, [sp, #16]
 8004f6e:	b1c3      	cbz	r3, 8004fa2 <_strtod_l+0x622>
 8004f70:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004f74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	4659      	mov	r1, fp
 8004f7c:	dd11      	ble.n	8004fa2 <_strtod_l+0x622>
 8004f7e:	2b1f      	cmp	r3, #31
 8004f80:	f340 8124 	ble.w	80051cc <_strtod_l+0x84c>
 8004f84:	2b34      	cmp	r3, #52	; 0x34
 8004f86:	bfde      	ittt	le
 8004f88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004f8c:	f04f 33ff 	movle.w	r3, #4294967295
 8004f90:	fa03 f202 	lslle.w	r2, r3, r2
 8004f94:	f04f 0a00 	mov.w	sl, #0
 8004f98:	bfcc      	ite	gt
 8004f9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004f9e:	ea02 0b01 	andle.w	fp, r2, r1
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4650      	mov	r0, sl
 8004fa8:	4659      	mov	r1, fp
 8004faa:	f7fb fd95 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d1a2      	bne.n	8004ef8 <_strtod_l+0x578>
 8004fb2:	9b07      	ldr	r3, [sp, #28]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	9908      	ldr	r1, [sp, #32]
 8004fb8:	462b      	mov	r3, r5
 8004fba:	463a      	mov	r2, r7
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f001 fe2d 	bl	8006c1c <__s2b>
 8004fc2:	9007      	str	r0, [sp, #28]
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	f43f af1f 	beq.w	8004e08 <_strtod_l+0x488>
 8004fca:	9b05      	ldr	r3, [sp, #20]
 8004fcc:	1b9e      	subs	r6, r3, r6
 8004fce:	9b06      	ldr	r3, [sp, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bfb4      	ite	lt
 8004fd4:	4633      	movlt	r3, r6
 8004fd6:	2300      	movge	r3, #0
 8004fd8:	930c      	str	r3, [sp, #48]	; 0x30
 8004fda:	9b06      	ldr	r3, [sp, #24]
 8004fdc:	2500      	movs	r5, #0
 8004fde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004fe2:	9312      	str	r3, [sp, #72]	; 0x48
 8004fe4:	462e      	mov	r6, r5
 8004fe6:	9b07      	ldr	r3, [sp, #28]
 8004fe8:	4620      	mov	r0, r4
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	f001 fd6e 	bl	8006acc <_Balloc>
 8004ff0:	9005      	str	r0, [sp, #20]
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	f43f af0c 	beq.w	8004e10 <_strtod_l+0x490>
 8004ff8:	9b07      	ldr	r3, [sp, #28]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	3202      	adds	r2, #2
 8004ffe:	f103 010c 	add.w	r1, r3, #12
 8005002:	0092      	lsls	r2, r2, #2
 8005004:	300c      	adds	r0, #12
 8005006:	f001 fd53 	bl	8006ab0 <memcpy>
 800500a:	ec4b ab10 	vmov	d0, sl, fp
 800500e:	aa1a      	add	r2, sp, #104	; 0x68
 8005010:	a919      	add	r1, sp, #100	; 0x64
 8005012:	4620      	mov	r0, r4
 8005014:	f002 f948 	bl	80072a8 <__d2b>
 8005018:	ec4b ab18 	vmov	d8, sl, fp
 800501c:	9018      	str	r0, [sp, #96]	; 0x60
 800501e:	2800      	cmp	r0, #0
 8005020:	f43f aef6 	beq.w	8004e10 <_strtod_l+0x490>
 8005024:	2101      	movs	r1, #1
 8005026:	4620      	mov	r0, r4
 8005028:	f001 fe92 	bl	8006d50 <__i2b>
 800502c:	4606      	mov	r6, r0
 800502e:	2800      	cmp	r0, #0
 8005030:	f43f aeee 	beq.w	8004e10 <_strtod_l+0x490>
 8005034:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005036:	9904      	ldr	r1, [sp, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	bfab      	itete	ge
 800503c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800503e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005040:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005042:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005046:	bfac      	ite	ge
 8005048:	eb03 0902 	addge.w	r9, r3, r2
 800504c:	1ad7      	sublt	r7, r2, r3
 800504e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005050:	eba3 0801 	sub.w	r8, r3, r1
 8005054:	4490      	add	r8, r2
 8005056:	4ba1      	ldr	r3, [pc, #644]	; (80052dc <_strtod_l+0x95c>)
 8005058:	f108 38ff 	add.w	r8, r8, #4294967295
 800505c:	4598      	cmp	r8, r3
 800505e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005062:	f280 80c7 	bge.w	80051f4 <_strtod_l+0x874>
 8005066:	eba3 0308 	sub.w	r3, r3, r8
 800506a:	2b1f      	cmp	r3, #31
 800506c:	eba2 0203 	sub.w	r2, r2, r3
 8005070:	f04f 0101 	mov.w	r1, #1
 8005074:	f300 80b1 	bgt.w	80051da <_strtod_l+0x85a>
 8005078:	fa01 f303 	lsl.w	r3, r1, r3
 800507c:	930d      	str	r3, [sp, #52]	; 0x34
 800507e:	2300      	movs	r3, #0
 8005080:	9308      	str	r3, [sp, #32]
 8005082:	eb09 0802 	add.w	r8, r9, r2
 8005086:	9b04      	ldr	r3, [sp, #16]
 8005088:	45c1      	cmp	r9, r8
 800508a:	4417      	add	r7, r2
 800508c:	441f      	add	r7, r3
 800508e:	464b      	mov	r3, r9
 8005090:	bfa8      	it	ge
 8005092:	4643      	movge	r3, r8
 8005094:	42bb      	cmp	r3, r7
 8005096:	bfa8      	it	ge
 8005098:	463b      	movge	r3, r7
 800509a:	2b00      	cmp	r3, #0
 800509c:	bfc2      	ittt	gt
 800509e:	eba8 0803 	subgt.w	r8, r8, r3
 80050a2:	1aff      	subgt	r7, r7, r3
 80050a4:	eba9 0903 	subgt.w	r9, r9, r3
 80050a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	dd17      	ble.n	80050de <_strtod_l+0x75e>
 80050ae:	4631      	mov	r1, r6
 80050b0:	461a      	mov	r2, r3
 80050b2:	4620      	mov	r0, r4
 80050b4:	f001 ff0c 	bl	8006ed0 <__pow5mult>
 80050b8:	4606      	mov	r6, r0
 80050ba:	2800      	cmp	r0, #0
 80050bc:	f43f aea8 	beq.w	8004e10 <_strtod_l+0x490>
 80050c0:	4601      	mov	r1, r0
 80050c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80050c4:	4620      	mov	r0, r4
 80050c6:	f001 fe59 	bl	8006d7c <__multiply>
 80050ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80050cc:	2800      	cmp	r0, #0
 80050ce:	f43f ae9f 	beq.w	8004e10 <_strtod_l+0x490>
 80050d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80050d4:	4620      	mov	r0, r4
 80050d6:	f001 fd39 	bl	8006b4c <_Bfree>
 80050da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050dc:	9318      	str	r3, [sp, #96]	; 0x60
 80050de:	f1b8 0f00 	cmp.w	r8, #0
 80050e2:	f300 808c 	bgt.w	80051fe <_strtod_l+0x87e>
 80050e6:	9b06      	ldr	r3, [sp, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	dd08      	ble.n	80050fe <_strtod_l+0x77e>
 80050ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050ee:	9905      	ldr	r1, [sp, #20]
 80050f0:	4620      	mov	r0, r4
 80050f2:	f001 feed 	bl	8006ed0 <__pow5mult>
 80050f6:	9005      	str	r0, [sp, #20]
 80050f8:	2800      	cmp	r0, #0
 80050fa:	f43f ae89 	beq.w	8004e10 <_strtod_l+0x490>
 80050fe:	2f00      	cmp	r7, #0
 8005100:	dd08      	ble.n	8005114 <_strtod_l+0x794>
 8005102:	9905      	ldr	r1, [sp, #20]
 8005104:	463a      	mov	r2, r7
 8005106:	4620      	mov	r0, r4
 8005108:	f001 ff3c 	bl	8006f84 <__lshift>
 800510c:	9005      	str	r0, [sp, #20]
 800510e:	2800      	cmp	r0, #0
 8005110:	f43f ae7e 	beq.w	8004e10 <_strtod_l+0x490>
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	dd08      	ble.n	800512c <_strtod_l+0x7ac>
 800511a:	4631      	mov	r1, r6
 800511c:	464a      	mov	r2, r9
 800511e:	4620      	mov	r0, r4
 8005120:	f001 ff30 	bl	8006f84 <__lshift>
 8005124:	4606      	mov	r6, r0
 8005126:	2800      	cmp	r0, #0
 8005128:	f43f ae72 	beq.w	8004e10 <_strtod_l+0x490>
 800512c:	9a05      	ldr	r2, [sp, #20]
 800512e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005130:	4620      	mov	r0, r4
 8005132:	f001 ffb3 	bl	800709c <__mdiff>
 8005136:	4605      	mov	r5, r0
 8005138:	2800      	cmp	r0, #0
 800513a:	f43f ae69 	beq.w	8004e10 <_strtod_l+0x490>
 800513e:	68c3      	ldr	r3, [r0, #12]
 8005140:	930b      	str	r3, [sp, #44]	; 0x2c
 8005142:	2300      	movs	r3, #0
 8005144:	60c3      	str	r3, [r0, #12]
 8005146:	4631      	mov	r1, r6
 8005148:	f001 ff8c 	bl	8007064 <__mcmp>
 800514c:	2800      	cmp	r0, #0
 800514e:	da60      	bge.n	8005212 <_strtod_l+0x892>
 8005150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005152:	ea53 030a 	orrs.w	r3, r3, sl
 8005156:	f040 8082 	bne.w	800525e <_strtod_l+0x8de>
 800515a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800515e:	2b00      	cmp	r3, #0
 8005160:	d17d      	bne.n	800525e <_strtod_l+0x8de>
 8005162:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005166:	0d1b      	lsrs	r3, r3, #20
 8005168:	051b      	lsls	r3, r3, #20
 800516a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800516e:	d976      	bls.n	800525e <_strtod_l+0x8de>
 8005170:	696b      	ldr	r3, [r5, #20]
 8005172:	b913      	cbnz	r3, 800517a <_strtod_l+0x7fa>
 8005174:	692b      	ldr	r3, [r5, #16]
 8005176:	2b01      	cmp	r3, #1
 8005178:	dd71      	ble.n	800525e <_strtod_l+0x8de>
 800517a:	4629      	mov	r1, r5
 800517c:	2201      	movs	r2, #1
 800517e:	4620      	mov	r0, r4
 8005180:	f001 ff00 	bl	8006f84 <__lshift>
 8005184:	4631      	mov	r1, r6
 8005186:	4605      	mov	r5, r0
 8005188:	f001 ff6c 	bl	8007064 <__mcmp>
 800518c:	2800      	cmp	r0, #0
 800518e:	dd66      	ble.n	800525e <_strtod_l+0x8de>
 8005190:	9904      	ldr	r1, [sp, #16]
 8005192:	4a53      	ldr	r2, [pc, #332]	; (80052e0 <_strtod_l+0x960>)
 8005194:	465b      	mov	r3, fp
 8005196:	2900      	cmp	r1, #0
 8005198:	f000 8081 	beq.w	800529e <_strtod_l+0x91e>
 800519c:	ea02 010b 	and.w	r1, r2, fp
 80051a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80051a4:	dc7b      	bgt.n	800529e <_strtod_l+0x91e>
 80051a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80051aa:	f77f aea9 	ble.w	8004f00 <_strtod_l+0x580>
 80051ae:	4b4d      	ldr	r3, [pc, #308]	; (80052e4 <_strtod_l+0x964>)
 80051b0:	4650      	mov	r0, sl
 80051b2:	4659      	mov	r1, fp
 80051b4:	2200      	movs	r2, #0
 80051b6:	f7fb fa27 	bl	8000608 <__aeabi_dmul>
 80051ba:	460b      	mov	r3, r1
 80051bc:	4303      	orrs	r3, r0
 80051be:	bf08      	it	eq
 80051c0:	2322      	moveq	r3, #34	; 0x22
 80051c2:	4682      	mov	sl, r0
 80051c4:	468b      	mov	fp, r1
 80051c6:	bf08      	it	eq
 80051c8:	6023      	streq	r3, [r4, #0]
 80051ca:	e62b      	b.n	8004e24 <_strtod_l+0x4a4>
 80051cc:	f04f 32ff 	mov.w	r2, #4294967295
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	ea03 0a0a 	and.w	sl, r3, sl
 80051d8:	e6e3      	b.n	8004fa2 <_strtod_l+0x622>
 80051da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80051de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80051e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80051e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80051ea:	fa01 f308 	lsl.w	r3, r1, r8
 80051ee:	9308      	str	r3, [sp, #32]
 80051f0:	910d      	str	r1, [sp, #52]	; 0x34
 80051f2:	e746      	b.n	8005082 <_strtod_l+0x702>
 80051f4:	2300      	movs	r3, #0
 80051f6:	9308      	str	r3, [sp, #32]
 80051f8:	2301      	movs	r3, #1
 80051fa:	930d      	str	r3, [sp, #52]	; 0x34
 80051fc:	e741      	b.n	8005082 <_strtod_l+0x702>
 80051fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005200:	4642      	mov	r2, r8
 8005202:	4620      	mov	r0, r4
 8005204:	f001 febe 	bl	8006f84 <__lshift>
 8005208:	9018      	str	r0, [sp, #96]	; 0x60
 800520a:	2800      	cmp	r0, #0
 800520c:	f47f af6b 	bne.w	80050e6 <_strtod_l+0x766>
 8005210:	e5fe      	b.n	8004e10 <_strtod_l+0x490>
 8005212:	465f      	mov	r7, fp
 8005214:	d16e      	bne.n	80052f4 <_strtod_l+0x974>
 8005216:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005218:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800521c:	b342      	cbz	r2, 8005270 <_strtod_l+0x8f0>
 800521e:	4a32      	ldr	r2, [pc, #200]	; (80052e8 <_strtod_l+0x968>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d128      	bne.n	8005276 <_strtod_l+0x8f6>
 8005224:	9b04      	ldr	r3, [sp, #16]
 8005226:	4651      	mov	r1, sl
 8005228:	b1eb      	cbz	r3, 8005266 <_strtod_l+0x8e6>
 800522a:	4b2d      	ldr	r3, [pc, #180]	; (80052e0 <_strtod_l+0x960>)
 800522c:	403b      	ands	r3, r7
 800522e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005232:	f04f 32ff 	mov.w	r2, #4294967295
 8005236:	d819      	bhi.n	800526c <_strtod_l+0x8ec>
 8005238:	0d1b      	lsrs	r3, r3, #20
 800523a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	4299      	cmp	r1, r3
 8005244:	d117      	bne.n	8005276 <_strtod_l+0x8f6>
 8005246:	4b29      	ldr	r3, [pc, #164]	; (80052ec <_strtod_l+0x96c>)
 8005248:	429f      	cmp	r7, r3
 800524a:	d102      	bne.n	8005252 <_strtod_l+0x8d2>
 800524c:	3101      	adds	r1, #1
 800524e:	f43f addf 	beq.w	8004e10 <_strtod_l+0x490>
 8005252:	4b23      	ldr	r3, [pc, #140]	; (80052e0 <_strtod_l+0x960>)
 8005254:	403b      	ands	r3, r7
 8005256:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800525a:	f04f 0a00 	mov.w	sl, #0
 800525e:	9b04      	ldr	r3, [sp, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1a4      	bne.n	80051ae <_strtod_l+0x82e>
 8005264:	e5de      	b.n	8004e24 <_strtod_l+0x4a4>
 8005266:	f04f 33ff 	mov.w	r3, #4294967295
 800526a:	e7ea      	b.n	8005242 <_strtod_l+0x8c2>
 800526c:	4613      	mov	r3, r2
 800526e:	e7e8      	b.n	8005242 <_strtod_l+0x8c2>
 8005270:	ea53 030a 	orrs.w	r3, r3, sl
 8005274:	d08c      	beq.n	8005190 <_strtod_l+0x810>
 8005276:	9b08      	ldr	r3, [sp, #32]
 8005278:	b1db      	cbz	r3, 80052b2 <_strtod_l+0x932>
 800527a:	423b      	tst	r3, r7
 800527c:	d0ef      	beq.n	800525e <_strtod_l+0x8de>
 800527e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005280:	9a04      	ldr	r2, [sp, #16]
 8005282:	4650      	mov	r0, sl
 8005284:	4659      	mov	r1, fp
 8005286:	b1c3      	cbz	r3, 80052ba <_strtod_l+0x93a>
 8005288:	f7ff fb5c 	bl	8004944 <sulp>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	ec51 0b18 	vmov	r0, r1, d8
 8005294:	f7fb f802 	bl	800029c <__adddf3>
 8005298:	4682      	mov	sl, r0
 800529a:	468b      	mov	fp, r1
 800529c:	e7df      	b.n	800525e <_strtod_l+0x8de>
 800529e:	4013      	ands	r3, r2
 80052a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80052a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80052a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80052ac:	f04f 3aff 	mov.w	sl, #4294967295
 80052b0:	e7d5      	b.n	800525e <_strtod_l+0x8de>
 80052b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052b4:	ea13 0f0a 	tst.w	r3, sl
 80052b8:	e7e0      	b.n	800527c <_strtod_l+0x8fc>
 80052ba:	f7ff fb43 	bl	8004944 <sulp>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	ec51 0b18 	vmov	r0, r1, d8
 80052c6:	f7fa ffe7 	bl	8000298 <__aeabi_dsub>
 80052ca:	2200      	movs	r2, #0
 80052cc:	2300      	movs	r3, #0
 80052ce:	4682      	mov	sl, r0
 80052d0:	468b      	mov	fp, r1
 80052d2:	f7fb fc01 	bl	8000ad8 <__aeabi_dcmpeq>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d0c1      	beq.n	800525e <_strtod_l+0x8de>
 80052da:	e611      	b.n	8004f00 <_strtod_l+0x580>
 80052dc:	fffffc02 	.word	0xfffffc02
 80052e0:	7ff00000 	.word	0x7ff00000
 80052e4:	39500000 	.word	0x39500000
 80052e8:	000fffff 	.word	0x000fffff
 80052ec:	7fefffff 	.word	0x7fefffff
 80052f0:	08009630 	.word	0x08009630
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	f002 f832 	bl	8007360 <__ratio>
 80052fc:	ec59 8b10 	vmov	r8, r9, d0
 8005300:	ee10 0a10 	vmov	r0, s0
 8005304:	2200      	movs	r2, #0
 8005306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800530a:	4649      	mov	r1, r9
 800530c:	f7fb fbf8 	bl	8000b00 <__aeabi_dcmple>
 8005310:	2800      	cmp	r0, #0
 8005312:	d07a      	beq.n	800540a <_strtod_l+0xa8a>
 8005314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d04a      	beq.n	80053b0 <_strtod_l+0xa30>
 800531a:	4b95      	ldr	r3, [pc, #596]	; (8005570 <_strtod_l+0xbf0>)
 800531c:	2200      	movs	r2, #0
 800531e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005322:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005570 <_strtod_l+0xbf0>
 8005326:	f04f 0800 	mov.w	r8, #0
 800532a:	4b92      	ldr	r3, [pc, #584]	; (8005574 <_strtod_l+0xbf4>)
 800532c:	403b      	ands	r3, r7
 800532e:	930d      	str	r3, [sp, #52]	; 0x34
 8005330:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005332:	4b91      	ldr	r3, [pc, #580]	; (8005578 <_strtod_l+0xbf8>)
 8005334:	429a      	cmp	r2, r3
 8005336:	f040 80b0 	bne.w	800549a <_strtod_l+0xb1a>
 800533a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800533e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005342:	ec4b ab10 	vmov	d0, sl, fp
 8005346:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800534a:	f001 ff31 	bl	80071b0 <__ulp>
 800534e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005352:	ec53 2b10 	vmov	r2, r3, d0
 8005356:	f7fb f957 	bl	8000608 <__aeabi_dmul>
 800535a:	4652      	mov	r2, sl
 800535c:	465b      	mov	r3, fp
 800535e:	f7fa ff9d 	bl	800029c <__adddf3>
 8005362:	460b      	mov	r3, r1
 8005364:	4983      	ldr	r1, [pc, #524]	; (8005574 <_strtod_l+0xbf4>)
 8005366:	4a85      	ldr	r2, [pc, #532]	; (800557c <_strtod_l+0xbfc>)
 8005368:	4019      	ands	r1, r3
 800536a:	4291      	cmp	r1, r2
 800536c:	4682      	mov	sl, r0
 800536e:	d960      	bls.n	8005432 <_strtod_l+0xab2>
 8005370:	ee18 3a90 	vmov	r3, s17
 8005374:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005378:	4293      	cmp	r3, r2
 800537a:	d104      	bne.n	8005386 <_strtod_l+0xa06>
 800537c:	ee18 3a10 	vmov	r3, s16
 8005380:	3301      	adds	r3, #1
 8005382:	f43f ad45 	beq.w	8004e10 <_strtod_l+0x490>
 8005386:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005588 <_strtod_l+0xc08>
 800538a:	f04f 3aff 	mov.w	sl, #4294967295
 800538e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005390:	4620      	mov	r0, r4
 8005392:	f001 fbdb 	bl	8006b4c <_Bfree>
 8005396:	9905      	ldr	r1, [sp, #20]
 8005398:	4620      	mov	r0, r4
 800539a:	f001 fbd7 	bl	8006b4c <_Bfree>
 800539e:	4631      	mov	r1, r6
 80053a0:	4620      	mov	r0, r4
 80053a2:	f001 fbd3 	bl	8006b4c <_Bfree>
 80053a6:	4629      	mov	r1, r5
 80053a8:	4620      	mov	r0, r4
 80053aa:	f001 fbcf 	bl	8006b4c <_Bfree>
 80053ae:	e61a      	b.n	8004fe6 <_strtod_l+0x666>
 80053b0:	f1ba 0f00 	cmp.w	sl, #0
 80053b4:	d11b      	bne.n	80053ee <_strtod_l+0xa6e>
 80053b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053ba:	b9f3      	cbnz	r3, 80053fa <_strtod_l+0xa7a>
 80053bc:	4b6c      	ldr	r3, [pc, #432]	; (8005570 <_strtod_l+0xbf0>)
 80053be:	2200      	movs	r2, #0
 80053c0:	4640      	mov	r0, r8
 80053c2:	4649      	mov	r1, r9
 80053c4:	f7fb fb92 	bl	8000aec <__aeabi_dcmplt>
 80053c8:	b9d0      	cbnz	r0, 8005400 <_strtod_l+0xa80>
 80053ca:	4640      	mov	r0, r8
 80053cc:	4649      	mov	r1, r9
 80053ce:	4b6c      	ldr	r3, [pc, #432]	; (8005580 <_strtod_l+0xc00>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	f7fb f919 	bl	8000608 <__aeabi_dmul>
 80053d6:	4680      	mov	r8, r0
 80053d8:	4689      	mov	r9, r1
 80053da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80053de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80053e2:	9315      	str	r3, [sp, #84]	; 0x54
 80053e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80053e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80053ec:	e79d      	b.n	800532a <_strtod_l+0x9aa>
 80053ee:	f1ba 0f01 	cmp.w	sl, #1
 80053f2:	d102      	bne.n	80053fa <_strtod_l+0xa7a>
 80053f4:	2f00      	cmp	r7, #0
 80053f6:	f43f ad83 	beq.w	8004f00 <_strtod_l+0x580>
 80053fa:	4b62      	ldr	r3, [pc, #392]	; (8005584 <_strtod_l+0xc04>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	e78e      	b.n	800531e <_strtod_l+0x99e>
 8005400:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005580 <_strtod_l+0xc00>
 8005404:	f04f 0800 	mov.w	r8, #0
 8005408:	e7e7      	b.n	80053da <_strtod_l+0xa5a>
 800540a:	4b5d      	ldr	r3, [pc, #372]	; (8005580 <_strtod_l+0xc00>)
 800540c:	4640      	mov	r0, r8
 800540e:	4649      	mov	r1, r9
 8005410:	2200      	movs	r2, #0
 8005412:	f7fb f8f9 	bl	8000608 <__aeabi_dmul>
 8005416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005418:	4680      	mov	r8, r0
 800541a:	4689      	mov	r9, r1
 800541c:	b933      	cbnz	r3, 800542c <_strtod_l+0xaac>
 800541e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005422:	900e      	str	r0, [sp, #56]	; 0x38
 8005424:	930f      	str	r3, [sp, #60]	; 0x3c
 8005426:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800542a:	e7dd      	b.n	80053e8 <_strtod_l+0xa68>
 800542c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005430:	e7f9      	b.n	8005426 <_strtod_l+0xaa6>
 8005432:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005436:	9b04      	ldr	r3, [sp, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1a8      	bne.n	800538e <_strtod_l+0xa0e>
 800543c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005440:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005442:	0d1b      	lsrs	r3, r3, #20
 8005444:	051b      	lsls	r3, r3, #20
 8005446:	429a      	cmp	r2, r3
 8005448:	d1a1      	bne.n	800538e <_strtod_l+0xa0e>
 800544a:	4640      	mov	r0, r8
 800544c:	4649      	mov	r1, r9
 800544e:	f7fb fc3b 	bl	8000cc8 <__aeabi_d2lz>
 8005452:	f7fb f8ab 	bl	80005ac <__aeabi_l2d>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4640      	mov	r0, r8
 800545c:	4649      	mov	r1, r9
 800545e:	f7fa ff1b 	bl	8000298 <__aeabi_dsub>
 8005462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005468:	ea43 030a 	orr.w	r3, r3, sl
 800546c:	4313      	orrs	r3, r2
 800546e:	4680      	mov	r8, r0
 8005470:	4689      	mov	r9, r1
 8005472:	d055      	beq.n	8005520 <_strtod_l+0xba0>
 8005474:	a336      	add	r3, pc, #216	; (adr r3, 8005550 <_strtod_l+0xbd0>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f7fb fb37 	bl	8000aec <__aeabi_dcmplt>
 800547e:	2800      	cmp	r0, #0
 8005480:	f47f acd0 	bne.w	8004e24 <_strtod_l+0x4a4>
 8005484:	a334      	add	r3, pc, #208	; (adr r3, 8005558 <_strtod_l+0xbd8>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	4640      	mov	r0, r8
 800548c:	4649      	mov	r1, r9
 800548e:	f7fb fb4b 	bl	8000b28 <__aeabi_dcmpgt>
 8005492:	2800      	cmp	r0, #0
 8005494:	f43f af7b 	beq.w	800538e <_strtod_l+0xa0e>
 8005498:	e4c4      	b.n	8004e24 <_strtod_l+0x4a4>
 800549a:	9b04      	ldr	r3, [sp, #16]
 800549c:	b333      	cbz	r3, 80054ec <_strtod_l+0xb6c>
 800549e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80054a4:	d822      	bhi.n	80054ec <_strtod_l+0xb6c>
 80054a6:	a32e      	add	r3, pc, #184	; (adr r3, 8005560 <_strtod_l+0xbe0>)
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	4640      	mov	r0, r8
 80054ae:	4649      	mov	r1, r9
 80054b0:	f7fb fb26 	bl	8000b00 <__aeabi_dcmple>
 80054b4:	b1a0      	cbz	r0, 80054e0 <_strtod_l+0xb60>
 80054b6:	4649      	mov	r1, r9
 80054b8:	4640      	mov	r0, r8
 80054ba:	f7fb fb7d 	bl	8000bb8 <__aeabi_d2uiz>
 80054be:	2801      	cmp	r0, #1
 80054c0:	bf38      	it	cc
 80054c2:	2001      	movcc	r0, #1
 80054c4:	f7fb f826 	bl	8000514 <__aeabi_ui2d>
 80054c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ca:	4680      	mov	r8, r0
 80054cc:	4689      	mov	r9, r1
 80054ce:	bb23      	cbnz	r3, 800551a <_strtod_l+0xb9a>
 80054d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054d4:	9010      	str	r0, [sp, #64]	; 0x40
 80054d6:	9311      	str	r3, [sp, #68]	; 0x44
 80054d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80054e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80054e8:	1a9b      	subs	r3, r3, r2
 80054ea:	9309      	str	r3, [sp, #36]	; 0x24
 80054ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80054f0:	eeb0 0a48 	vmov.f32	s0, s16
 80054f4:	eef0 0a68 	vmov.f32	s1, s17
 80054f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054fc:	f001 fe58 	bl	80071b0 <__ulp>
 8005500:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005504:	ec53 2b10 	vmov	r2, r3, d0
 8005508:	f7fb f87e 	bl	8000608 <__aeabi_dmul>
 800550c:	ec53 2b18 	vmov	r2, r3, d8
 8005510:	f7fa fec4 	bl	800029c <__adddf3>
 8005514:	4682      	mov	sl, r0
 8005516:	468b      	mov	fp, r1
 8005518:	e78d      	b.n	8005436 <_strtod_l+0xab6>
 800551a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800551e:	e7db      	b.n	80054d8 <_strtod_l+0xb58>
 8005520:	a311      	add	r3, pc, #68	; (adr r3, 8005568 <_strtod_l+0xbe8>)
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f7fb fae1 	bl	8000aec <__aeabi_dcmplt>
 800552a:	e7b2      	b.n	8005492 <_strtod_l+0xb12>
 800552c:	2300      	movs	r3, #0
 800552e:	930a      	str	r3, [sp, #40]	; 0x28
 8005530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005532:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	f7ff ba6b 	b.w	8004a10 <_strtod_l+0x90>
 800553a:	2a65      	cmp	r2, #101	; 0x65
 800553c:	f43f ab5f 	beq.w	8004bfe <_strtod_l+0x27e>
 8005540:	2a45      	cmp	r2, #69	; 0x45
 8005542:	f43f ab5c 	beq.w	8004bfe <_strtod_l+0x27e>
 8005546:	2301      	movs	r3, #1
 8005548:	f7ff bb94 	b.w	8004c74 <_strtod_l+0x2f4>
 800554c:	f3af 8000 	nop.w
 8005550:	94a03595 	.word	0x94a03595
 8005554:	3fdfffff 	.word	0x3fdfffff
 8005558:	35afe535 	.word	0x35afe535
 800555c:	3fe00000 	.word	0x3fe00000
 8005560:	ffc00000 	.word	0xffc00000
 8005564:	41dfffff 	.word	0x41dfffff
 8005568:	94a03595 	.word	0x94a03595
 800556c:	3fcfffff 	.word	0x3fcfffff
 8005570:	3ff00000 	.word	0x3ff00000
 8005574:	7ff00000 	.word	0x7ff00000
 8005578:	7fe00000 	.word	0x7fe00000
 800557c:	7c9fffff 	.word	0x7c9fffff
 8005580:	3fe00000 	.word	0x3fe00000
 8005584:	bff00000 	.word	0xbff00000
 8005588:	7fefffff 	.word	0x7fefffff

0800558c <_strtod_r>:
 800558c:	4b01      	ldr	r3, [pc, #4]	; (8005594 <_strtod_r+0x8>)
 800558e:	f7ff b9f7 	b.w	8004980 <_strtod_l>
 8005592:	bf00      	nop
 8005594:	20000074 	.word	0x20000074

08005598 <_strtol_l.constprop.0>:
 8005598:	2b01      	cmp	r3, #1
 800559a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800559e:	d001      	beq.n	80055a4 <_strtol_l.constprop.0+0xc>
 80055a0:	2b24      	cmp	r3, #36	; 0x24
 80055a2:	d906      	bls.n	80055b2 <_strtol_l.constprop.0+0x1a>
 80055a4:	f7fe fafc 	bl	8003ba0 <__errno>
 80055a8:	2316      	movs	r3, #22
 80055aa:	6003      	str	r3, [r0, #0]
 80055ac:	2000      	movs	r0, #0
 80055ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005698 <_strtol_l.constprop.0+0x100>
 80055b6:	460d      	mov	r5, r1
 80055b8:	462e      	mov	r6, r5
 80055ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80055c2:	f017 0708 	ands.w	r7, r7, #8
 80055c6:	d1f7      	bne.n	80055b8 <_strtol_l.constprop.0+0x20>
 80055c8:	2c2d      	cmp	r4, #45	; 0x2d
 80055ca:	d132      	bne.n	8005632 <_strtol_l.constprop.0+0x9a>
 80055cc:	782c      	ldrb	r4, [r5, #0]
 80055ce:	2701      	movs	r7, #1
 80055d0:	1cb5      	adds	r5, r6, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d05b      	beq.n	800568e <_strtol_l.constprop.0+0xf6>
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d109      	bne.n	80055ee <_strtol_l.constprop.0+0x56>
 80055da:	2c30      	cmp	r4, #48	; 0x30
 80055dc:	d107      	bne.n	80055ee <_strtol_l.constprop.0+0x56>
 80055de:	782c      	ldrb	r4, [r5, #0]
 80055e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80055e4:	2c58      	cmp	r4, #88	; 0x58
 80055e6:	d14d      	bne.n	8005684 <_strtol_l.constprop.0+0xec>
 80055e8:	786c      	ldrb	r4, [r5, #1]
 80055ea:	2310      	movs	r3, #16
 80055ec:	3502      	adds	r5, #2
 80055ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80055f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80055f6:	f04f 0c00 	mov.w	ip, #0
 80055fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80055fe:	4666      	mov	r6, ip
 8005600:	fb03 8a19 	mls	sl, r3, r9, r8
 8005604:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005608:	f1be 0f09 	cmp.w	lr, #9
 800560c:	d816      	bhi.n	800563c <_strtol_l.constprop.0+0xa4>
 800560e:	4674      	mov	r4, lr
 8005610:	42a3      	cmp	r3, r4
 8005612:	dd24      	ble.n	800565e <_strtol_l.constprop.0+0xc6>
 8005614:	f1bc 0f00 	cmp.w	ip, #0
 8005618:	db1e      	blt.n	8005658 <_strtol_l.constprop.0+0xc0>
 800561a:	45b1      	cmp	r9, r6
 800561c:	d31c      	bcc.n	8005658 <_strtol_l.constprop.0+0xc0>
 800561e:	d101      	bne.n	8005624 <_strtol_l.constprop.0+0x8c>
 8005620:	45a2      	cmp	sl, r4
 8005622:	db19      	blt.n	8005658 <_strtol_l.constprop.0+0xc0>
 8005624:	fb06 4603 	mla	r6, r6, r3, r4
 8005628:	f04f 0c01 	mov.w	ip, #1
 800562c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005630:	e7e8      	b.n	8005604 <_strtol_l.constprop.0+0x6c>
 8005632:	2c2b      	cmp	r4, #43	; 0x2b
 8005634:	bf04      	itt	eq
 8005636:	782c      	ldrbeq	r4, [r5, #0]
 8005638:	1cb5      	addeq	r5, r6, #2
 800563a:	e7ca      	b.n	80055d2 <_strtol_l.constprop.0+0x3a>
 800563c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005640:	f1be 0f19 	cmp.w	lr, #25
 8005644:	d801      	bhi.n	800564a <_strtol_l.constprop.0+0xb2>
 8005646:	3c37      	subs	r4, #55	; 0x37
 8005648:	e7e2      	b.n	8005610 <_strtol_l.constprop.0+0x78>
 800564a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800564e:	f1be 0f19 	cmp.w	lr, #25
 8005652:	d804      	bhi.n	800565e <_strtol_l.constprop.0+0xc6>
 8005654:	3c57      	subs	r4, #87	; 0x57
 8005656:	e7db      	b.n	8005610 <_strtol_l.constprop.0+0x78>
 8005658:	f04f 3cff 	mov.w	ip, #4294967295
 800565c:	e7e6      	b.n	800562c <_strtol_l.constprop.0+0x94>
 800565e:	f1bc 0f00 	cmp.w	ip, #0
 8005662:	da05      	bge.n	8005670 <_strtol_l.constprop.0+0xd8>
 8005664:	2322      	movs	r3, #34	; 0x22
 8005666:	6003      	str	r3, [r0, #0]
 8005668:	4646      	mov	r6, r8
 800566a:	b942      	cbnz	r2, 800567e <_strtol_l.constprop.0+0xe6>
 800566c:	4630      	mov	r0, r6
 800566e:	e79e      	b.n	80055ae <_strtol_l.constprop.0+0x16>
 8005670:	b107      	cbz	r7, 8005674 <_strtol_l.constprop.0+0xdc>
 8005672:	4276      	negs	r6, r6
 8005674:	2a00      	cmp	r2, #0
 8005676:	d0f9      	beq.n	800566c <_strtol_l.constprop.0+0xd4>
 8005678:	f1bc 0f00 	cmp.w	ip, #0
 800567c:	d000      	beq.n	8005680 <_strtol_l.constprop.0+0xe8>
 800567e:	1e69      	subs	r1, r5, #1
 8005680:	6011      	str	r1, [r2, #0]
 8005682:	e7f3      	b.n	800566c <_strtol_l.constprop.0+0xd4>
 8005684:	2430      	movs	r4, #48	; 0x30
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1b1      	bne.n	80055ee <_strtol_l.constprop.0+0x56>
 800568a:	2308      	movs	r3, #8
 800568c:	e7af      	b.n	80055ee <_strtol_l.constprop.0+0x56>
 800568e:	2c30      	cmp	r4, #48	; 0x30
 8005690:	d0a5      	beq.n	80055de <_strtol_l.constprop.0+0x46>
 8005692:	230a      	movs	r3, #10
 8005694:	e7ab      	b.n	80055ee <_strtol_l.constprop.0+0x56>
 8005696:	bf00      	nop
 8005698:	08009659 	.word	0x08009659

0800569c <_strtol_r>:
 800569c:	f7ff bf7c 	b.w	8005598 <_strtol_l.constprop.0>

080056a0 <quorem>:
 80056a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a4:	6903      	ldr	r3, [r0, #16]
 80056a6:	690c      	ldr	r4, [r1, #16]
 80056a8:	42a3      	cmp	r3, r4
 80056aa:	4607      	mov	r7, r0
 80056ac:	f2c0 8081 	blt.w	80057b2 <quorem+0x112>
 80056b0:	3c01      	subs	r4, #1
 80056b2:	f101 0814 	add.w	r8, r1, #20
 80056b6:	f100 0514 	add.w	r5, r0, #20
 80056ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056c8:	3301      	adds	r3, #1
 80056ca:	429a      	cmp	r2, r3
 80056cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80056d8:	d331      	bcc.n	800573e <quorem+0x9e>
 80056da:	f04f 0e00 	mov.w	lr, #0
 80056de:	4640      	mov	r0, r8
 80056e0:	46ac      	mov	ip, r5
 80056e2:	46f2      	mov	sl, lr
 80056e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80056e8:	b293      	uxth	r3, r2
 80056ea:	fb06 e303 	mla	r3, r6, r3, lr
 80056ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	ebaa 0303 	sub.w	r3, sl, r3
 80056f8:	f8dc a000 	ldr.w	sl, [ip]
 80056fc:	0c12      	lsrs	r2, r2, #16
 80056fe:	fa13 f38a 	uxtah	r3, r3, sl
 8005702:	fb06 e202 	mla	r2, r6, r2, lr
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	9b00      	ldr	r3, [sp, #0]
 800570a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800570e:	b292      	uxth	r2, r2
 8005710:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005718:	f8bd 3000 	ldrh.w	r3, [sp]
 800571c:	4581      	cmp	r9, r0
 800571e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005722:	f84c 3b04 	str.w	r3, [ip], #4
 8005726:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800572a:	d2db      	bcs.n	80056e4 <quorem+0x44>
 800572c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005730:	b92b      	cbnz	r3, 800573e <quorem+0x9e>
 8005732:	9b01      	ldr	r3, [sp, #4]
 8005734:	3b04      	subs	r3, #4
 8005736:	429d      	cmp	r5, r3
 8005738:	461a      	mov	r2, r3
 800573a:	d32e      	bcc.n	800579a <quorem+0xfa>
 800573c:	613c      	str	r4, [r7, #16]
 800573e:	4638      	mov	r0, r7
 8005740:	f001 fc90 	bl	8007064 <__mcmp>
 8005744:	2800      	cmp	r0, #0
 8005746:	db24      	blt.n	8005792 <quorem+0xf2>
 8005748:	3601      	adds	r6, #1
 800574a:	4628      	mov	r0, r5
 800574c:	f04f 0c00 	mov.w	ip, #0
 8005750:	f858 2b04 	ldr.w	r2, [r8], #4
 8005754:	f8d0 e000 	ldr.w	lr, [r0]
 8005758:	b293      	uxth	r3, r2
 800575a:	ebac 0303 	sub.w	r3, ip, r3
 800575e:	0c12      	lsrs	r2, r2, #16
 8005760:	fa13 f38e 	uxtah	r3, r3, lr
 8005764:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800576c:	b29b      	uxth	r3, r3
 800576e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005772:	45c1      	cmp	r9, r8
 8005774:	f840 3b04 	str.w	r3, [r0], #4
 8005778:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800577c:	d2e8      	bcs.n	8005750 <quorem+0xb0>
 800577e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005786:	b922      	cbnz	r2, 8005792 <quorem+0xf2>
 8005788:	3b04      	subs	r3, #4
 800578a:	429d      	cmp	r5, r3
 800578c:	461a      	mov	r2, r3
 800578e:	d30a      	bcc.n	80057a6 <quorem+0x106>
 8005790:	613c      	str	r4, [r7, #16]
 8005792:	4630      	mov	r0, r6
 8005794:	b003      	add	sp, #12
 8005796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	3b04      	subs	r3, #4
 800579e:	2a00      	cmp	r2, #0
 80057a0:	d1cc      	bne.n	800573c <quorem+0x9c>
 80057a2:	3c01      	subs	r4, #1
 80057a4:	e7c7      	b.n	8005736 <quorem+0x96>
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	3b04      	subs	r3, #4
 80057aa:	2a00      	cmp	r2, #0
 80057ac:	d1f0      	bne.n	8005790 <quorem+0xf0>
 80057ae:	3c01      	subs	r4, #1
 80057b0:	e7eb      	b.n	800578a <quorem+0xea>
 80057b2:	2000      	movs	r0, #0
 80057b4:	e7ee      	b.n	8005794 <quorem+0xf4>
	...

080057b8 <_dtoa_r>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	ed2d 8b04 	vpush	{d8-d9}
 80057c0:	ec57 6b10 	vmov	r6, r7, d0
 80057c4:	b093      	sub	sp, #76	; 0x4c
 80057c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80057c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80057cc:	9106      	str	r1, [sp, #24]
 80057ce:	ee10 aa10 	vmov	sl, s0
 80057d2:	4604      	mov	r4, r0
 80057d4:	9209      	str	r2, [sp, #36]	; 0x24
 80057d6:	930c      	str	r3, [sp, #48]	; 0x30
 80057d8:	46bb      	mov	fp, r7
 80057da:	b975      	cbnz	r5, 80057fa <_dtoa_r+0x42>
 80057dc:	2010      	movs	r0, #16
 80057de:	f001 f94d 	bl	8006a7c <malloc>
 80057e2:	4602      	mov	r2, r0
 80057e4:	6260      	str	r0, [r4, #36]	; 0x24
 80057e6:	b920      	cbnz	r0, 80057f2 <_dtoa_r+0x3a>
 80057e8:	4ba7      	ldr	r3, [pc, #668]	; (8005a88 <_dtoa_r+0x2d0>)
 80057ea:	21ea      	movs	r1, #234	; 0xea
 80057ec:	48a7      	ldr	r0, [pc, #668]	; (8005a8c <_dtoa_r+0x2d4>)
 80057ee:	f002 f8bd 	bl	800796c <__assert_func>
 80057f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057f6:	6005      	str	r5, [r0, #0]
 80057f8:	60c5      	str	r5, [r0, #12]
 80057fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057fc:	6819      	ldr	r1, [r3, #0]
 80057fe:	b151      	cbz	r1, 8005816 <_dtoa_r+0x5e>
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	604a      	str	r2, [r1, #4]
 8005804:	2301      	movs	r3, #1
 8005806:	4093      	lsls	r3, r2
 8005808:	608b      	str	r3, [r1, #8]
 800580a:	4620      	mov	r0, r4
 800580c:	f001 f99e 	bl	8006b4c <_Bfree>
 8005810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	1e3b      	subs	r3, r7, #0
 8005818:	bfaa      	itet	ge
 800581a:	2300      	movge	r3, #0
 800581c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005820:	f8c8 3000 	strge.w	r3, [r8]
 8005824:	4b9a      	ldr	r3, [pc, #616]	; (8005a90 <_dtoa_r+0x2d8>)
 8005826:	bfbc      	itt	lt
 8005828:	2201      	movlt	r2, #1
 800582a:	f8c8 2000 	strlt.w	r2, [r8]
 800582e:	ea33 030b 	bics.w	r3, r3, fp
 8005832:	d11b      	bne.n	800586c <_dtoa_r+0xb4>
 8005834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005836:	f242 730f 	movw	r3, #9999	; 0x270f
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005840:	4333      	orrs	r3, r6
 8005842:	f000 8592 	beq.w	800636a <_dtoa_r+0xbb2>
 8005846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005848:	b963      	cbnz	r3, 8005864 <_dtoa_r+0xac>
 800584a:	4b92      	ldr	r3, [pc, #584]	; (8005a94 <_dtoa_r+0x2dc>)
 800584c:	e022      	b.n	8005894 <_dtoa_r+0xdc>
 800584e:	4b92      	ldr	r3, [pc, #584]	; (8005a98 <_dtoa_r+0x2e0>)
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	3308      	adds	r3, #8
 8005854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	9801      	ldr	r0, [sp, #4]
 800585a:	b013      	add	sp, #76	; 0x4c
 800585c:	ecbd 8b04 	vpop	{d8-d9}
 8005860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005864:	4b8b      	ldr	r3, [pc, #556]	; (8005a94 <_dtoa_r+0x2dc>)
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	3303      	adds	r3, #3
 800586a:	e7f3      	b.n	8005854 <_dtoa_r+0x9c>
 800586c:	2200      	movs	r2, #0
 800586e:	2300      	movs	r3, #0
 8005870:	4650      	mov	r0, sl
 8005872:	4659      	mov	r1, fp
 8005874:	f7fb f930 	bl	8000ad8 <__aeabi_dcmpeq>
 8005878:	ec4b ab19 	vmov	d9, sl, fp
 800587c:	4680      	mov	r8, r0
 800587e:	b158      	cbz	r0, 8005898 <_dtoa_r+0xe0>
 8005880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005882:	2301      	movs	r3, #1
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 856b 	beq.w	8006364 <_dtoa_r+0xbac>
 800588e:	4883      	ldr	r0, [pc, #524]	; (8005a9c <_dtoa_r+0x2e4>)
 8005890:	6018      	str	r0, [r3, #0]
 8005892:	1e43      	subs	r3, r0, #1
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	e7df      	b.n	8005858 <_dtoa_r+0xa0>
 8005898:	ec4b ab10 	vmov	d0, sl, fp
 800589c:	aa10      	add	r2, sp, #64	; 0x40
 800589e:	a911      	add	r1, sp, #68	; 0x44
 80058a0:	4620      	mov	r0, r4
 80058a2:	f001 fd01 	bl	80072a8 <__d2b>
 80058a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80058aa:	ee08 0a10 	vmov	s16, r0
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	f000 8084 	beq.w	80059bc <_dtoa_r+0x204>
 80058b4:	ee19 3a90 	vmov	r3, s19
 80058b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80058c0:	4656      	mov	r6, sl
 80058c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80058c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80058ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80058ce:	4b74      	ldr	r3, [pc, #464]	; (8005aa0 <_dtoa_r+0x2e8>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	4630      	mov	r0, r6
 80058d4:	4639      	mov	r1, r7
 80058d6:	f7fa fcdf 	bl	8000298 <__aeabi_dsub>
 80058da:	a365      	add	r3, pc, #404	; (adr r3, 8005a70 <_dtoa_r+0x2b8>)
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f7fa fe92 	bl	8000608 <__aeabi_dmul>
 80058e4:	a364      	add	r3, pc, #400	; (adr r3, 8005a78 <_dtoa_r+0x2c0>)
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f7fa fcd7 	bl	800029c <__adddf3>
 80058ee:	4606      	mov	r6, r0
 80058f0:	4628      	mov	r0, r5
 80058f2:	460f      	mov	r7, r1
 80058f4:	f7fa fe1e 	bl	8000534 <__aeabi_i2d>
 80058f8:	a361      	add	r3, pc, #388	; (adr r3, 8005a80 <_dtoa_r+0x2c8>)
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f7fa fe83 	bl	8000608 <__aeabi_dmul>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4630      	mov	r0, r6
 8005908:	4639      	mov	r1, r7
 800590a:	f7fa fcc7 	bl	800029c <__adddf3>
 800590e:	4606      	mov	r6, r0
 8005910:	460f      	mov	r7, r1
 8005912:	f7fb f929 	bl	8000b68 <__aeabi_d2iz>
 8005916:	2200      	movs	r2, #0
 8005918:	9000      	str	r0, [sp, #0]
 800591a:	2300      	movs	r3, #0
 800591c:	4630      	mov	r0, r6
 800591e:	4639      	mov	r1, r7
 8005920:	f7fb f8e4 	bl	8000aec <__aeabi_dcmplt>
 8005924:	b150      	cbz	r0, 800593c <_dtoa_r+0x184>
 8005926:	9800      	ldr	r0, [sp, #0]
 8005928:	f7fa fe04 	bl	8000534 <__aeabi_i2d>
 800592c:	4632      	mov	r2, r6
 800592e:	463b      	mov	r3, r7
 8005930:	f7fb f8d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005934:	b910      	cbnz	r0, 800593c <_dtoa_r+0x184>
 8005936:	9b00      	ldr	r3, [sp, #0]
 8005938:	3b01      	subs	r3, #1
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	9b00      	ldr	r3, [sp, #0]
 800593e:	2b16      	cmp	r3, #22
 8005940:	d85a      	bhi.n	80059f8 <_dtoa_r+0x240>
 8005942:	9a00      	ldr	r2, [sp, #0]
 8005944:	4b57      	ldr	r3, [pc, #348]	; (8005aa4 <_dtoa_r+0x2ec>)
 8005946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	ec51 0b19 	vmov	r0, r1, d9
 8005952:	f7fb f8cb 	bl	8000aec <__aeabi_dcmplt>
 8005956:	2800      	cmp	r0, #0
 8005958:	d050      	beq.n	80059fc <_dtoa_r+0x244>
 800595a:	9b00      	ldr	r3, [sp, #0]
 800595c:	3b01      	subs	r3, #1
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2300      	movs	r3, #0
 8005962:	930b      	str	r3, [sp, #44]	; 0x2c
 8005964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005966:	1b5d      	subs	r5, r3, r5
 8005968:	1e6b      	subs	r3, r5, #1
 800596a:	9305      	str	r3, [sp, #20]
 800596c:	bf45      	ittet	mi
 800596e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005972:	9304      	strmi	r3, [sp, #16]
 8005974:	2300      	movpl	r3, #0
 8005976:	2300      	movmi	r3, #0
 8005978:	bf4c      	ite	mi
 800597a:	9305      	strmi	r3, [sp, #20]
 800597c:	9304      	strpl	r3, [sp, #16]
 800597e:	9b00      	ldr	r3, [sp, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	db3d      	blt.n	8005a00 <_dtoa_r+0x248>
 8005984:	9b05      	ldr	r3, [sp, #20]
 8005986:	9a00      	ldr	r2, [sp, #0]
 8005988:	920a      	str	r2, [sp, #40]	; 0x28
 800598a:	4413      	add	r3, r2
 800598c:	9305      	str	r3, [sp, #20]
 800598e:	2300      	movs	r3, #0
 8005990:	9307      	str	r3, [sp, #28]
 8005992:	9b06      	ldr	r3, [sp, #24]
 8005994:	2b09      	cmp	r3, #9
 8005996:	f200 8089 	bhi.w	8005aac <_dtoa_r+0x2f4>
 800599a:	2b05      	cmp	r3, #5
 800599c:	bfc4      	itt	gt
 800599e:	3b04      	subgt	r3, #4
 80059a0:	9306      	strgt	r3, [sp, #24]
 80059a2:	9b06      	ldr	r3, [sp, #24]
 80059a4:	f1a3 0302 	sub.w	r3, r3, #2
 80059a8:	bfcc      	ite	gt
 80059aa:	2500      	movgt	r5, #0
 80059ac:	2501      	movle	r5, #1
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	f200 8087 	bhi.w	8005ac2 <_dtoa_r+0x30a>
 80059b4:	e8df f003 	tbb	[pc, r3]
 80059b8:	59383a2d 	.word	0x59383a2d
 80059bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80059c0:	441d      	add	r5, r3
 80059c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	bfc1      	itttt	gt
 80059ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80059d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80059d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80059da:	bfda      	itte	le
 80059dc:	f1c3 0320 	rsble	r3, r3, #32
 80059e0:	fa06 f003 	lslle.w	r0, r6, r3
 80059e4:	4318      	orrgt	r0, r3
 80059e6:	f7fa fd95 	bl	8000514 <__aeabi_ui2d>
 80059ea:	2301      	movs	r3, #1
 80059ec:	4606      	mov	r6, r0
 80059ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80059f2:	3d01      	subs	r5, #1
 80059f4:	930e      	str	r3, [sp, #56]	; 0x38
 80059f6:	e76a      	b.n	80058ce <_dtoa_r+0x116>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e7b2      	b.n	8005962 <_dtoa_r+0x1aa>
 80059fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80059fe:	e7b1      	b.n	8005964 <_dtoa_r+0x1ac>
 8005a00:	9b04      	ldr	r3, [sp, #16]
 8005a02:	9a00      	ldr	r2, [sp, #0]
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	9304      	str	r3, [sp, #16]
 8005a08:	4253      	negs	r3, r2
 8005a0a:	9307      	str	r3, [sp, #28]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a10:	e7bf      	b.n	8005992 <_dtoa_r+0x1da>
 8005a12:	2300      	movs	r3, #0
 8005a14:	9308      	str	r3, [sp, #32]
 8005a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	dc55      	bgt.n	8005ac8 <_dtoa_r+0x310>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a22:	461a      	mov	r2, r3
 8005a24:	9209      	str	r2, [sp, #36]	; 0x24
 8005a26:	e00c      	b.n	8005a42 <_dtoa_r+0x28a>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e7f3      	b.n	8005a14 <_dtoa_r+0x25c>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a30:	9308      	str	r3, [sp, #32]
 8005a32:	9b00      	ldr	r3, [sp, #0]
 8005a34:	4413      	add	r3, r2
 8005a36:	9302      	str	r3, [sp, #8]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	9303      	str	r3, [sp, #12]
 8005a3e:	bfb8      	it	lt
 8005a40:	2301      	movlt	r3, #1
 8005a42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005a44:	2200      	movs	r2, #0
 8005a46:	6042      	str	r2, [r0, #4]
 8005a48:	2204      	movs	r2, #4
 8005a4a:	f102 0614 	add.w	r6, r2, #20
 8005a4e:	429e      	cmp	r6, r3
 8005a50:	6841      	ldr	r1, [r0, #4]
 8005a52:	d93d      	bls.n	8005ad0 <_dtoa_r+0x318>
 8005a54:	4620      	mov	r0, r4
 8005a56:	f001 f839 	bl	8006acc <_Balloc>
 8005a5a:	9001      	str	r0, [sp, #4]
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d13b      	bne.n	8005ad8 <_dtoa_r+0x320>
 8005a60:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <_dtoa_r+0x2f0>)
 8005a62:	4602      	mov	r2, r0
 8005a64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005a68:	e6c0      	b.n	80057ec <_dtoa_r+0x34>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e7df      	b.n	8005a2e <_dtoa_r+0x276>
 8005a6e:	bf00      	nop
 8005a70:	636f4361 	.word	0x636f4361
 8005a74:	3fd287a7 	.word	0x3fd287a7
 8005a78:	8b60c8b3 	.word	0x8b60c8b3
 8005a7c:	3fc68a28 	.word	0x3fc68a28
 8005a80:	509f79fb 	.word	0x509f79fb
 8005a84:	3fd34413 	.word	0x3fd34413
 8005a88:	08009766 	.word	0x08009766
 8005a8c:	0800977d 	.word	0x0800977d
 8005a90:	7ff00000 	.word	0x7ff00000
 8005a94:	08009762 	.word	0x08009762
 8005a98:	08009759 	.word	0x08009759
 8005a9c:	080095dd 	.word	0x080095dd
 8005aa0:	3ff80000 	.word	0x3ff80000
 8005aa4:	080098e8 	.word	0x080098e8
 8005aa8:	080097d8 	.word	0x080097d8
 8005aac:	2501      	movs	r5, #1
 8005aae:	2300      	movs	r3, #0
 8005ab0:	9306      	str	r3, [sp, #24]
 8005ab2:	9508      	str	r5, [sp, #32]
 8005ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2312      	movs	r3, #18
 8005ac0:	e7b0      	b.n	8005a24 <_dtoa_r+0x26c>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	9308      	str	r3, [sp, #32]
 8005ac6:	e7f5      	b.n	8005ab4 <_dtoa_r+0x2fc>
 8005ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ace:	e7b8      	b.n	8005a42 <_dtoa_r+0x28a>
 8005ad0:	3101      	adds	r1, #1
 8005ad2:	6041      	str	r1, [r0, #4]
 8005ad4:	0052      	lsls	r2, r2, #1
 8005ad6:	e7b8      	b.n	8005a4a <_dtoa_r+0x292>
 8005ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ada:	9a01      	ldr	r2, [sp, #4]
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	9b03      	ldr	r3, [sp, #12]
 8005ae0:	2b0e      	cmp	r3, #14
 8005ae2:	f200 809d 	bhi.w	8005c20 <_dtoa_r+0x468>
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	f000 809a 	beq.w	8005c20 <_dtoa_r+0x468>
 8005aec:	9b00      	ldr	r3, [sp, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	dd32      	ble.n	8005b58 <_dtoa_r+0x3a0>
 8005af2:	4ab7      	ldr	r2, [pc, #732]	; (8005dd0 <_dtoa_r+0x618>)
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005afc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b00:	9b00      	ldr	r3, [sp, #0]
 8005b02:	05d8      	lsls	r0, r3, #23
 8005b04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005b08:	d516      	bpl.n	8005b38 <_dtoa_r+0x380>
 8005b0a:	4bb2      	ldr	r3, [pc, #712]	; (8005dd4 <_dtoa_r+0x61c>)
 8005b0c:	ec51 0b19 	vmov	r0, r1, d9
 8005b10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b14:	f7fa fea2 	bl	800085c <__aeabi_ddiv>
 8005b18:	f007 070f 	and.w	r7, r7, #15
 8005b1c:	4682      	mov	sl, r0
 8005b1e:	468b      	mov	fp, r1
 8005b20:	2503      	movs	r5, #3
 8005b22:	4eac      	ldr	r6, [pc, #688]	; (8005dd4 <_dtoa_r+0x61c>)
 8005b24:	b957      	cbnz	r7, 8005b3c <_dtoa_r+0x384>
 8005b26:	4642      	mov	r2, r8
 8005b28:	464b      	mov	r3, r9
 8005b2a:	4650      	mov	r0, sl
 8005b2c:	4659      	mov	r1, fp
 8005b2e:	f7fa fe95 	bl	800085c <__aeabi_ddiv>
 8005b32:	4682      	mov	sl, r0
 8005b34:	468b      	mov	fp, r1
 8005b36:	e028      	b.n	8005b8a <_dtoa_r+0x3d2>
 8005b38:	2502      	movs	r5, #2
 8005b3a:	e7f2      	b.n	8005b22 <_dtoa_r+0x36a>
 8005b3c:	07f9      	lsls	r1, r7, #31
 8005b3e:	d508      	bpl.n	8005b52 <_dtoa_r+0x39a>
 8005b40:	4640      	mov	r0, r8
 8005b42:	4649      	mov	r1, r9
 8005b44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b48:	f7fa fd5e 	bl	8000608 <__aeabi_dmul>
 8005b4c:	3501      	adds	r5, #1
 8005b4e:	4680      	mov	r8, r0
 8005b50:	4689      	mov	r9, r1
 8005b52:	107f      	asrs	r7, r7, #1
 8005b54:	3608      	adds	r6, #8
 8005b56:	e7e5      	b.n	8005b24 <_dtoa_r+0x36c>
 8005b58:	f000 809b 	beq.w	8005c92 <_dtoa_r+0x4da>
 8005b5c:	9b00      	ldr	r3, [sp, #0]
 8005b5e:	4f9d      	ldr	r7, [pc, #628]	; (8005dd4 <_dtoa_r+0x61c>)
 8005b60:	425e      	negs	r6, r3
 8005b62:	4b9b      	ldr	r3, [pc, #620]	; (8005dd0 <_dtoa_r+0x618>)
 8005b64:	f006 020f 	and.w	r2, r6, #15
 8005b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	ec51 0b19 	vmov	r0, r1, d9
 8005b74:	f7fa fd48 	bl	8000608 <__aeabi_dmul>
 8005b78:	1136      	asrs	r6, r6, #4
 8005b7a:	4682      	mov	sl, r0
 8005b7c:	468b      	mov	fp, r1
 8005b7e:	2300      	movs	r3, #0
 8005b80:	2502      	movs	r5, #2
 8005b82:	2e00      	cmp	r6, #0
 8005b84:	d17a      	bne.n	8005c7c <_dtoa_r+0x4c4>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1d3      	bne.n	8005b32 <_dtoa_r+0x37a>
 8005b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8082 	beq.w	8005c96 <_dtoa_r+0x4de>
 8005b92:	4b91      	ldr	r3, [pc, #580]	; (8005dd8 <_dtoa_r+0x620>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	4650      	mov	r0, sl
 8005b98:	4659      	mov	r1, fp
 8005b9a:	f7fa ffa7 	bl	8000aec <__aeabi_dcmplt>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d079      	beq.n	8005c96 <_dtoa_r+0x4de>
 8005ba2:	9b03      	ldr	r3, [sp, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d076      	beq.n	8005c96 <_dtoa_r+0x4de>
 8005ba8:	9b02      	ldr	r3, [sp, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	dd36      	ble.n	8005c1c <_dtoa_r+0x464>
 8005bae:	9b00      	ldr	r3, [sp, #0]
 8005bb0:	4650      	mov	r0, sl
 8005bb2:	4659      	mov	r1, fp
 8005bb4:	1e5f      	subs	r7, r3, #1
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	4b88      	ldr	r3, [pc, #544]	; (8005ddc <_dtoa_r+0x624>)
 8005bba:	f7fa fd25 	bl	8000608 <__aeabi_dmul>
 8005bbe:	9e02      	ldr	r6, [sp, #8]
 8005bc0:	4682      	mov	sl, r0
 8005bc2:	468b      	mov	fp, r1
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f7fa fcb4 	bl	8000534 <__aeabi_i2d>
 8005bcc:	4652      	mov	r2, sl
 8005bce:	465b      	mov	r3, fp
 8005bd0:	f7fa fd1a 	bl	8000608 <__aeabi_dmul>
 8005bd4:	4b82      	ldr	r3, [pc, #520]	; (8005de0 <_dtoa_r+0x628>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f7fa fb60 	bl	800029c <__adddf3>
 8005bdc:	46d0      	mov	r8, sl
 8005bde:	46d9      	mov	r9, fp
 8005be0:	4682      	mov	sl, r0
 8005be2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005be6:	2e00      	cmp	r6, #0
 8005be8:	d158      	bne.n	8005c9c <_dtoa_r+0x4e4>
 8005bea:	4b7e      	ldr	r3, [pc, #504]	; (8005de4 <_dtoa_r+0x62c>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	4640      	mov	r0, r8
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	f7fa fb51 	bl	8000298 <__aeabi_dsub>
 8005bf6:	4652      	mov	r2, sl
 8005bf8:	465b      	mov	r3, fp
 8005bfa:	4680      	mov	r8, r0
 8005bfc:	4689      	mov	r9, r1
 8005bfe:	f7fa ff93 	bl	8000b28 <__aeabi_dcmpgt>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	f040 8295 	bne.w	8006132 <_dtoa_r+0x97a>
 8005c08:	4652      	mov	r2, sl
 8005c0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005c0e:	4640      	mov	r0, r8
 8005c10:	4649      	mov	r1, r9
 8005c12:	f7fa ff6b 	bl	8000aec <__aeabi_dcmplt>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f040 8289 	bne.w	800612e <_dtoa_r+0x976>
 8005c1c:	ec5b ab19 	vmov	sl, fp, d9
 8005c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f2c0 8148 	blt.w	8005eb8 <_dtoa_r+0x700>
 8005c28:	9a00      	ldr	r2, [sp, #0]
 8005c2a:	2a0e      	cmp	r2, #14
 8005c2c:	f300 8144 	bgt.w	8005eb8 <_dtoa_r+0x700>
 8005c30:	4b67      	ldr	r3, [pc, #412]	; (8005dd0 <_dtoa_r+0x618>)
 8005c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f280 80d5 	bge.w	8005dec <_dtoa_r+0x634>
 8005c42:	9b03      	ldr	r3, [sp, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f300 80d1 	bgt.w	8005dec <_dtoa_r+0x634>
 8005c4a:	f040 826f 	bne.w	800612c <_dtoa_r+0x974>
 8005c4e:	4b65      	ldr	r3, [pc, #404]	; (8005de4 <_dtoa_r+0x62c>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	4640      	mov	r0, r8
 8005c54:	4649      	mov	r1, r9
 8005c56:	f7fa fcd7 	bl	8000608 <__aeabi_dmul>
 8005c5a:	4652      	mov	r2, sl
 8005c5c:	465b      	mov	r3, fp
 8005c5e:	f7fa ff59 	bl	8000b14 <__aeabi_dcmpge>
 8005c62:	9e03      	ldr	r6, [sp, #12]
 8005c64:	4637      	mov	r7, r6
 8005c66:	2800      	cmp	r0, #0
 8005c68:	f040 8245 	bne.w	80060f6 <_dtoa_r+0x93e>
 8005c6c:	9d01      	ldr	r5, [sp, #4]
 8005c6e:	2331      	movs	r3, #49	; 0x31
 8005c70:	f805 3b01 	strb.w	r3, [r5], #1
 8005c74:	9b00      	ldr	r3, [sp, #0]
 8005c76:	3301      	adds	r3, #1
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	e240      	b.n	80060fe <_dtoa_r+0x946>
 8005c7c:	07f2      	lsls	r2, r6, #31
 8005c7e:	d505      	bpl.n	8005c8c <_dtoa_r+0x4d4>
 8005c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c84:	f7fa fcc0 	bl	8000608 <__aeabi_dmul>
 8005c88:	3501      	adds	r5, #1
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	1076      	asrs	r6, r6, #1
 8005c8e:	3708      	adds	r7, #8
 8005c90:	e777      	b.n	8005b82 <_dtoa_r+0x3ca>
 8005c92:	2502      	movs	r5, #2
 8005c94:	e779      	b.n	8005b8a <_dtoa_r+0x3d2>
 8005c96:	9f00      	ldr	r7, [sp, #0]
 8005c98:	9e03      	ldr	r6, [sp, #12]
 8005c9a:	e794      	b.n	8005bc6 <_dtoa_r+0x40e>
 8005c9c:	9901      	ldr	r1, [sp, #4]
 8005c9e:	4b4c      	ldr	r3, [pc, #304]	; (8005dd0 <_dtoa_r+0x618>)
 8005ca0:	4431      	add	r1, r6
 8005ca2:	910d      	str	r1, [sp, #52]	; 0x34
 8005ca4:	9908      	ldr	r1, [sp, #32]
 8005ca6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005caa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cae:	2900      	cmp	r1, #0
 8005cb0:	d043      	beq.n	8005d3a <_dtoa_r+0x582>
 8005cb2:	494d      	ldr	r1, [pc, #308]	; (8005de8 <_dtoa_r+0x630>)
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	f7fa fdd1 	bl	800085c <__aeabi_ddiv>
 8005cba:	4652      	mov	r2, sl
 8005cbc:	465b      	mov	r3, fp
 8005cbe:	f7fa faeb 	bl	8000298 <__aeabi_dsub>
 8005cc2:	9d01      	ldr	r5, [sp, #4]
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	468b      	mov	fp, r1
 8005cc8:	4649      	mov	r1, r9
 8005cca:	4640      	mov	r0, r8
 8005ccc:	f7fa ff4c 	bl	8000b68 <__aeabi_d2iz>
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	f7fa fc2f 	bl	8000534 <__aeabi_i2d>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4640      	mov	r0, r8
 8005cdc:	4649      	mov	r1, r9
 8005cde:	f7fa fadb 	bl	8000298 <__aeabi_dsub>
 8005ce2:	3630      	adds	r6, #48	; 0x30
 8005ce4:	f805 6b01 	strb.w	r6, [r5], #1
 8005ce8:	4652      	mov	r2, sl
 8005cea:	465b      	mov	r3, fp
 8005cec:	4680      	mov	r8, r0
 8005cee:	4689      	mov	r9, r1
 8005cf0:	f7fa fefc 	bl	8000aec <__aeabi_dcmplt>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d163      	bne.n	8005dc0 <_dtoa_r+0x608>
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	464b      	mov	r3, r9
 8005cfc:	4936      	ldr	r1, [pc, #216]	; (8005dd8 <_dtoa_r+0x620>)
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f7fa faca 	bl	8000298 <__aeabi_dsub>
 8005d04:	4652      	mov	r2, sl
 8005d06:	465b      	mov	r3, fp
 8005d08:	f7fa fef0 	bl	8000aec <__aeabi_dcmplt>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f040 80b5 	bne.w	8005e7c <_dtoa_r+0x6c4>
 8005d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d14:	429d      	cmp	r5, r3
 8005d16:	d081      	beq.n	8005c1c <_dtoa_r+0x464>
 8005d18:	4b30      	ldr	r3, [pc, #192]	; (8005ddc <_dtoa_r+0x624>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	4650      	mov	r0, sl
 8005d1e:	4659      	mov	r1, fp
 8005d20:	f7fa fc72 	bl	8000608 <__aeabi_dmul>
 8005d24:	4b2d      	ldr	r3, [pc, #180]	; (8005ddc <_dtoa_r+0x624>)
 8005d26:	4682      	mov	sl, r0
 8005d28:	468b      	mov	fp, r1
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f7fa fc6a 	bl	8000608 <__aeabi_dmul>
 8005d34:	4680      	mov	r8, r0
 8005d36:	4689      	mov	r9, r1
 8005d38:	e7c6      	b.n	8005cc8 <_dtoa_r+0x510>
 8005d3a:	4650      	mov	r0, sl
 8005d3c:	4659      	mov	r1, fp
 8005d3e:	f7fa fc63 	bl	8000608 <__aeabi_dmul>
 8005d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d44:	9d01      	ldr	r5, [sp, #4]
 8005d46:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d48:	4682      	mov	sl, r0
 8005d4a:	468b      	mov	fp, r1
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	4640      	mov	r0, r8
 8005d50:	f7fa ff0a 	bl	8000b68 <__aeabi_d2iz>
 8005d54:	4606      	mov	r6, r0
 8005d56:	f7fa fbed 	bl	8000534 <__aeabi_i2d>
 8005d5a:	3630      	adds	r6, #48	; 0x30
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4640      	mov	r0, r8
 8005d62:	4649      	mov	r1, r9
 8005d64:	f7fa fa98 	bl	8000298 <__aeabi_dsub>
 8005d68:	f805 6b01 	strb.w	r6, [r5], #1
 8005d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d6e:	429d      	cmp	r5, r3
 8005d70:	4680      	mov	r8, r0
 8005d72:	4689      	mov	r9, r1
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	d124      	bne.n	8005dc4 <_dtoa_r+0x60c>
 8005d7a:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <_dtoa_r+0x630>)
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	4659      	mov	r1, fp
 8005d80:	f7fa fa8c 	bl	800029c <__adddf3>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4640      	mov	r0, r8
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	f7fa fecc 	bl	8000b28 <__aeabi_dcmpgt>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d173      	bne.n	8005e7c <_dtoa_r+0x6c4>
 8005d94:	4652      	mov	r2, sl
 8005d96:	465b      	mov	r3, fp
 8005d98:	4913      	ldr	r1, [pc, #76]	; (8005de8 <_dtoa_r+0x630>)
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	f7fa fa7c 	bl	8000298 <__aeabi_dsub>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4640      	mov	r0, r8
 8005da6:	4649      	mov	r1, r9
 8005da8:	f7fa fea0 	bl	8000aec <__aeabi_dcmplt>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	f43f af35 	beq.w	8005c1c <_dtoa_r+0x464>
 8005db2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005db4:	1e6b      	subs	r3, r5, #1
 8005db6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005db8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dbc:	2b30      	cmp	r3, #48	; 0x30
 8005dbe:	d0f8      	beq.n	8005db2 <_dtoa_r+0x5fa>
 8005dc0:	9700      	str	r7, [sp, #0]
 8005dc2:	e049      	b.n	8005e58 <_dtoa_r+0x6a0>
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <_dtoa_r+0x624>)
 8005dc6:	f7fa fc1f 	bl	8000608 <__aeabi_dmul>
 8005dca:	4680      	mov	r8, r0
 8005dcc:	4689      	mov	r9, r1
 8005dce:	e7bd      	b.n	8005d4c <_dtoa_r+0x594>
 8005dd0:	080098e8 	.word	0x080098e8
 8005dd4:	080098c0 	.word	0x080098c0
 8005dd8:	3ff00000 	.word	0x3ff00000
 8005ddc:	40240000 	.word	0x40240000
 8005de0:	401c0000 	.word	0x401c0000
 8005de4:	40140000 	.word	0x40140000
 8005de8:	3fe00000 	.word	0x3fe00000
 8005dec:	9d01      	ldr	r5, [sp, #4]
 8005dee:	4656      	mov	r6, sl
 8005df0:	465f      	mov	r7, fp
 8005df2:	4642      	mov	r2, r8
 8005df4:	464b      	mov	r3, r9
 8005df6:	4630      	mov	r0, r6
 8005df8:	4639      	mov	r1, r7
 8005dfa:	f7fa fd2f 	bl	800085c <__aeabi_ddiv>
 8005dfe:	f7fa feb3 	bl	8000b68 <__aeabi_d2iz>
 8005e02:	4682      	mov	sl, r0
 8005e04:	f7fa fb96 	bl	8000534 <__aeabi_i2d>
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	f7fa fbfc 	bl	8000608 <__aeabi_dmul>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4630      	mov	r0, r6
 8005e16:	4639      	mov	r1, r7
 8005e18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005e1c:	f7fa fa3c 	bl	8000298 <__aeabi_dsub>
 8005e20:	f805 6b01 	strb.w	r6, [r5], #1
 8005e24:	9e01      	ldr	r6, [sp, #4]
 8005e26:	9f03      	ldr	r7, [sp, #12]
 8005e28:	1bae      	subs	r6, r5, r6
 8005e2a:	42b7      	cmp	r7, r6
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	d135      	bne.n	8005e9e <_dtoa_r+0x6e6>
 8005e32:	f7fa fa33 	bl	800029c <__adddf3>
 8005e36:	4642      	mov	r2, r8
 8005e38:	464b      	mov	r3, r9
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	460f      	mov	r7, r1
 8005e3e:	f7fa fe73 	bl	8000b28 <__aeabi_dcmpgt>
 8005e42:	b9d0      	cbnz	r0, 8005e7a <_dtoa_r+0x6c2>
 8005e44:	4642      	mov	r2, r8
 8005e46:	464b      	mov	r3, r9
 8005e48:	4630      	mov	r0, r6
 8005e4a:	4639      	mov	r1, r7
 8005e4c:	f7fa fe44 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e50:	b110      	cbz	r0, 8005e58 <_dtoa_r+0x6a0>
 8005e52:	f01a 0f01 	tst.w	sl, #1
 8005e56:	d110      	bne.n	8005e7a <_dtoa_r+0x6c2>
 8005e58:	4620      	mov	r0, r4
 8005e5a:	ee18 1a10 	vmov	r1, s16
 8005e5e:	f000 fe75 	bl	8006b4c <_Bfree>
 8005e62:	2300      	movs	r3, #0
 8005e64:	9800      	ldr	r0, [sp, #0]
 8005e66:	702b      	strb	r3, [r5, #0]
 8005e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	6018      	str	r0, [r3, #0]
 8005e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f43f acf1 	beq.w	8005858 <_dtoa_r+0xa0>
 8005e76:	601d      	str	r5, [r3, #0]
 8005e78:	e4ee      	b.n	8005858 <_dtoa_r+0xa0>
 8005e7a:	9f00      	ldr	r7, [sp, #0]
 8005e7c:	462b      	mov	r3, r5
 8005e7e:	461d      	mov	r5, r3
 8005e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e84:	2a39      	cmp	r2, #57	; 0x39
 8005e86:	d106      	bne.n	8005e96 <_dtoa_r+0x6de>
 8005e88:	9a01      	ldr	r2, [sp, #4]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d1f7      	bne.n	8005e7e <_dtoa_r+0x6c6>
 8005e8e:	9901      	ldr	r1, [sp, #4]
 8005e90:	2230      	movs	r2, #48	; 0x30
 8005e92:	3701      	adds	r7, #1
 8005e94:	700a      	strb	r2, [r1, #0]
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	3201      	adds	r2, #1
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	e790      	b.n	8005dc0 <_dtoa_r+0x608>
 8005e9e:	4ba6      	ldr	r3, [pc, #664]	; (8006138 <_dtoa_r+0x980>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f7fa fbb1 	bl	8000608 <__aeabi_dmul>
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	4606      	mov	r6, r0
 8005eac:	460f      	mov	r7, r1
 8005eae:	f7fa fe13 	bl	8000ad8 <__aeabi_dcmpeq>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d09d      	beq.n	8005df2 <_dtoa_r+0x63a>
 8005eb6:	e7cf      	b.n	8005e58 <_dtoa_r+0x6a0>
 8005eb8:	9a08      	ldr	r2, [sp, #32]
 8005eba:	2a00      	cmp	r2, #0
 8005ebc:	f000 80d7 	beq.w	800606e <_dtoa_r+0x8b6>
 8005ec0:	9a06      	ldr	r2, [sp, #24]
 8005ec2:	2a01      	cmp	r2, #1
 8005ec4:	f300 80ba 	bgt.w	800603c <_dtoa_r+0x884>
 8005ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eca:	2a00      	cmp	r2, #0
 8005ecc:	f000 80b2 	beq.w	8006034 <_dtoa_r+0x87c>
 8005ed0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ed4:	9e07      	ldr	r6, [sp, #28]
 8005ed6:	9d04      	ldr	r5, [sp, #16]
 8005ed8:	9a04      	ldr	r2, [sp, #16]
 8005eda:	441a      	add	r2, r3
 8005edc:	9204      	str	r2, [sp, #16]
 8005ede:	9a05      	ldr	r2, [sp, #20]
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	441a      	add	r2, r3
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	9205      	str	r2, [sp, #20]
 8005ee8:	f000 ff32 	bl	8006d50 <__i2b>
 8005eec:	4607      	mov	r7, r0
 8005eee:	2d00      	cmp	r5, #0
 8005ef0:	dd0c      	ble.n	8005f0c <_dtoa_r+0x754>
 8005ef2:	9b05      	ldr	r3, [sp, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dd09      	ble.n	8005f0c <_dtoa_r+0x754>
 8005ef8:	42ab      	cmp	r3, r5
 8005efa:	9a04      	ldr	r2, [sp, #16]
 8005efc:	bfa8      	it	ge
 8005efe:	462b      	movge	r3, r5
 8005f00:	1ad2      	subs	r2, r2, r3
 8005f02:	9204      	str	r2, [sp, #16]
 8005f04:	9a05      	ldr	r2, [sp, #20]
 8005f06:	1aed      	subs	r5, r5, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	9305      	str	r3, [sp, #20]
 8005f0c:	9b07      	ldr	r3, [sp, #28]
 8005f0e:	b31b      	cbz	r3, 8005f58 <_dtoa_r+0x7a0>
 8005f10:	9b08      	ldr	r3, [sp, #32]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 80af 	beq.w	8006076 <_dtoa_r+0x8be>
 8005f18:	2e00      	cmp	r6, #0
 8005f1a:	dd13      	ble.n	8005f44 <_dtoa_r+0x78c>
 8005f1c:	4639      	mov	r1, r7
 8005f1e:	4632      	mov	r2, r6
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 ffd5 	bl	8006ed0 <__pow5mult>
 8005f26:	ee18 2a10 	vmov	r2, s16
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	4607      	mov	r7, r0
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f000 ff24 	bl	8006d7c <__multiply>
 8005f34:	ee18 1a10 	vmov	r1, s16
 8005f38:	4680      	mov	r8, r0
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 fe06 	bl	8006b4c <_Bfree>
 8005f40:	ee08 8a10 	vmov	s16, r8
 8005f44:	9b07      	ldr	r3, [sp, #28]
 8005f46:	1b9a      	subs	r2, r3, r6
 8005f48:	d006      	beq.n	8005f58 <_dtoa_r+0x7a0>
 8005f4a:	ee18 1a10 	vmov	r1, s16
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 ffbe 	bl	8006ed0 <__pow5mult>
 8005f54:	ee08 0a10 	vmov	s16, r0
 8005f58:	2101      	movs	r1, #1
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 fef8 	bl	8006d50 <__i2b>
 8005f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	4606      	mov	r6, r0
 8005f66:	f340 8088 	ble.w	800607a <_dtoa_r+0x8c2>
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4601      	mov	r1, r0
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 ffae 	bl	8006ed0 <__pow5mult>
 8005f74:	9b06      	ldr	r3, [sp, #24]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	4606      	mov	r6, r0
 8005f7a:	f340 8081 	ble.w	8006080 <_dtoa_r+0x8c8>
 8005f7e:	f04f 0800 	mov.w	r8, #0
 8005f82:	6933      	ldr	r3, [r6, #16]
 8005f84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f88:	6918      	ldr	r0, [r3, #16]
 8005f8a:	f000 fe91 	bl	8006cb0 <__hi0bits>
 8005f8e:	f1c0 0020 	rsb	r0, r0, #32
 8005f92:	9b05      	ldr	r3, [sp, #20]
 8005f94:	4418      	add	r0, r3
 8005f96:	f010 001f 	ands.w	r0, r0, #31
 8005f9a:	f000 8092 	beq.w	80060c2 <_dtoa_r+0x90a>
 8005f9e:	f1c0 0320 	rsb	r3, r0, #32
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	f340 808a 	ble.w	80060bc <_dtoa_r+0x904>
 8005fa8:	f1c0 001c 	rsb	r0, r0, #28
 8005fac:	9b04      	ldr	r3, [sp, #16]
 8005fae:	4403      	add	r3, r0
 8005fb0:	9304      	str	r3, [sp, #16]
 8005fb2:	9b05      	ldr	r3, [sp, #20]
 8005fb4:	4403      	add	r3, r0
 8005fb6:	4405      	add	r5, r0
 8005fb8:	9305      	str	r3, [sp, #20]
 8005fba:	9b04      	ldr	r3, [sp, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dd07      	ble.n	8005fd0 <_dtoa_r+0x818>
 8005fc0:	ee18 1a10 	vmov	r1, s16
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f000 ffdc 	bl	8006f84 <__lshift>
 8005fcc:	ee08 0a10 	vmov	s16, r0
 8005fd0:	9b05      	ldr	r3, [sp, #20]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	dd05      	ble.n	8005fe2 <_dtoa_r+0x82a>
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 ffd2 	bl	8006f84 <__lshift>
 8005fe0:	4606      	mov	r6, r0
 8005fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d06e      	beq.n	80060c6 <_dtoa_r+0x90e>
 8005fe8:	ee18 0a10 	vmov	r0, s16
 8005fec:	4631      	mov	r1, r6
 8005fee:	f001 f839 	bl	8007064 <__mcmp>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	da67      	bge.n	80060c6 <_dtoa_r+0x90e>
 8005ff6:	9b00      	ldr	r3, [sp, #0]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	ee18 1a10 	vmov	r1, s16
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	220a      	movs	r2, #10
 8006002:	2300      	movs	r3, #0
 8006004:	4620      	mov	r0, r4
 8006006:	f000 fdc3 	bl	8006b90 <__multadd>
 800600a:	9b08      	ldr	r3, [sp, #32]
 800600c:	ee08 0a10 	vmov	s16, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 81b1 	beq.w	8006378 <_dtoa_r+0xbc0>
 8006016:	2300      	movs	r3, #0
 8006018:	4639      	mov	r1, r7
 800601a:	220a      	movs	r2, #10
 800601c:	4620      	mov	r0, r4
 800601e:	f000 fdb7 	bl	8006b90 <__multadd>
 8006022:	9b02      	ldr	r3, [sp, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	4607      	mov	r7, r0
 8006028:	f300 808e 	bgt.w	8006148 <_dtoa_r+0x990>
 800602c:	9b06      	ldr	r3, [sp, #24]
 800602e:	2b02      	cmp	r3, #2
 8006030:	dc51      	bgt.n	80060d6 <_dtoa_r+0x91e>
 8006032:	e089      	b.n	8006148 <_dtoa_r+0x990>
 8006034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006036:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800603a:	e74b      	b.n	8005ed4 <_dtoa_r+0x71c>
 800603c:	9b03      	ldr	r3, [sp, #12]
 800603e:	1e5e      	subs	r6, r3, #1
 8006040:	9b07      	ldr	r3, [sp, #28]
 8006042:	42b3      	cmp	r3, r6
 8006044:	bfbf      	itttt	lt
 8006046:	9b07      	ldrlt	r3, [sp, #28]
 8006048:	9607      	strlt	r6, [sp, #28]
 800604a:	1af2      	sublt	r2, r6, r3
 800604c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800604e:	bfb6      	itet	lt
 8006050:	189b      	addlt	r3, r3, r2
 8006052:	1b9e      	subge	r6, r3, r6
 8006054:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006056:	9b03      	ldr	r3, [sp, #12]
 8006058:	bfb8      	it	lt
 800605a:	2600      	movlt	r6, #0
 800605c:	2b00      	cmp	r3, #0
 800605e:	bfb7      	itett	lt
 8006060:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006064:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006068:	1a9d      	sublt	r5, r3, r2
 800606a:	2300      	movlt	r3, #0
 800606c:	e734      	b.n	8005ed8 <_dtoa_r+0x720>
 800606e:	9e07      	ldr	r6, [sp, #28]
 8006070:	9d04      	ldr	r5, [sp, #16]
 8006072:	9f08      	ldr	r7, [sp, #32]
 8006074:	e73b      	b.n	8005eee <_dtoa_r+0x736>
 8006076:	9a07      	ldr	r2, [sp, #28]
 8006078:	e767      	b.n	8005f4a <_dtoa_r+0x792>
 800607a:	9b06      	ldr	r3, [sp, #24]
 800607c:	2b01      	cmp	r3, #1
 800607e:	dc18      	bgt.n	80060b2 <_dtoa_r+0x8fa>
 8006080:	f1ba 0f00 	cmp.w	sl, #0
 8006084:	d115      	bne.n	80060b2 <_dtoa_r+0x8fa>
 8006086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800608a:	b993      	cbnz	r3, 80060b2 <_dtoa_r+0x8fa>
 800608c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006090:	0d1b      	lsrs	r3, r3, #20
 8006092:	051b      	lsls	r3, r3, #20
 8006094:	b183      	cbz	r3, 80060b8 <_dtoa_r+0x900>
 8006096:	9b04      	ldr	r3, [sp, #16]
 8006098:	3301      	adds	r3, #1
 800609a:	9304      	str	r3, [sp, #16]
 800609c:	9b05      	ldr	r3, [sp, #20]
 800609e:	3301      	adds	r3, #1
 80060a0:	9305      	str	r3, [sp, #20]
 80060a2:	f04f 0801 	mov.w	r8, #1
 80060a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f47f af6a 	bne.w	8005f82 <_dtoa_r+0x7ca>
 80060ae:	2001      	movs	r0, #1
 80060b0:	e76f      	b.n	8005f92 <_dtoa_r+0x7da>
 80060b2:	f04f 0800 	mov.w	r8, #0
 80060b6:	e7f6      	b.n	80060a6 <_dtoa_r+0x8ee>
 80060b8:	4698      	mov	r8, r3
 80060ba:	e7f4      	b.n	80060a6 <_dtoa_r+0x8ee>
 80060bc:	f43f af7d 	beq.w	8005fba <_dtoa_r+0x802>
 80060c0:	4618      	mov	r0, r3
 80060c2:	301c      	adds	r0, #28
 80060c4:	e772      	b.n	8005fac <_dtoa_r+0x7f4>
 80060c6:	9b03      	ldr	r3, [sp, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	dc37      	bgt.n	800613c <_dtoa_r+0x984>
 80060cc:	9b06      	ldr	r3, [sp, #24]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	dd34      	ble.n	800613c <_dtoa_r+0x984>
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	9302      	str	r3, [sp, #8]
 80060d6:	9b02      	ldr	r3, [sp, #8]
 80060d8:	b96b      	cbnz	r3, 80060f6 <_dtoa_r+0x93e>
 80060da:	4631      	mov	r1, r6
 80060dc:	2205      	movs	r2, #5
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 fd56 	bl	8006b90 <__multadd>
 80060e4:	4601      	mov	r1, r0
 80060e6:	4606      	mov	r6, r0
 80060e8:	ee18 0a10 	vmov	r0, s16
 80060ec:	f000 ffba 	bl	8007064 <__mcmp>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	f73f adbb 	bgt.w	8005c6c <_dtoa_r+0x4b4>
 80060f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f8:	9d01      	ldr	r5, [sp, #4]
 80060fa:	43db      	mvns	r3, r3
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	f04f 0800 	mov.w	r8, #0
 8006102:	4631      	mov	r1, r6
 8006104:	4620      	mov	r0, r4
 8006106:	f000 fd21 	bl	8006b4c <_Bfree>
 800610a:	2f00      	cmp	r7, #0
 800610c:	f43f aea4 	beq.w	8005e58 <_dtoa_r+0x6a0>
 8006110:	f1b8 0f00 	cmp.w	r8, #0
 8006114:	d005      	beq.n	8006122 <_dtoa_r+0x96a>
 8006116:	45b8      	cmp	r8, r7
 8006118:	d003      	beq.n	8006122 <_dtoa_r+0x96a>
 800611a:	4641      	mov	r1, r8
 800611c:	4620      	mov	r0, r4
 800611e:	f000 fd15 	bl	8006b4c <_Bfree>
 8006122:	4639      	mov	r1, r7
 8006124:	4620      	mov	r0, r4
 8006126:	f000 fd11 	bl	8006b4c <_Bfree>
 800612a:	e695      	b.n	8005e58 <_dtoa_r+0x6a0>
 800612c:	2600      	movs	r6, #0
 800612e:	4637      	mov	r7, r6
 8006130:	e7e1      	b.n	80060f6 <_dtoa_r+0x93e>
 8006132:	9700      	str	r7, [sp, #0]
 8006134:	4637      	mov	r7, r6
 8006136:	e599      	b.n	8005c6c <_dtoa_r+0x4b4>
 8006138:	40240000 	.word	0x40240000
 800613c:	9b08      	ldr	r3, [sp, #32]
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 80ca 	beq.w	80062d8 <_dtoa_r+0xb20>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	9302      	str	r3, [sp, #8]
 8006148:	2d00      	cmp	r5, #0
 800614a:	dd05      	ble.n	8006158 <_dtoa_r+0x9a0>
 800614c:	4639      	mov	r1, r7
 800614e:	462a      	mov	r2, r5
 8006150:	4620      	mov	r0, r4
 8006152:	f000 ff17 	bl	8006f84 <__lshift>
 8006156:	4607      	mov	r7, r0
 8006158:	f1b8 0f00 	cmp.w	r8, #0
 800615c:	d05b      	beq.n	8006216 <_dtoa_r+0xa5e>
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	4620      	mov	r0, r4
 8006162:	f000 fcb3 	bl	8006acc <_Balloc>
 8006166:	4605      	mov	r5, r0
 8006168:	b928      	cbnz	r0, 8006176 <_dtoa_r+0x9be>
 800616a:	4b87      	ldr	r3, [pc, #540]	; (8006388 <_dtoa_r+0xbd0>)
 800616c:	4602      	mov	r2, r0
 800616e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006172:	f7ff bb3b 	b.w	80057ec <_dtoa_r+0x34>
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	3202      	adds	r2, #2
 800617a:	0092      	lsls	r2, r2, #2
 800617c:	f107 010c 	add.w	r1, r7, #12
 8006180:	300c      	adds	r0, #12
 8006182:	f000 fc95 	bl	8006ab0 <memcpy>
 8006186:	2201      	movs	r2, #1
 8006188:	4629      	mov	r1, r5
 800618a:	4620      	mov	r0, r4
 800618c:	f000 fefa 	bl	8006f84 <__lshift>
 8006190:	9b01      	ldr	r3, [sp, #4]
 8006192:	f103 0901 	add.w	r9, r3, #1
 8006196:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800619a:	4413      	add	r3, r2
 800619c:	9305      	str	r3, [sp, #20]
 800619e:	f00a 0301 	and.w	r3, sl, #1
 80061a2:	46b8      	mov	r8, r7
 80061a4:	9304      	str	r3, [sp, #16]
 80061a6:	4607      	mov	r7, r0
 80061a8:	4631      	mov	r1, r6
 80061aa:	ee18 0a10 	vmov	r0, s16
 80061ae:	f7ff fa77 	bl	80056a0 <quorem>
 80061b2:	4641      	mov	r1, r8
 80061b4:	9002      	str	r0, [sp, #8]
 80061b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80061ba:	ee18 0a10 	vmov	r0, s16
 80061be:	f000 ff51 	bl	8007064 <__mcmp>
 80061c2:	463a      	mov	r2, r7
 80061c4:	9003      	str	r0, [sp, #12]
 80061c6:	4631      	mov	r1, r6
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 ff67 	bl	800709c <__mdiff>
 80061ce:	68c2      	ldr	r2, [r0, #12]
 80061d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80061d4:	4605      	mov	r5, r0
 80061d6:	bb02      	cbnz	r2, 800621a <_dtoa_r+0xa62>
 80061d8:	4601      	mov	r1, r0
 80061da:	ee18 0a10 	vmov	r0, s16
 80061de:	f000 ff41 	bl	8007064 <__mcmp>
 80061e2:	4602      	mov	r2, r0
 80061e4:	4629      	mov	r1, r5
 80061e6:	4620      	mov	r0, r4
 80061e8:	9207      	str	r2, [sp, #28]
 80061ea:	f000 fcaf 	bl	8006b4c <_Bfree>
 80061ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80061f2:	ea43 0102 	orr.w	r1, r3, r2
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	430b      	orrs	r3, r1
 80061fa:	464d      	mov	r5, r9
 80061fc:	d10f      	bne.n	800621e <_dtoa_r+0xa66>
 80061fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006202:	d02a      	beq.n	800625a <_dtoa_r+0xaa2>
 8006204:	9b03      	ldr	r3, [sp, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	dd02      	ble.n	8006210 <_dtoa_r+0xa58>
 800620a:	9b02      	ldr	r3, [sp, #8]
 800620c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006210:	f88b a000 	strb.w	sl, [fp]
 8006214:	e775      	b.n	8006102 <_dtoa_r+0x94a>
 8006216:	4638      	mov	r0, r7
 8006218:	e7ba      	b.n	8006190 <_dtoa_r+0x9d8>
 800621a:	2201      	movs	r2, #1
 800621c:	e7e2      	b.n	80061e4 <_dtoa_r+0xa2c>
 800621e:	9b03      	ldr	r3, [sp, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	db04      	blt.n	800622e <_dtoa_r+0xa76>
 8006224:	9906      	ldr	r1, [sp, #24]
 8006226:	430b      	orrs	r3, r1
 8006228:	9904      	ldr	r1, [sp, #16]
 800622a:	430b      	orrs	r3, r1
 800622c:	d122      	bne.n	8006274 <_dtoa_r+0xabc>
 800622e:	2a00      	cmp	r2, #0
 8006230:	ddee      	ble.n	8006210 <_dtoa_r+0xa58>
 8006232:	ee18 1a10 	vmov	r1, s16
 8006236:	2201      	movs	r2, #1
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fea3 	bl	8006f84 <__lshift>
 800623e:	4631      	mov	r1, r6
 8006240:	ee08 0a10 	vmov	s16, r0
 8006244:	f000 ff0e 	bl	8007064 <__mcmp>
 8006248:	2800      	cmp	r0, #0
 800624a:	dc03      	bgt.n	8006254 <_dtoa_r+0xa9c>
 800624c:	d1e0      	bne.n	8006210 <_dtoa_r+0xa58>
 800624e:	f01a 0f01 	tst.w	sl, #1
 8006252:	d0dd      	beq.n	8006210 <_dtoa_r+0xa58>
 8006254:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006258:	d1d7      	bne.n	800620a <_dtoa_r+0xa52>
 800625a:	2339      	movs	r3, #57	; 0x39
 800625c:	f88b 3000 	strb.w	r3, [fp]
 8006260:	462b      	mov	r3, r5
 8006262:	461d      	mov	r5, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800626a:	2a39      	cmp	r2, #57	; 0x39
 800626c:	d071      	beq.n	8006352 <_dtoa_r+0xb9a>
 800626e:	3201      	adds	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e746      	b.n	8006102 <_dtoa_r+0x94a>
 8006274:	2a00      	cmp	r2, #0
 8006276:	dd07      	ble.n	8006288 <_dtoa_r+0xad0>
 8006278:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800627c:	d0ed      	beq.n	800625a <_dtoa_r+0xaa2>
 800627e:	f10a 0301 	add.w	r3, sl, #1
 8006282:	f88b 3000 	strb.w	r3, [fp]
 8006286:	e73c      	b.n	8006102 <_dtoa_r+0x94a>
 8006288:	9b05      	ldr	r3, [sp, #20]
 800628a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800628e:	4599      	cmp	r9, r3
 8006290:	d047      	beq.n	8006322 <_dtoa_r+0xb6a>
 8006292:	ee18 1a10 	vmov	r1, s16
 8006296:	2300      	movs	r3, #0
 8006298:	220a      	movs	r2, #10
 800629a:	4620      	mov	r0, r4
 800629c:	f000 fc78 	bl	8006b90 <__multadd>
 80062a0:	45b8      	cmp	r8, r7
 80062a2:	ee08 0a10 	vmov	s16, r0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	f04f 020a 	mov.w	r2, #10
 80062ae:	4641      	mov	r1, r8
 80062b0:	4620      	mov	r0, r4
 80062b2:	d106      	bne.n	80062c2 <_dtoa_r+0xb0a>
 80062b4:	f000 fc6c 	bl	8006b90 <__multadd>
 80062b8:	4680      	mov	r8, r0
 80062ba:	4607      	mov	r7, r0
 80062bc:	f109 0901 	add.w	r9, r9, #1
 80062c0:	e772      	b.n	80061a8 <_dtoa_r+0x9f0>
 80062c2:	f000 fc65 	bl	8006b90 <__multadd>
 80062c6:	4639      	mov	r1, r7
 80062c8:	4680      	mov	r8, r0
 80062ca:	2300      	movs	r3, #0
 80062cc:	220a      	movs	r2, #10
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 fc5e 	bl	8006b90 <__multadd>
 80062d4:	4607      	mov	r7, r0
 80062d6:	e7f1      	b.n	80062bc <_dtoa_r+0xb04>
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	9302      	str	r3, [sp, #8]
 80062dc:	9d01      	ldr	r5, [sp, #4]
 80062de:	ee18 0a10 	vmov	r0, s16
 80062e2:	4631      	mov	r1, r6
 80062e4:	f7ff f9dc 	bl	80056a0 <quorem>
 80062e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80062ec:	9b01      	ldr	r3, [sp, #4]
 80062ee:	f805 ab01 	strb.w	sl, [r5], #1
 80062f2:	1aea      	subs	r2, r5, r3
 80062f4:	9b02      	ldr	r3, [sp, #8]
 80062f6:	4293      	cmp	r3, r2
 80062f8:	dd09      	ble.n	800630e <_dtoa_r+0xb56>
 80062fa:	ee18 1a10 	vmov	r1, s16
 80062fe:	2300      	movs	r3, #0
 8006300:	220a      	movs	r2, #10
 8006302:	4620      	mov	r0, r4
 8006304:	f000 fc44 	bl	8006b90 <__multadd>
 8006308:	ee08 0a10 	vmov	s16, r0
 800630c:	e7e7      	b.n	80062de <_dtoa_r+0xb26>
 800630e:	9b02      	ldr	r3, [sp, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	bfc8      	it	gt
 8006314:	461d      	movgt	r5, r3
 8006316:	9b01      	ldr	r3, [sp, #4]
 8006318:	bfd8      	it	le
 800631a:	2501      	movle	r5, #1
 800631c:	441d      	add	r5, r3
 800631e:	f04f 0800 	mov.w	r8, #0
 8006322:	ee18 1a10 	vmov	r1, s16
 8006326:	2201      	movs	r2, #1
 8006328:	4620      	mov	r0, r4
 800632a:	f000 fe2b 	bl	8006f84 <__lshift>
 800632e:	4631      	mov	r1, r6
 8006330:	ee08 0a10 	vmov	s16, r0
 8006334:	f000 fe96 	bl	8007064 <__mcmp>
 8006338:	2800      	cmp	r0, #0
 800633a:	dc91      	bgt.n	8006260 <_dtoa_r+0xaa8>
 800633c:	d102      	bne.n	8006344 <_dtoa_r+0xb8c>
 800633e:	f01a 0f01 	tst.w	sl, #1
 8006342:	d18d      	bne.n	8006260 <_dtoa_r+0xaa8>
 8006344:	462b      	mov	r3, r5
 8006346:	461d      	mov	r5, r3
 8006348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800634c:	2a30      	cmp	r2, #48	; 0x30
 800634e:	d0fa      	beq.n	8006346 <_dtoa_r+0xb8e>
 8006350:	e6d7      	b.n	8006102 <_dtoa_r+0x94a>
 8006352:	9a01      	ldr	r2, [sp, #4]
 8006354:	429a      	cmp	r2, r3
 8006356:	d184      	bne.n	8006262 <_dtoa_r+0xaaa>
 8006358:	9b00      	ldr	r3, [sp, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	2331      	movs	r3, #49	; 0x31
 8006360:	7013      	strb	r3, [r2, #0]
 8006362:	e6ce      	b.n	8006102 <_dtoa_r+0x94a>
 8006364:	4b09      	ldr	r3, [pc, #36]	; (800638c <_dtoa_r+0xbd4>)
 8006366:	f7ff ba95 	b.w	8005894 <_dtoa_r+0xdc>
 800636a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800636c:	2b00      	cmp	r3, #0
 800636e:	f47f aa6e 	bne.w	800584e <_dtoa_r+0x96>
 8006372:	4b07      	ldr	r3, [pc, #28]	; (8006390 <_dtoa_r+0xbd8>)
 8006374:	f7ff ba8e 	b.w	8005894 <_dtoa_r+0xdc>
 8006378:	9b02      	ldr	r3, [sp, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	dcae      	bgt.n	80062dc <_dtoa_r+0xb24>
 800637e:	9b06      	ldr	r3, [sp, #24]
 8006380:	2b02      	cmp	r3, #2
 8006382:	f73f aea8 	bgt.w	80060d6 <_dtoa_r+0x91e>
 8006386:	e7a9      	b.n	80062dc <_dtoa_r+0xb24>
 8006388:	080097d8 	.word	0x080097d8
 800638c:	080095dc 	.word	0x080095dc
 8006390:	08009759 	.word	0x08009759

08006394 <rshift>:
 8006394:	6903      	ldr	r3, [r0, #16]
 8006396:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800639a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800639e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80063a2:	f100 0414 	add.w	r4, r0, #20
 80063a6:	dd45      	ble.n	8006434 <rshift+0xa0>
 80063a8:	f011 011f 	ands.w	r1, r1, #31
 80063ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80063b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80063b4:	d10c      	bne.n	80063d0 <rshift+0x3c>
 80063b6:	f100 0710 	add.w	r7, r0, #16
 80063ba:	4629      	mov	r1, r5
 80063bc:	42b1      	cmp	r1, r6
 80063be:	d334      	bcc.n	800642a <rshift+0x96>
 80063c0:	1a9b      	subs	r3, r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	1eea      	subs	r2, r5, #3
 80063c6:	4296      	cmp	r6, r2
 80063c8:	bf38      	it	cc
 80063ca:	2300      	movcc	r3, #0
 80063cc:	4423      	add	r3, r4
 80063ce:	e015      	b.n	80063fc <rshift+0x68>
 80063d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80063d4:	f1c1 0820 	rsb	r8, r1, #32
 80063d8:	40cf      	lsrs	r7, r1
 80063da:	f105 0e04 	add.w	lr, r5, #4
 80063de:	46a1      	mov	r9, r4
 80063e0:	4576      	cmp	r6, lr
 80063e2:	46f4      	mov	ip, lr
 80063e4:	d815      	bhi.n	8006412 <rshift+0x7e>
 80063e6:	1a9a      	subs	r2, r3, r2
 80063e8:	0092      	lsls	r2, r2, #2
 80063ea:	3a04      	subs	r2, #4
 80063ec:	3501      	adds	r5, #1
 80063ee:	42ae      	cmp	r6, r5
 80063f0:	bf38      	it	cc
 80063f2:	2200      	movcc	r2, #0
 80063f4:	18a3      	adds	r3, r4, r2
 80063f6:	50a7      	str	r7, [r4, r2]
 80063f8:	b107      	cbz	r7, 80063fc <rshift+0x68>
 80063fa:	3304      	adds	r3, #4
 80063fc:	1b1a      	subs	r2, r3, r4
 80063fe:	42a3      	cmp	r3, r4
 8006400:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006404:	bf08      	it	eq
 8006406:	2300      	moveq	r3, #0
 8006408:	6102      	str	r2, [r0, #16]
 800640a:	bf08      	it	eq
 800640c:	6143      	streq	r3, [r0, #20]
 800640e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006412:	f8dc c000 	ldr.w	ip, [ip]
 8006416:	fa0c fc08 	lsl.w	ip, ip, r8
 800641a:	ea4c 0707 	orr.w	r7, ip, r7
 800641e:	f849 7b04 	str.w	r7, [r9], #4
 8006422:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006426:	40cf      	lsrs	r7, r1
 8006428:	e7da      	b.n	80063e0 <rshift+0x4c>
 800642a:	f851 cb04 	ldr.w	ip, [r1], #4
 800642e:	f847 cf04 	str.w	ip, [r7, #4]!
 8006432:	e7c3      	b.n	80063bc <rshift+0x28>
 8006434:	4623      	mov	r3, r4
 8006436:	e7e1      	b.n	80063fc <rshift+0x68>

08006438 <__hexdig_fun>:
 8006438:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800643c:	2b09      	cmp	r3, #9
 800643e:	d802      	bhi.n	8006446 <__hexdig_fun+0xe>
 8006440:	3820      	subs	r0, #32
 8006442:	b2c0      	uxtb	r0, r0
 8006444:	4770      	bx	lr
 8006446:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800644a:	2b05      	cmp	r3, #5
 800644c:	d801      	bhi.n	8006452 <__hexdig_fun+0x1a>
 800644e:	3847      	subs	r0, #71	; 0x47
 8006450:	e7f7      	b.n	8006442 <__hexdig_fun+0xa>
 8006452:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006456:	2b05      	cmp	r3, #5
 8006458:	d801      	bhi.n	800645e <__hexdig_fun+0x26>
 800645a:	3827      	subs	r0, #39	; 0x27
 800645c:	e7f1      	b.n	8006442 <__hexdig_fun+0xa>
 800645e:	2000      	movs	r0, #0
 8006460:	4770      	bx	lr
	...

08006464 <__gethex>:
 8006464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006468:	ed2d 8b02 	vpush	{d8}
 800646c:	b089      	sub	sp, #36	; 0x24
 800646e:	ee08 0a10 	vmov	s16, r0
 8006472:	9304      	str	r3, [sp, #16]
 8006474:	4bb4      	ldr	r3, [pc, #720]	; (8006748 <__gethex+0x2e4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	9301      	str	r3, [sp, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	468b      	mov	fp, r1
 800647e:	4690      	mov	r8, r2
 8006480:	f7f9 feae 	bl	80001e0 <strlen>
 8006484:	9b01      	ldr	r3, [sp, #4]
 8006486:	f8db 2000 	ldr.w	r2, [fp]
 800648a:	4403      	add	r3, r0
 800648c:	4682      	mov	sl, r0
 800648e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006492:	9305      	str	r3, [sp, #20]
 8006494:	1c93      	adds	r3, r2, #2
 8006496:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800649a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800649e:	32fe      	adds	r2, #254	; 0xfe
 80064a0:	18d1      	adds	r1, r2, r3
 80064a2:	461f      	mov	r7, r3
 80064a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80064a8:	9100      	str	r1, [sp, #0]
 80064aa:	2830      	cmp	r0, #48	; 0x30
 80064ac:	d0f8      	beq.n	80064a0 <__gethex+0x3c>
 80064ae:	f7ff ffc3 	bl	8006438 <__hexdig_fun>
 80064b2:	4604      	mov	r4, r0
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d13a      	bne.n	800652e <__gethex+0xca>
 80064b8:	9901      	ldr	r1, [sp, #4]
 80064ba:	4652      	mov	r2, sl
 80064bc:	4638      	mov	r0, r7
 80064be:	f001 fa33 	bl	8007928 <strncmp>
 80064c2:	4605      	mov	r5, r0
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d168      	bne.n	800659a <__gethex+0x136>
 80064c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80064cc:	eb07 060a 	add.w	r6, r7, sl
 80064d0:	f7ff ffb2 	bl	8006438 <__hexdig_fun>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d062      	beq.n	800659e <__gethex+0x13a>
 80064d8:	4633      	mov	r3, r6
 80064da:	7818      	ldrb	r0, [r3, #0]
 80064dc:	2830      	cmp	r0, #48	; 0x30
 80064de:	461f      	mov	r7, r3
 80064e0:	f103 0301 	add.w	r3, r3, #1
 80064e4:	d0f9      	beq.n	80064da <__gethex+0x76>
 80064e6:	f7ff ffa7 	bl	8006438 <__hexdig_fun>
 80064ea:	2301      	movs	r3, #1
 80064ec:	fab0 f480 	clz	r4, r0
 80064f0:	0964      	lsrs	r4, r4, #5
 80064f2:	4635      	mov	r5, r6
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	463a      	mov	r2, r7
 80064f8:	4616      	mov	r6, r2
 80064fa:	3201      	adds	r2, #1
 80064fc:	7830      	ldrb	r0, [r6, #0]
 80064fe:	f7ff ff9b 	bl	8006438 <__hexdig_fun>
 8006502:	2800      	cmp	r0, #0
 8006504:	d1f8      	bne.n	80064f8 <__gethex+0x94>
 8006506:	9901      	ldr	r1, [sp, #4]
 8006508:	4652      	mov	r2, sl
 800650a:	4630      	mov	r0, r6
 800650c:	f001 fa0c 	bl	8007928 <strncmp>
 8006510:	b980      	cbnz	r0, 8006534 <__gethex+0xd0>
 8006512:	b94d      	cbnz	r5, 8006528 <__gethex+0xc4>
 8006514:	eb06 050a 	add.w	r5, r6, sl
 8006518:	462a      	mov	r2, r5
 800651a:	4616      	mov	r6, r2
 800651c:	3201      	adds	r2, #1
 800651e:	7830      	ldrb	r0, [r6, #0]
 8006520:	f7ff ff8a 	bl	8006438 <__hexdig_fun>
 8006524:	2800      	cmp	r0, #0
 8006526:	d1f8      	bne.n	800651a <__gethex+0xb6>
 8006528:	1bad      	subs	r5, r5, r6
 800652a:	00ad      	lsls	r5, r5, #2
 800652c:	e004      	b.n	8006538 <__gethex+0xd4>
 800652e:	2400      	movs	r4, #0
 8006530:	4625      	mov	r5, r4
 8006532:	e7e0      	b.n	80064f6 <__gethex+0x92>
 8006534:	2d00      	cmp	r5, #0
 8006536:	d1f7      	bne.n	8006528 <__gethex+0xc4>
 8006538:	7833      	ldrb	r3, [r6, #0]
 800653a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800653e:	2b50      	cmp	r3, #80	; 0x50
 8006540:	d13b      	bne.n	80065ba <__gethex+0x156>
 8006542:	7873      	ldrb	r3, [r6, #1]
 8006544:	2b2b      	cmp	r3, #43	; 0x2b
 8006546:	d02c      	beq.n	80065a2 <__gethex+0x13e>
 8006548:	2b2d      	cmp	r3, #45	; 0x2d
 800654a:	d02e      	beq.n	80065aa <__gethex+0x146>
 800654c:	1c71      	adds	r1, r6, #1
 800654e:	f04f 0900 	mov.w	r9, #0
 8006552:	7808      	ldrb	r0, [r1, #0]
 8006554:	f7ff ff70 	bl	8006438 <__hexdig_fun>
 8006558:	1e43      	subs	r3, r0, #1
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b18      	cmp	r3, #24
 800655e:	d82c      	bhi.n	80065ba <__gethex+0x156>
 8006560:	f1a0 0210 	sub.w	r2, r0, #16
 8006564:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006568:	f7ff ff66 	bl	8006438 <__hexdig_fun>
 800656c:	1e43      	subs	r3, r0, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b18      	cmp	r3, #24
 8006572:	d91d      	bls.n	80065b0 <__gethex+0x14c>
 8006574:	f1b9 0f00 	cmp.w	r9, #0
 8006578:	d000      	beq.n	800657c <__gethex+0x118>
 800657a:	4252      	negs	r2, r2
 800657c:	4415      	add	r5, r2
 800657e:	f8cb 1000 	str.w	r1, [fp]
 8006582:	b1e4      	cbz	r4, 80065be <__gethex+0x15a>
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	bf14      	ite	ne
 800658a:	2700      	movne	r7, #0
 800658c:	2706      	moveq	r7, #6
 800658e:	4638      	mov	r0, r7
 8006590:	b009      	add	sp, #36	; 0x24
 8006592:	ecbd 8b02 	vpop	{d8}
 8006596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659a:	463e      	mov	r6, r7
 800659c:	4625      	mov	r5, r4
 800659e:	2401      	movs	r4, #1
 80065a0:	e7ca      	b.n	8006538 <__gethex+0xd4>
 80065a2:	f04f 0900 	mov.w	r9, #0
 80065a6:	1cb1      	adds	r1, r6, #2
 80065a8:	e7d3      	b.n	8006552 <__gethex+0xee>
 80065aa:	f04f 0901 	mov.w	r9, #1
 80065ae:	e7fa      	b.n	80065a6 <__gethex+0x142>
 80065b0:	230a      	movs	r3, #10
 80065b2:	fb03 0202 	mla	r2, r3, r2, r0
 80065b6:	3a10      	subs	r2, #16
 80065b8:	e7d4      	b.n	8006564 <__gethex+0x100>
 80065ba:	4631      	mov	r1, r6
 80065bc:	e7df      	b.n	800657e <__gethex+0x11a>
 80065be:	1bf3      	subs	r3, r6, r7
 80065c0:	3b01      	subs	r3, #1
 80065c2:	4621      	mov	r1, r4
 80065c4:	2b07      	cmp	r3, #7
 80065c6:	dc0b      	bgt.n	80065e0 <__gethex+0x17c>
 80065c8:	ee18 0a10 	vmov	r0, s16
 80065cc:	f000 fa7e 	bl	8006acc <_Balloc>
 80065d0:	4604      	mov	r4, r0
 80065d2:	b940      	cbnz	r0, 80065e6 <__gethex+0x182>
 80065d4:	4b5d      	ldr	r3, [pc, #372]	; (800674c <__gethex+0x2e8>)
 80065d6:	4602      	mov	r2, r0
 80065d8:	21de      	movs	r1, #222	; 0xde
 80065da:	485d      	ldr	r0, [pc, #372]	; (8006750 <__gethex+0x2ec>)
 80065dc:	f001 f9c6 	bl	800796c <__assert_func>
 80065e0:	3101      	adds	r1, #1
 80065e2:	105b      	asrs	r3, r3, #1
 80065e4:	e7ee      	b.n	80065c4 <__gethex+0x160>
 80065e6:	f100 0914 	add.w	r9, r0, #20
 80065ea:	f04f 0b00 	mov.w	fp, #0
 80065ee:	f1ca 0301 	rsb	r3, sl, #1
 80065f2:	f8cd 9008 	str.w	r9, [sp, #8]
 80065f6:	f8cd b000 	str.w	fp, [sp]
 80065fa:	9306      	str	r3, [sp, #24]
 80065fc:	42b7      	cmp	r7, r6
 80065fe:	d340      	bcc.n	8006682 <__gethex+0x21e>
 8006600:	9802      	ldr	r0, [sp, #8]
 8006602:	9b00      	ldr	r3, [sp, #0]
 8006604:	f840 3b04 	str.w	r3, [r0], #4
 8006608:	eba0 0009 	sub.w	r0, r0, r9
 800660c:	1080      	asrs	r0, r0, #2
 800660e:	0146      	lsls	r6, r0, #5
 8006610:	6120      	str	r0, [r4, #16]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fb4c 	bl	8006cb0 <__hi0bits>
 8006618:	1a30      	subs	r0, r6, r0
 800661a:	f8d8 6000 	ldr.w	r6, [r8]
 800661e:	42b0      	cmp	r0, r6
 8006620:	dd63      	ble.n	80066ea <__gethex+0x286>
 8006622:	1b87      	subs	r7, r0, r6
 8006624:	4639      	mov	r1, r7
 8006626:	4620      	mov	r0, r4
 8006628:	f000 fef0 	bl	800740c <__any_on>
 800662c:	4682      	mov	sl, r0
 800662e:	b1a8      	cbz	r0, 800665c <__gethex+0x1f8>
 8006630:	1e7b      	subs	r3, r7, #1
 8006632:	1159      	asrs	r1, r3, #5
 8006634:	f003 021f 	and.w	r2, r3, #31
 8006638:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800663c:	f04f 0a01 	mov.w	sl, #1
 8006640:	fa0a f202 	lsl.w	r2, sl, r2
 8006644:	420a      	tst	r2, r1
 8006646:	d009      	beq.n	800665c <__gethex+0x1f8>
 8006648:	4553      	cmp	r3, sl
 800664a:	dd05      	ble.n	8006658 <__gethex+0x1f4>
 800664c:	1eb9      	subs	r1, r7, #2
 800664e:	4620      	mov	r0, r4
 8006650:	f000 fedc 	bl	800740c <__any_on>
 8006654:	2800      	cmp	r0, #0
 8006656:	d145      	bne.n	80066e4 <__gethex+0x280>
 8006658:	f04f 0a02 	mov.w	sl, #2
 800665c:	4639      	mov	r1, r7
 800665e:	4620      	mov	r0, r4
 8006660:	f7ff fe98 	bl	8006394 <rshift>
 8006664:	443d      	add	r5, r7
 8006666:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800666a:	42ab      	cmp	r3, r5
 800666c:	da4c      	bge.n	8006708 <__gethex+0x2a4>
 800666e:	ee18 0a10 	vmov	r0, s16
 8006672:	4621      	mov	r1, r4
 8006674:	f000 fa6a 	bl	8006b4c <_Bfree>
 8006678:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800667a:	2300      	movs	r3, #0
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	27a3      	movs	r7, #163	; 0xa3
 8006680:	e785      	b.n	800658e <__gethex+0x12a>
 8006682:	1e73      	subs	r3, r6, #1
 8006684:	9a05      	ldr	r2, [sp, #20]
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800668c:	4293      	cmp	r3, r2
 800668e:	d019      	beq.n	80066c4 <__gethex+0x260>
 8006690:	f1bb 0f20 	cmp.w	fp, #32
 8006694:	d107      	bne.n	80066a6 <__gethex+0x242>
 8006696:	9b02      	ldr	r3, [sp, #8]
 8006698:	9a00      	ldr	r2, [sp, #0]
 800669a:	f843 2b04 	str.w	r2, [r3], #4
 800669e:	9302      	str	r3, [sp, #8]
 80066a0:	2300      	movs	r3, #0
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	469b      	mov	fp, r3
 80066a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80066aa:	f7ff fec5 	bl	8006438 <__hexdig_fun>
 80066ae:	9b00      	ldr	r3, [sp, #0]
 80066b0:	f000 000f 	and.w	r0, r0, #15
 80066b4:	fa00 f00b 	lsl.w	r0, r0, fp
 80066b8:	4303      	orrs	r3, r0
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	f10b 0b04 	add.w	fp, fp, #4
 80066c0:	9b03      	ldr	r3, [sp, #12]
 80066c2:	e00d      	b.n	80066e0 <__gethex+0x27c>
 80066c4:	9b03      	ldr	r3, [sp, #12]
 80066c6:	9a06      	ldr	r2, [sp, #24]
 80066c8:	4413      	add	r3, r2
 80066ca:	42bb      	cmp	r3, r7
 80066cc:	d3e0      	bcc.n	8006690 <__gethex+0x22c>
 80066ce:	4618      	mov	r0, r3
 80066d0:	9901      	ldr	r1, [sp, #4]
 80066d2:	9307      	str	r3, [sp, #28]
 80066d4:	4652      	mov	r2, sl
 80066d6:	f001 f927 	bl	8007928 <strncmp>
 80066da:	9b07      	ldr	r3, [sp, #28]
 80066dc:	2800      	cmp	r0, #0
 80066de:	d1d7      	bne.n	8006690 <__gethex+0x22c>
 80066e0:	461e      	mov	r6, r3
 80066e2:	e78b      	b.n	80065fc <__gethex+0x198>
 80066e4:	f04f 0a03 	mov.w	sl, #3
 80066e8:	e7b8      	b.n	800665c <__gethex+0x1f8>
 80066ea:	da0a      	bge.n	8006702 <__gethex+0x29e>
 80066ec:	1a37      	subs	r7, r6, r0
 80066ee:	4621      	mov	r1, r4
 80066f0:	ee18 0a10 	vmov	r0, s16
 80066f4:	463a      	mov	r2, r7
 80066f6:	f000 fc45 	bl	8006f84 <__lshift>
 80066fa:	1bed      	subs	r5, r5, r7
 80066fc:	4604      	mov	r4, r0
 80066fe:	f100 0914 	add.w	r9, r0, #20
 8006702:	f04f 0a00 	mov.w	sl, #0
 8006706:	e7ae      	b.n	8006666 <__gethex+0x202>
 8006708:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800670c:	42a8      	cmp	r0, r5
 800670e:	dd72      	ble.n	80067f6 <__gethex+0x392>
 8006710:	1b45      	subs	r5, r0, r5
 8006712:	42ae      	cmp	r6, r5
 8006714:	dc36      	bgt.n	8006784 <__gethex+0x320>
 8006716:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800671a:	2b02      	cmp	r3, #2
 800671c:	d02a      	beq.n	8006774 <__gethex+0x310>
 800671e:	2b03      	cmp	r3, #3
 8006720:	d02c      	beq.n	800677c <__gethex+0x318>
 8006722:	2b01      	cmp	r3, #1
 8006724:	d11c      	bne.n	8006760 <__gethex+0x2fc>
 8006726:	42ae      	cmp	r6, r5
 8006728:	d11a      	bne.n	8006760 <__gethex+0x2fc>
 800672a:	2e01      	cmp	r6, #1
 800672c:	d112      	bne.n	8006754 <__gethex+0x2f0>
 800672e:	9a04      	ldr	r2, [sp, #16]
 8006730:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	2301      	movs	r3, #1
 8006738:	6123      	str	r3, [r4, #16]
 800673a:	f8c9 3000 	str.w	r3, [r9]
 800673e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006740:	2762      	movs	r7, #98	; 0x62
 8006742:	601c      	str	r4, [r3, #0]
 8006744:	e723      	b.n	800658e <__gethex+0x12a>
 8006746:	bf00      	nop
 8006748:	08009850 	.word	0x08009850
 800674c:	080097d8 	.word	0x080097d8
 8006750:	080097e9 	.word	0x080097e9
 8006754:	1e71      	subs	r1, r6, #1
 8006756:	4620      	mov	r0, r4
 8006758:	f000 fe58 	bl	800740c <__any_on>
 800675c:	2800      	cmp	r0, #0
 800675e:	d1e6      	bne.n	800672e <__gethex+0x2ca>
 8006760:	ee18 0a10 	vmov	r0, s16
 8006764:	4621      	mov	r1, r4
 8006766:	f000 f9f1 	bl	8006b4c <_Bfree>
 800676a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800676c:	2300      	movs	r3, #0
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	2750      	movs	r7, #80	; 0x50
 8006772:	e70c      	b.n	800658e <__gethex+0x12a>
 8006774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f2      	bne.n	8006760 <__gethex+0x2fc>
 800677a:	e7d8      	b.n	800672e <__gethex+0x2ca>
 800677c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1d5      	bne.n	800672e <__gethex+0x2ca>
 8006782:	e7ed      	b.n	8006760 <__gethex+0x2fc>
 8006784:	1e6f      	subs	r7, r5, #1
 8006786:	f1ba 0f00 	cmp.w	sl, #0
 800678a:	d131      	bne.n	80067f0 <__gethex+0x38c>
 800678c:	b127      	cbz	r7, 8006798 <__gethex+0x334>
 800678e:	4639      	mov	r1, r7
 8006790:	4620      	mov	r0, r4
 8006792:	f000 fe3b 	bl	800740c <__any_on>
 8006796:	4682      	mov	sl, r0
 8006798:	117b      	asrs	r3, r7, #5
 800679a:	2101      	movs	r1, #1
 800679c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80067a0:	f007 071f 	and.w	r7, r7, #31
 80067a4:	fa01 f707 	lsl.w	r7, r1, r7
 80067a8:	421f      	tst	r7, r3
 80067aa:	4629      	mov	r1, r5
 80067ac:	4620      	mov	r0, r4
 80067ae:	bf18      	it	ne
 80067b0:	f04a 0a02 	orrne.w	sl, sl, #2
 80067b4:	1b76      	subs	r6, r6, r5
 80067b6:	f7ff fded 	bl	8006394 <rshift>
 80067ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80067be:	2702      	movs	r7, #2
 80067c0:	f1ba 0f00 	cmp.w	sl, #0
 80067c4:	d048      	beq.n	8006858 <__gethex+0x3f4>
 80067c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d015      	beq.n	80067fa <__gethex+0x396>
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d017      	beq.n	8006802 <__gethex+0x39e>
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d109      	bne.n	80067ea <__gethex+0x386>
 80067d6:	f01a 0f02 	tst.w	sl, #2
 80067da:	d006      	beq.n	80067ea <__gethex+0x386>
 80067dc:	f8d9 0000 	ldr.w	r0, [r9]
 80067e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80067e4:	f01a 0f01 	tst.w	sl, #1
 80067e8:	d10e      	bne.n	8006808 <__gethex+0x3a4>
 80067ea:	f047 0710 	orr.w	r7, r7, #16
 80067ee:	e033      	b.n	8006858 <__gethex+0x3f4>
 80067f0:	f04f 0a01 	mov.w	sl, #1
 80067f4:	e7d0      	b.n	8006798 <__gethex+0x334>
 80067f6:	2701      	movs	r7, #1
 80067f8:	e7e2      	b.n	80067c0 <__gethex+0x35c>
 80067fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067fc:	f1c3 0301 	rsb	r3, r3, #1
 8006800:	9315      	str	r3, [sp, #84]	; 0x54
 8006802:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <__gethex+0x386>
 8006808:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800680c:	f104 0314 	add.w	r3, r4, #20
 8006810:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006814:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006818:	f04f 0c00 	mov.w	ip, #0
 800681c:	4618      	mov	r0, r3
 800681e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006822:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006826:	d01c      	beq.n	8006862 <__gethex+0x3fe>
 8006828:	3201      	adds	r2, #1
 800682a:	6002      	str	r2, [r0, #0]
 800682c:	2f02      	cmp	r7, #2
 800682e:	f104 0314 	add.w	r3, r4, #20
 8006832:	d13f      	bne.n	80068b4 <__gethex+0x450>
 8006834:	f8d8 2000 	ldr.w	r2, [r8]
 8006838:	3a01      	subs	r2, #1
 800683a:	42b2      	cmp	r2, r6
 800683c:	d10a      	bne.n	8006854 <__gethex+0x3f0>
 800683e:	1171      	asrs	r1, r6, #5
 8006840:	2201      	movs	r2, #1
 8006842:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006846:	f006 061f 	and.w	r6, r6, #31
 800684a:	fa02 f606 	lsl.w	r6, r2, r6
 800684e:	421e      	tst	r6, r3
 8006850:	bf18      	it	ne
 8006852:	4617      	movne	r7, r2
 8006854:	f047 0720 	orr.w	r7, r7, #32
 8006858:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800685a:	601c      	str	r4, [r3, #0]
 800685c:	9b04      	ldr	r3, [sp, #16]
 800685e:	601d      	str	r5, [r3, #0]
 8006860:	e695      	b.n	800658e <__gethex+0x12a>
 8006862:	4299      	cmp	r1, r3
 8006864:	f843 cc04 	str.w	ip, [r3, #-4]
 8006868:	d8d8      	bhi.n	800681c <__gethex+0x3b8>
 800686a:	68a3      	ldr	r3, [r4, #8]
 800686c:	459b      	cmp	fp, r3
 800686e:	db19      	blt.n	80068a4 <__gethex+0x440>
 8006870:	6861      	ldr	r1, [r4, #4]
 8006872:	ee18 0a10 	vmov	r0, s16
 8006876:	3101      	adds	r1, #1
 8006878:	f000 f928 	bl	8006acc <_Balloc>
 800687c:	4681      	mov	r9, r0
 800687e:	b918      	cbnz	r0, 8006888 <__gethex+0x424>
 8006880:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <__gethex+0x488>)
 8006882:	4602      	mov	r2, r0
 8006884:	2184      	movs	r1, #132	; 0x84
 8006886:	e6a8      	b.n	80065da <__gethex+0x176>
 8006888:	6922      	ldr	r2, [r4, #16]
 800688a:	3202      	adds	r2, #2
 800688c:	f104 010c 	add.w	r1, r4, #12
 8006890:	0092      	lsls	r2, r2, #2
 8006892:	300c      	adds	r0, #12
 8006894:	f000 f90c 	bl	8006ab0 <memcpy>
 8006898:	4621      	mov	r1, r4
 800689a:	ee18 0a10 	vmov	r0, s16
 800689e:	f000 f955 	bl	8006b4c <_Bfree>
 80068a2:	464c      	mov	r4, r9
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068ac:	6122      	str	r2, [r4, #16]
 80068ae:	2201      	movs	r2, #1
 80068b0:	615a      	str	r2, [r3, #20]
 80068b2:	e7bb      	b.n	800682c <__gethex+0x3c8>
 80068b4:	6922      	ldr	r2, [r4, #16]
 80068b6:	455a      	cmp	r2, fp
 80068b8:	dd0b      	ble.n	80068d2 <__gethex+0x46e>
 80068ba:	2101      	movs	r1, #1
 80068bc:	4620      	mov	r0, r4
 80068be:	f7ff fd69 	bl	8006394 <rshift>
 80068c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068c6:	3501      	adds	r5, #1
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	f6ff aed0 	blt.w	800666e <__gethex+0x20a>
 80068ce:	2701      	movs	r7, #1
 80068d0:	e7c0      	b.n	8006854 <__gethex+0x3f0>
 80068d2:	f016 061f 	ands.w	r6, r6, #31
 80068d6:	d0fa      	beq.n	80068ce <__gethex+0x46a>
 80068d8:	4453      	add	r3, sl
 80068da:	f1c6 0620 	rsb	r6, r6, #32
 80068de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80068e2:	f000 f9e5 	bl	8006cb0 <__hi0bits>
 80068e6:	42b0      	cmp	r0, r6
 80068e8:	dbe7      	blt.n	80068ba <__gethex+0x456>
 80068ea:	e7f0      	b.n	80068ce <__gethex+0x46a>
 80068ec:	080097d8 	.word	0x080097d8

080068f0 <L_shift>:
 80068f0:	f1c2 0208 	rsb	r2, r2, #8
 80068f4:	0092      	lsls	r2, r2, #2
 80068f6:	b570      	push	{r4, r5, r6, lr}
 80068f8:	f1c2 0620 	rsb	r6, r2, #32
 80068fc:	6843      	ldr	r3, [r0, #4]
 80068fe:	6804      	ldr	r4, [r0, #0]
 8006900:	fa03 f506 	lsl.w	r5, r3, r6
 8006904:	432c      	orrs	r4, r5
 8006906:	40d3      	lsrs	r3, r2
 8006908:	6004      	str	r4, [r0, #0]
 800690a:	f840 3f04 	str.w	r3, [r0, #4]!
 800690e:	4288      	cmp	r0, r1
 8006910:	d3f4      	bcc.n	80068fc <L_shift+0xc>
 8006912:	bd70      	pop	{r4, r5, r6, pc}

08006914 <__match>:
 8006914:	b530      	push	{r4, r5, lr}
 8006916:	6803      	ldr	r3, [r0, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800691e:	b914      	cbnz	r4, 8006926 <__match+0x12>
 8006920:	6003      	str	r3, [r0, #0]
 8006922:	2001      	movs	r0, #1
 8006924:	bd30      	pop	{r4, r5, pc}
 8006926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800692a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800692e:	2d19      	cmp	r5, #25
 8006930:	bf98      	it	ls
 8006932:	3220      	addls	r2, #32
 8006934:	42a2      	cmp	r2, r4
 8006936:	d0f0      	beq.n	800691a <__match+0x6>
 8006938:	2000      	movs	r0, #0
 800693a:	e7f3      	b.n	8006924 <__match+0x10>

0800693c <__hexnan>:
 800693c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006940:	680b      	ldr	r3, [r1, #0]
 8006942:	115e      	asrs	r6, r3, #5
 8006944:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006948:	f013 031f 	ands.w	r3, r3, #31
 800694c:	b087      	sub	sp, #28
 800694e:	bf18      	it	ne
 8006950:	3604      	addne	r6, #4
 8006952:	2500      	movs	r5, #0
 8006954:	1f37      	subs	r7, r6, #4
 8006956:	4690      	mov	r8, r2
 8006958:	6802      	ldr	r2, [r0, #0]
 800695a:	9301      	str	r3, [sp, #4]
 800695c:	4682      	mov	sl, r0
 800695e:	f846 5c04 	str.w	r5, [r6, #-4]
 8006962:	46b9      	mov	r9, r7
 8006964:	463c      	mov	r4, r7
 8006966:	9502      	str	r5, [sp, #8]
 8006968:	46ab      	mov	fp, r5
 800696a:	7851      	ldrb	r1, [r2, #1]
 800696c:	1c53      	adds	r3, r2, #1
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	b341      	cbz	r1, 80069c4 <__hexnan+0x88>
 8006972:	4608      	mov	r0, r1
 8006974:	9205      	str	r2, [sp, #20]
 8006976:	9104      	str	r1, [sp, #16]
 8006978:	f7ff fd5e 	bl	8006438 <__hexdig_fun>
 800697c:	2800      	cmp	r0, #0
 800697e:	d14f      	bne.n	8006a20 <__hexnan+0xe4>
 8006980:	9904      	ldr	r1, [sp, #16]
 8006982:	9a05      	ldr	r2, [sp, #20]
 8006984:	2920      	cmp	r1, #32
 8006986:	d818      	bhi.n	80069ba <__hexnan+0x7e>
 8006988:	9b02      	ldr	r3, [sp, #8]
 800698a:	459b      	cmp	fp, r3
 800698c:	dd13      	ble.n	80069b6 <__hexnan+0x7a>
 800698e:	454c      	cmp	r4, r9
 8006990:	d206      	bcs.n	80069a0 <__hexnan+0x64>
 8006992:	2d07      	cmp	r5, #7
 8006994:	dc04      	bgt.n	80069a0 <__hexnan+0x64>
 8006996:	462a      	mov	r2, r5
 8006998:	4649      	mov	r1, r9
 800699a:	4620      	mov	r0, r4
 800699c:	f7ff ffa8 	bl	80068f0 <L_shift>
 80069a0:	4544      	cmp	r4, r8
 80069a2:	d950      	bls.n	8006a46 <__hexnan+0x10a>
 80069a4:	2300      	movs	r3, #0
 80069a6:	f1a4 0904 	sub.w	r9, r4, #4
 80069aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80069ae:	f8cd b008 	str.w	fp, [sp, #8]
 80069b2:	464c      	mov	r4, r9
 80069b4:	461d      	mov	r5, r3
 80069b6:	9a03      	ldr	r2, [sp, #12]
 80069b8:	e7d7      	b.n	800696a <__hexnan+0x2e>
 80069ba:	2929      	cmp	r1, #41	; 0x29
 80069bc:	d156      	bne.n	8006a6c <__hexnan+0x130>
 80069be:	3202      	adds	r2, #2
 80069c0:	f8ca 2000 	str.w	r2, [sl]
 80069c4:	f1bb 0f00 	cmp.w	fp, #0
 80069c8:	d050      	beq.n	8006a6c <__hexnan+0x130>
 80069ca:	454c      	cmp	r4, r9
 80069cc:	d206      	bcs.n	80069dc <__hexnan+0xa0>
 80069ce:	2d07      	cmp	r5, #7
 80069d0:	dc04      	bgt.n	80069dc <__hexnan+0xa0>
 80069d2:	462a      	mov	r2, r5
 80069d4:	4649      	mov	r1, r9
 80069d6:	4620      	mov	r0, r4
 80069d8:	f7ff ff8a 	bl	80068f0 <L_shift>
 80069dc:	4544      	cmp	r4, r8
 80069de:	d934      	bls.n	8006a4a <__hexnan+0x10e>
 80069e0:	f1a8 0204 	sub.w	r2, r8, #4
 80069e4:	4623      	mov	r3, r4
 80069e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80069ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80069ee:	429f      	cmp	r7, r3
 80069f0:	d2f9      	bcs.n	80069e6 <__hexnan+0xaa>
 80069f2:	1b3b      	subs	r3, r7, r4
 80069f4:	f023 0303 	bic.w	r3, r3, #3
 80069f8:	3304      	adds	r3, #4
 80069fa:	3401      	adds	r4, #1
 80069fc:	3e03      	subs	r6, #3
 80069fe:	42b4      	cmp	r4, r6
 8006a00:	bf88      	it	hi
 8006a02:	2304      	movhi	r3, #4
 8006a04:	4443      	add	r3, r8
 8006a06:	2200      	movs	r2, #0
 8006a08:	f843 2b04 	str.w	r2, [r3], #4
 8006a0c:	429f      	cmp	r7, r3
 8006a0e:	d2fb      	bcs.n	8006a08 <__hexnan+0xcc>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	b91b      	cbnz	r3, 8006a1c <__hexnan+0xe0>
 8006a14:	4547      	cmp	r7, r8
 8006a16:	d127      	bne.n	8006a68 <__hexnan+0x12c>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	603b      	str	r3, [r7, #0]
 8006a1c:	2005      	movs	r0, #5
 8006a1e:	e026      	b.n	8006a6e <__hexnan+0x132>
 8006a20:	3501      	adds	r5, #1
 8006a22:	2d08      	cmp	r5, #8
 8006a24:	f10b 0b01 	add.w	fp, fp, #1
 8006a28:	dd06      	ble.n	8006a38 <__hexnan+0xfc>
 8006a2a:	4544      	cmp	r4, r8
 8006a2c:	d9c3      	bls.n	80069b6 <__hexnan+0x7a>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a34:	2501      	movs	r5, #1
 8006a36:	3c04      	subs	r4, #4
 8006a38:	6822      	ldr	r2, [r4, #0]
 8006a3a:	f000 000f 	and.w	r0, r0, #15
 8006a3e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006a42:	6022      	str	r2, [r4, #0]
 8006a44:	e7b7      	b.n	80069b6 <__hexnan+0x7a>
 8006a46:	2508      	movs	r5, #8
 8006a48:	e7b5      	b.n	80069b6 <__hexnan+0x7a>
 8006a4a:	9b01      	ldr	r3, [sp, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0df      	beq.n	8006a10 <__hexnan+0xd4>
 8006a50:	f04f 32ff 	mov.w	r2, #4294967295
 8006a54:	f1c3 0320 	rsb	r3, r3, #32
 8006a58:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006a60:	401a      	ands	r2, r3
 8006a62:	f846 2c04 	str.w	r2, [r6, #-4]
 8006a66:	e7d3      	b.n	8006a10 <__hexnan+0xd4>
 8006a68:	3f04      	subs	r7, #4
 8006a6a:	e7d1      	b.n	8006a10 <__hexnan+0xd4>
 8006a6c:	2004      	movs	r0, #4
 8006a6e:	b007      	add	sp, #28
 8006a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a74 <_localeconv_r>:
 8006a74:	4800      	ldr	r0, [pc, #0]	; (8006a78 <_localeconv_r+0x4>)
 8006a76:	4770      	bx	lr
 8006a78:	20000164 	.word	0x20000164

08006a7c <malloc>:
 8006a7c:	4b02      	ldr	r3, [pc, #8]	; (8006a88 <malloc+0xc>)
 8006a7e:	4601      	mov	r1, r0
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	f000 bd67 	b.w	8007554 <_malloc_r>
 8006a86:	bf00      	nop
 8006a88:	2000000c 	.word	0x2000000c

08006a8c <__ascii_mbtowc>:
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	b901      	cbnz	r1, 8006a92 <__ascii_mbtowc+0x6>
 8006a90:	a901      	add	r1, sp, #4
 8006a92:	b142      	cbz	r2, 8006aa6 <__ascii_mbtowc+0x1a>
 8006a94:	b14b      	cbz	r3, 8006aaa <__ascii_mbtowc+0x1e>
 8006a96:	7813      	ldrb	r3, [r2, #0]
 8006a98:	600b      	str	r3, [r1, #0]
 8006a9a:	7812      	ldrb	r2, [r2, #0]
 8006a9c:	1e10      	subs	r0, r2, #0
 8006a9e:	bf18      	it	ne
 8006aa0:	2001      	movne	r0, #1
 8006aa2:	b002      	add	sp, #8
 8006aa4:	4770      	bx	lr
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	e7fb      	b.n	8006aa2 <__ascii_mbtowc+0x16>
 8006aaa:	f06f 0001 	mvn.w	r0, #1
 8006aae:	e7f8      	b.n	8006aa2 <__ascii_mbtowc+0x16>

08006ab0 <memcpy>:
 8006ab0:	440a      	add	r2, r1
 8006ab2:	4291      	cmp	r1, r2
 8006ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ab8:	d100      	bne.n	8006abc <memcpy+0xc>
 8006aba:	4770      	bx	lr
 8006abc:	b510      	push	{r4, lr}
 8006abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ac6:	4291      	cmp	r1, r2
 8006ac8:	d1f9      	bne.n	8006abe <memcpy+0xe>
 8006aca:	bd10      	pop	{r4, pc}

08006acc <_Balloc>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	460d      	mov	r5, r1
 8006ad4:	b976      	cbnz	r6, 8006af4 <_Balloc+0x28>
 8006ad6:	2010      	movs	r0, #16
 8006ad8:	f7ff ffd0 	bl	8006a7c <malloc>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6260      	str	r0, [r4, #36]	; 0x24
 8006ae0:	b920      	cbnz	r0, 8006aec <_Balloc+0x20>
 8006ae2:	4b18      	ldr	r3, [pc, #96]	; (8006b44 <_Balloc+0x78>)
 8006ae4:	4818      	ldr	r0, [pc, #96]	; (8006b48 <_Balloc+0x7c>)
 8006ae6:	2166      	movs	r1, #102	; 0x66
 8006ae8:	f000 ff40 	bl	800796c <__assert_func>
 8006aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006af0:	6006      	str	r6, [r0, #0]
 8006af2:	60c6      	str	r6, [r0, #12]
 8006af4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006af6:	68f3      	ldr	r3, [r6, #12]
 8006af8:	b183      	cbz	r3, 8006b1c <_Balloc+0x50>
 8006afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b02:	b9b8      	cbnz	r0, 8006b34 <_Balloc+0x68>
 8006b04:	2101      	movs	r1, #1
 8006b06:	fa01 f605 	lsl.w	r6, r1, r5
 8006b0a:	1d72      	adds	r2, r6, #5
 8006b0c:	0092      	lsls	r2, r2, #2
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f000 fc9d 	bl	800744e <_calloc_r>
 8006b14:	b160      	cbz	r0, 8006b30 <_Balloc+0x64>
 8006b16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b1a:	e00e      	b.n	8006b3a <_Balloc+0x6e>
 8006b1c:	2221      	movs	r2, #33	; 0x21
 8006b1e:	2104      	movs	r1, #4
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 fc94 	bl	800744e <_calloc_r>
 8006b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b28:	60f0      	str	r0, [r6, #12]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e4      	bne.n	8006afa <_Balloc+0x2e>
 8006b30:	2000      	movs	r0, #0
 8006b32:	bd70      	pop	{r4, r5, r6, pc}
 8006b34:	6802      	ldr	r2, [r0, #0]
 8006b36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b40:	e7f7      	b.n	8006b32 <_Balloc+0x66>
 8006b42:	bf00      	nop
 8006b44:	08009766 	.word	0x08009766
 8006b48:	08009864 	.word	0x08009864

08006b4c <_Bfree>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b50:	4605      	mov	r5, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	b976      	cbnz	r6, 8006b74 <_Bfree+0x28>
 8006b56:	2010      	movs	r0, #16
 8006b58:	f7ff ff90 	bl	8006a7c <malloc>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	6268      	str	r0, [r5, #36]	; 0x24
 8006b60:	b920      	cbnz	r0, 8006b6c <_Bfree+0x20>
 8006b62:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <_Bfree+0x3c>)
 8006b64:	4809      	ldr	r0, [pc, #36]	; (8006b8c <_Bfree+0x40>)
 8006b66:	218a      	movs	r1, #138	; 0x8a
 8006b68:	f000 ff00 	bl	800796c <__assert_func>
 8006b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b70:	6006      	str	r6, [r0, #0]
 8006b72:	60c6      	str	r6, [r0, #12]
 8006b74:	b13c      	cbz	r4, 8006b86 <_Bfree+0x3a>
 8006b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b78:	6862      	ldr	r2, [r4, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b80:	6021      	str	r1, [r4, #0]
 8006b82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	08009766 	.word	0x08009766
 8006b8c:	08009864 	.word	0x08009864

08006b90 <__multadd>:
 8006b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b94:	690d      	ldr	r5, [r1, #16]
 8006b96:	4607      	mov	r7, r0
 8006b98:	460c      	mov	r4, r1
 8006b9a:	461e      	mov	r6, r3
 8006b9c:	f101 0c14 	add.w	ip, r1, #20
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	f8dc 3000 	ldr.w	r3, [ip]
 8006ba6:	b299      	uxth	r1, r3
 8006ba8:	fb02 6101 	mla	r1, r2, r1, r6
 8006bac:	0c1e      	lsrs	r6, r3, #16
 8006bae:	0c0b      	lsrs	r3, r1, #16
 8006bb0:	fb02 3306 	mla	r3, r2, r6, r3
 8006bb4:	b289      	uxth	r1, r1
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bbc:	4285      	cmp	r5, r0
 8006bbe:	f84c 1b04 	str.w	r1, [ip], #4
 8006bc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bc6:	dcec      	bgt.n	8006ba2 <__multadd+0x12>
 8006bc8:	b30e      	cbz	r6, 8006c0e <__multadd+0x7e>
 8006bca:	68a3      	ldr	r3, [r4, #8]
 8006bcc:	42ab      	cmp	r3, r5
 8006bce:	dc19      	bgt.n	8006c04 <__multadd+0x74>
 8006bd0:	6861      	ldr	r1, [r4, #4]
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	3101      	adds	r1, #1
 8006bd6:	f7ff ff79 	bl	8006acc <_Balloc>
 8006bda:	4680      	mov	r8, r0
 8006bdc:	b928      	cbnz	r0, 8006bea <__multadd+0x5a>
 8006bde:	4602      	mov	r2, r0
 8006be0:	4b0c      	ldr	r3, [pc, #48]	; (8006c14 <__multadd+0x84>)
 8006be2:	480d      	ldr	r0, [pc, #52]	; (8006c18 <__multadd+0x88>)
 8006be4:	21b5      	movs	r1, #181	; 0xb5
 8006be6:	f000 fec1 	bl	800796c <__assert_func>
 8006bea:	6922      	ldr	r2, [r4, #16]
 8006bec:	3202      	adds	r2, #2
 8006bee:	f104 010c 	add.w	r1, r4, #12
 8006bf2:	0092      	lsls	r2, r2, #2
 8006bf4:	300c      	adds	r0, #12
 8006bf6:	f7ff ff5b 	bl	8006ab0 <memcpy>
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	f7ff ffa5 	bl	8006b4c <_Bfree>
 8006c02:	4644      	mov	r4, r8
 8006c04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c08:	3501      	adds	r5, #1
 8006c0a:	615e      	str	r6, [r3, #20]
 8006c0c:	6125      	str	r5, [r4, #16]
 8006c0e:	4620      	mov	r0, r4
 8006c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c14:	080097d8 	.word	0x080097d8
 8006c18:	08009864 	.word	0x08009864

08006c1c <__s2b>:
 8006c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c20:	460c      	mov	r4, r1
 8006c22:	4615      	mov	r5, r2
 8006c24:	461f      	mov	r7, r3
 8006c26:	2209      	movs	r2, #9
 8006c28:	3308      	adds	r3, #8
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c30:	2100      	movs	r1, #0
 8006c32:	2201      	movs	r2, #1
 8006c34:	429a      	cmp	r2, r3
 8006c36:	db09      	blt.n	8006c4c <__s2b+0x30>
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f7ff ff47 	bl	8006acc <_Balloc>
 8006c3e:	b940      	cbnz	r0, 8006c52 <__s2b+0x36>
 8006c40:	4602      	mov	r2, r0
 8006c42:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <__s2b+0x8c>)
 8006c44:	4819      	ldr	r0, [pc, #100]	; (8006cac <__s2b+0x90>)
 8006c46:	21ce      	movs	r1, #206	; 0xce
 8006c48:	f000 fe90 	bl	800796c <__assert_func>
 8006c4c:	0052      	lsls	r2, r2, #1
 8006c4e:	3101      	adds	r1, #1
 8006c50:	e7f0      	b.n	8006c34 <__s2b+0x18>
 8006c52:	9b08      	ldr	r3, [sp, #32]
 8006c54:	6143      	str	r3, [r0, #20]
 8006c56:	2d09      	cmp	r5, #9
 8006c58:	f04f 0301 	mov.w	r3, #1
 8006c5c:	6103      	str	r3, [r0, #16]
 8006c5e:	dd16      	ble.n	8006c8e <__s2b+0x72>
 8006c60:	f104 0909 	add.w	r9, r4, #9
 8006c64:	46c8      	mov	r8, r9
 8006c66:	442c      	add	r4, r5
 8006c68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c6c:	4601      	mov	r1, r0
 8006c6e:	3b30      	subs	r3, #48	; 0x30
 8006c70:	220a      	movs	r2, #10
 8006c72:	4630      	mov	r0, r6
 8006c74:	f7ff ff8c 	bl	8006b90 <__multadd>
 8006c78:	45a0      	cmp	r8, r4
 8006c7a:	d1f5      	bne.n	8006c68 <__s2b+0x4c>
 8006c7c:	f1a5 0408 	sub.w	r4, r5, #8
 8006c80:	444c      	add	r4, r9
 8006c82:	1b2d      	subs	r5, r5, r4
 8006c84:	1963      	adds	r3, r4, r5
 8006c86:	42bb      	cmp	r3, r7
 8006c88:	db04      	blt.n	8006c94 <__s2b+0x78>
 8006c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8e:	340a      	adds	r4, #10
 8006c90:	2509      	movs	r5, #9
 8006c92:	e7f6      	b.n	8006c82 <__s2b+0x66>
 8006c94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c98:	4601      	mov	r1, r0
 8006c9a:	3b30      	subs	r3, #48	; 0x30
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	f7ff ff76 	bl	8006b90 <__multadd>
 8006ca4:	e7ee      	b.n	8006c84 <__s2b+0x68>
 8006ca6:	bf00      	nop
 8006ca8:	080097d8 	.word	0x080097d8
 8006cac:	08009864 	.word	0x08009864

08006cb0 <__hi0bits>:
 8006cb0:	0c03      	lsrs	r3, r0, #16
 8006cb2:	041b      	lsls	r3, r3, #16
 8006cb4:	b9d3      	cbnz	r3, 8006cec <__hi0bits+0x3c>
 8006cb6:	0400      	lsls	r0, r0, #16
 8006cb8:	2310      	movs	r3, #16
 8006cba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006cbe:	bf04      	itt	eq
 8006cc0:	0200      	lsleq	r0, r0, #8
 8006cc2:	3308      	addeq	r3, #8
 8006cc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006cc8:	bf04      	itt	eq
 8006cca:	0100      	lsleq	r0, r0, #4
 8006ccc:	3304      	addeq	r3, #4
 8006cce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006cd2:	bf04      	itt	eq
 8006cd4:	0080      	lsleq	r0, r0, #2
 8006cd6:	3302      	addeq	r3, #2
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	db05      	blt.n	8006ce8 <__hi0bits+0x38>
 8006cdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ce0:	f103 0301 	add.w	r3, r3, #1
 8006ce4:	bf08      	it	eq
 8006ce6:	2320      	moveq	r3, #32
 8006ce8:	4618      	mov	r0, r3
 8006cea:	4770      	bx	lr
 8006cec:	2300      	movs	r3, #0
 8006cee:	e7e4      	b.n	8006cba <__hi0bits+0xa>

08006cf0 <__lo0bits>:
 8006cf0:	6803      	ldr	r3, [r0, #0]
 8006cf2:	f013 0207 	ands.w	r2, r3, #7
 8006cf6:	4601      	mov	r1, r0
 8006cf8:	d00b      	beq.n	8006d12 <__lo0bits+0x22>
 8006cfa:	07da      	lsls	r2, r3, #31
 8006cfc:	d423      	bmi.n	8006d46 <__lo0bits+0x56>
 8006cfe:	0798      	lsls	r0, r3, #30
 8006d00:	bf49      	itett	mi
 8006d02:	085b      	lsrmi	r3, r3, #1
 8006d04:	089b      	lsrpl	r3, r3, #2
 8006d06:	2001      	movmi	r0, #1
 8006d08:	600b      	strmi	r3, [r1, #0]
 8006d0a:	bf5c      	itt	pl
 8006d0c:	600b      	strpl	r3, [r1, #0]
 8006d0e:	2002      	movpl	r0, #2
 8006d10:	4770      	bx	lr
 8006d12:	b298      	uxth	r0, r3
 8006d14:	b9a8      	cbnz	r0, 8006d42 <__lo0bits+0x52>
 8006d16:	0c1b      	lsrs	r3, r3, #16
 8006d18:	2010      	movs	r0, #16
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	b90a      	cbnz	r2, 8006d22 <__lo0bits+0x32>
 8006d1e:	3008      	adds	r0, #8
 8006d20:	0a1b      	lsrs	r3, r3, #8
 8006d22:	071a      	lsls	r2, r3, #28
 8006d24:	bf04      	itt	eq
 8006d26:	091b      	lsreq	r3, r3, #4
 8006d28:	3004      	addeq	r0, #4
 8006d2a:	079a      	lsls	r2, r3, #30
 8006d2c:	bf04      	itt	eq
 8006d2e:	089b      	lsreq	r3, r3, #2
 8006d30:	3002      	addeq	r0, #2
 8006d32:	07da      	lsls	r2, r3, #31
 8006d34:	d403      	bmi.n	8006d3e <__lo0bits+0x4e>
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	f100 0001 	add.w	r0, r0, #1
 8006d3c:	d005      	beq.n	8006d4a <__lo0bits+0x5a>
 8006d3e:	600b      	str	r3, [r1, #0]
 8006d40:	4770      	bx	lr
 8006d42:	4610      	mov	r0, r2
 8006d44:	e7e9      	b.n	8006d1a <__lo0bits+0x2a>
 8006d46:	2000      	movs	r0, #0
 8006d48:	4770      	bx	lr
 8006d4a:	2020      	movs	r0, #32
 8006d4c:	4770      	bx	lr
	...

08006d50 <__i2b>:
 8006d50:	b510      	push	{r4, lr}
 8006d52:	460c      	mov	r4, r1
 8006d54:	2101      	movs	r1, #1
 8006d56:	f7ff feb9 	bl	8006acc <_Balloc>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	b928      	cbnz	r0, 8006d6a <__i2b+0x1a>
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <__i2b+0x24>)
 8006d60:	4805      	ldr	r0, [pc, #20]	; (8006d78 <__i2b+0x28>)
 8006d62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d66:	f000 fe01 	bl	800796c <__assert_func>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	6144      	str	r4, [r0, #20]
 8006d6e:	6103      	str	r3, [r0, #16]
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	bf00      	nop
 8006d74:	080097d8 	.word	0x080097d8
 8006d78:	08009864 	.word	0x08009864

08006d7c <__multiply>:
 8006d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d80:	4691      	mov	r9, r2
 8006d82:	690a      	ldr	r2, [r1, #16]
 8006d84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	bfb8      	it	lt
 8006d8c:	460b      	movlt	r3, r1
 8006d8e:	460c      	mov	r4, r1
 8006d90:	bfbc      	itt	lt
 8006d92:	464c      	movlt	r4, r9
 8006d94:	4699      	movlt	r9, r3
 8006d96:	6927      	ldr	r7, [r4, #16]
 8006d98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d9c:	68a3      	ldr	r3, [r4, #8]
 8006d9e:	6861      	ldr	r1, [r4, #4]
 8006da0:	eb07 060a 	add.w	r6, r7, sl
 8006da4:	42b3      	cmp	r3, r6
 8006da6:	b085      	sub	sp, #20
 8006da8:	bfb8      	it	lt
 8006daa:	3101      	addlt	r1, #1
 8006dac:	f7ff fe8e 	bl	8006acc <_Balloc>
 8006db0:	b930      	cbnz	r0, 8006dc0 <__multiply+0x44>
 8006db2:	4602      	mov	r2, r0
 8006db4:	4b44      	ldr	r3, [pc, #272]	; (8006ec8 <__multiply+0x14c>)
 8006db6:	4845      	ldr	r0, [pc, #276]	; (8006ecc <__multiply+0x150>)
 8006db8:	f240 115d 	movw	r1, #349	; 0x15d
 8006dbc:	f000 fdd6 	bl	800796c <__assert_func>
 8006dc0:	f100 0514 	add.w	r5, r0, #20
 8006dc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006dc8:	462b      	mov	r3, r5
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4543      	cmp	r3, r8
 8006dce:	d321      	bcc.n	8006e14 <__multiply+0x98>
 8006dd0:	f104 0314 	add.w	r3, r4, #20
 8006dd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006dd8:	f109 0314 	add.w	r3, r9, #20
 8006ddc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006de0:	9202      	str	r2, [sp, #8]
 8006de2:	1b3a      	subs	r2, r7, r4
 8006de4:	3a15      	subs	r2, #21
 8006de6:	f022 0203 	bic.w	r2, r2, #3
 8006dea:	3204      	adds	r2, #4
 8006dec:	f104 0115 	add.w	r1, r4, #21
 8006df0:	428f      	cmp	r7, r1
 8006df2:	bf38      	it	cc
 8006df4:	2204      	movcc	r2, #4
 8006df6:	9201      	str	r2, [sp, #4]
 8006df8:	9a02      	ldr	r2, [sp, #8]
 8006dfa:	9303      	str	r3, [sp, #12]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d80c      	bhi.n	8006e1a <__multiply+0x9e>
 8006e00:	2e00      	cmp	r6, #0
 8006e02:	dd03      	ble.n	8006e0c <__multiply+0x90>
 8006e04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d05a      	beq.n	8006ec2 <__multiply+0x146>
 8006e0c:	6106      	str	r6, [r0, #16]
 8006e0e:	b005      	add	sp, #20
 8006e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e14:	f843 2b04 	str.w	r2, [r3], #4
 8006e18:	e7d8      	b.n	8006dcc <__multiply+0x50>
 8006e1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e1e:	f1ba 0f00 	cmp.w	sl, #0
 8006e22:	d024      	beq.n	8006e6e <__multiply+0xf2>
 8006e24:	f104 0e14 	add.w	lr, r4, #20
 8006e28:	46a9      	mov	r9, r5
 8006e2a:	f04f 0c00 	mov.w	ip, #0
 8006e2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e32:	f8d9 1000 	ldr.w	r1, [r9]
 8006e36:	fa1f fb82 	uxth.w	fp, r2
 8006e3a:	b289      	uxth	r1, r1
 8006e3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006e44:	f8d9 2000 	ldr.w	r2, [r9]
 8006e48:	4461      	add	r1, ip
 8006e4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006e52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e56:	b289      	uxth	r1, r1
 8006e58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e5c:	4577      	cmp	r7, lr
 8006e5e:	f849 1b04 	str.w	r1, [r9], #4
 8006e62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e66:	d8e2      	bhi.n	8006e2e <__multiply+0xb2>
 8006e68:	9a01      	ldr	r2, [sp, #4]
 8006e6a:	f845 c002 	str.w	ip, [r5, r2]
 8006e6e:	9a03      	ldr	r2, [sp, #12]
 8006e70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e74:	3304      	adds	r3, #4
 8006e76:	f1b9 0f00 	cmp.w	r9, #0
 8006e7a:	d020      	beq.n	8006ebe <__multiply+0x142>
 8006e7c:	6829      	ldr	r1, [r5, #0]
 8006e7e:	f104 0c14 	add.w	ip, r4, #20
 8006e82:	46ae      	mov	lr, r5
 8006e84:	f04f 0a00 	mov.w	sl, #0
 8006e88:	f8bc b000 	ldrh.w	fp, [ip]
 8006e8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e90:	fb09 220b 	mla	r2, r9, fp, r2
 8006e94:	4492      	add	sl, r2
 8006e96:	b289      	uxth	r1, r1
 8006e98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006e9c:	f84e 1b04 	str.w	r1, [lr], #4
 8006ea0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ea4:	f8be 1000 	ldrh.w	r1, [lr]
 8006ea8:	0c12      	lsrs	r2, r2, #16
 8006eaa:	fb09 1102 	mla	r1, r9, r2, r1
 8006eae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006eb2:	4567      	cmp	r7, ip
 8006eb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006eb8:	d8e6      	bhi.n	8006e88 <__multiply+0x10c>
 8006eba:	9a01      	ldr	r2, [sp, #4]
 8006ebc:	50a9      	str	r1, [r5, r2]
 8006ebe:	3504      	adds	r5, #4
 8006ec0:	e79a      	b.n	8006df8 <__multiply+0x7c>
 8006ec2:	3e01      	subs	r6, #1
 8006ec4:	e79c      	b.n	8006e00 <__multiply+0x84>
 8006ec6:	bf00      	nop
 8006ec8:	080097d8 	.word	0x080097d8
 8006ecc:	08009864 	.word	0x08009864

08006ed0 <__pow5mult>:
 8006ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed4:	4615      	mov	r5, r2
 8006ed6:	f012 0203 	ands.w	r2, r2, #3
 8006eda:	4606      	mov	r6, r0
 8006edc:	460f      	mov	r7, r1
 8006ede:	d007      	beq.n	8006ef0 <__pow5mult+0x20>
 8006ee0:	4c25      	ldr	r4, [pc, #148]	; (8006f78 <__pow5mult+0xa8>)
 8006ee2:	3a01      	subs	r2, #1
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006eea:	f7ff fe51 	bl	8006b90 <__multadd>
 8006eee:	4607      	mov	r7, r0
 8006ef0:	10ad      	asrs	r5, r5, #2
 8006ef2:	d03d      	beq.n	8006f70 <__pow5mult+0xa0>
 8006ef4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ef6:	b97c      	cbnz	r4, 8006f18 <__pow5mult+0x48>
 8006ef8:	2010      	movs	r0, #16
 8006efa:	f7ff fdbf 	bl	8006a7c <malloc>
 8006efe:	4602      	mov	r2, r0
 8006f00:	6270      	str	r0, [r6, #36]	; 0x24
 8006f02:	b928      	cbnz	r0, 8006f10 <__pow5mult+0x40>
 8006f04:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <__pow5mult+0xac>)
 8006f06:	481e      	ldr	r0, [pc, #120]	; (8006f80 <__pow5mult+0xb0>)
 8006f08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f0c:	f000 fd2e 	bl	800796c <__assert_func>
 8006f10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f14:	6004      	str	r4, [r0, #0]
 8006f16:	60c4      	str	r4, [r0, #12]
 8006f18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f20:	b94c      	cbnz	r4, 8006f36 <__pow5mult+0x66>
 8006f22:	f240 2171 	movw	r1, #625	; 0x271
 8006f26:	4630      	mov	r0, r6
 8006f28:	f7ff ff12 	bl	8006d50 <__i2b>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f32:	4604      	mov	r4, r0
 8006f34:	6003      	str	r3, [r0, #0]
 8006f36:	f04f 0900 	mov.w	r9, #0
 8006f3a:	07eb      	lsls	r3, r5, #31
 8006f3c:	d50a      	bpl.n	8006f54 <__pow5mult+0x84>
 8006f3e:	4639      	mov	r1, r7
 8006f40:	4622      	mov	r2, r4
 8006f42:	4630      	mov	r0, r6
 8006f44:	f7ff ff1a 	bl	8006d7c <__multiply>
 8006f48:	4639      	mov	r1, r7
 8006f4a:	4680      	mov	r8, r0
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f7ff fdfd 	bl	8006b4c <_Bfree>
 8006f52:	4647      	mov	r7, r8
 8006f54:	106d      	asrs	r5, r5, #1
 8006f56:	d00b      	beq.n	8006f70 <__pow5mult+0xa0>
 8006f58:	6820      	ldr	r0, [r4, #0]
 8006f5a:	b938      	cbnz	r0, 8006f6c <__pow5mult+0x9c>
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7ff ff0b 	bl	8006d7c <__multiply>
 8006f66:	6020      	str	r0, [r4, #0]
 8006f68:	f8c0 9000 	str.w	r9, [r0]
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	e7e4      	b.n	8006f3a <__pow5mult+0x6a>
 8006f70:	4638      	mov	r0, r7
 8006f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f76:	bf00      	nop
 8006f78:	080099b0 	.word	0x080099b0
 8006f7c:	08009766 	.word	0x08009766
 8006f80:	08009864 	.word	0x08009864

08006f84 <__lshift>:
 8006f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f88:	460c      	mov	r4, r1
 8006f8a:	6849      	ldr	r1, [r1, #4]
 8006f8c:	6923      	ldr	r3, [r4, #16]
 8006f8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f92:	68a3      	ldr	r3, [r4, #8]
 8006f94:	4607      	mov	r7, r0
 8006f96:	4691      	mov	r9, r2
 8006f98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f9c:	f108 0601 	add.w	r6, r8, #1
 8006fa0:	42b3      	cmp	r3, r6
 8006fa2:	db0b      	blt.n	8006fbc <__lshift+0x38>
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	f7ff fd91 	bl	8006acc <_Balloc>
 8006faa:	4605      	mov	r5, r0
 8006fac:	b948      	cbnz	r0, 8006fc2 <__lshift+0x3e>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	4b2a      	ldr	r3, [pc, #168]	; (800705c <__lshift+0xd8>)
 8006fb2:	482b      	ldr	r0, [pc, #172]	; (8007060 <__lshift+0xdc>)
 8006fb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006fb8:	f000 fcd8 	bl	800796c <__assert_func>
 8006fbc:	3101      	adds	r1, #1
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	e7ee      	b.n	8006fa0 <__lshift+0x1c>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f100 0114 	add.w	r1, r0, #20
 8006fc8:	f100 0210 	add.w	r2, r0, #16
 8006fcc:	4618      	mov	r0, r3
 8006fce:	4553      	cmp	r3, sl
 8006fd0:	db37      	blt.n	8007042 <__lshift+0xbe>
 8006fd2:	6920      	ldr	r0, [r4, #16]
 8006fd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fd8:	f104 0314 	add.w	r3, r4, #20
 8006fdc:	f019 091f 	ands.w	r9, r9, #31
 8006fe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fe4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006fe8:	d02f      	beq.n	800704a <__lshift+0xc6>
 8006fea:	f1c9 0e20 	rsb	lr, r9, #32
 8006fee:	468a      	mov	sl, r1
 8006ff0:	f04f 0c00 	mov.w	ip, #0
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	fa02 f209 	lsl.w	r2, r2, r9
 8006ffa:	ea42 020c 	orr.w	r2, r2, ip
 8006ffe:	f84a 2b04 	str.w	r2, [sl], #4
 8007002:	f853 2b04 	ldr.w	r2, [r3], #4
 8007006:	4298      	cmp	r0, r3
 8007008:	fa22 fc0e 	lsr.w	ip, r2, lr
 800700c:	d8f2      	bhi.n	8006ff4 <__lshift+0x70>
 800700e:	1b03      	subs	r3, r0, r4
 8007010:	3b15      	subs	r3, #21
 8007012:	f023 0303 	bic.w	r3, r3, #3
 8007016:	3304      	adds	r3, #4
 8007018:	f104 0215 	add.w	r2, r4, #21
 800701c:	4290      	cmp	r0, r2
 800701e:	bf38      	it	cc
 8007020:	2304      	movcc	r3, #4
 8007022:	f841 c003 	str.w	ip, [r1, r3]
 8007026:	f1bc 0f00 	cmp.w	ip, #0
 800702a:	d001      	beq.n	8007030 <__lshift+0xac>
 800702c:	f108 0602 	add.w	r6, r8, #2
 8007030:	3e01      	subs	r6, #1
 8007032:	4638      	mov	r0, r7
 8007034:	612e      	str	r6, [r5, #16]
 8007036:	4621      	mov	r1, r4
 8007038:	f7ff fd88 	bl	8006b4c <_Bfree>
 800703c:	4628      	mov	r0, r5
 800703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007042:	f842 0f04 	str.w	r0, [r2, #4]!
 8007046:	3301      	adds	r3, #1
 8007048:	e7c1      	b.n	8006fce <__lshift+0x4a>
 800704a:	3904      	subs	r1, #4
 800704c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007050:	f841 2f04 	str.w	r2, [r1, #4]!
 8007054:	4298      	cmp	r0, r3
 8007056:	d8f9      	bhi.n	800704c <__lshift+0xc8>
 8007058:	e7ea      	b.n	8007030 <__lshift+0xac>
 800705a:	bf00      	nop
 800705c:	080097d8 	.word	0x080097d8
 8007060:	08009864 	.word	0x08009864

08007064 <__mcmp>:
 8007064:	b530      	push	{r4, r5, lr}
 8007066:	6902      	ldr	r2, [r0, #16]
 8007068:	690c      	ldr	r4, [r1, #16]
 800706a:	1b12      	subs	r2, r2, r4
 800706c:	d10e      	bne.n	800708c <__mcmp+0x28>
 800706e:	f100 0314 	add.w	r3, r0, #20
 8007072:	3114      	adds	r1, #20
 8007074:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007078:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800707c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007080:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007084:	42a5      	cmp	r5, r4
 8007086:	d003      	beq.n	8007090 <__mcmp+0x2c>
 8007088:	d305      	bcc.n	8007096 <__mcmp+0x32>
 800708a:	2201      	movs	r2, #1
 800708c:	4610      	mov	r0, r2
 800708e:	bd30      	pop	{r4, r5, pc}
 8007090:	4283      	cmp	r3, r0
 8007092:	d3f3      	bcc.n	800707c <__mcmp+0x18>
 8007094:	e7fa      	b.n	800708c <__mcmp+0x28>
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	e7f7      	b.n	800708c <__mcmp+0x28>

0800709c <__mdiff>:
 800709c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	460c      	mov	r4, r1
 80070a2:	4606      	mov	r6, r0
 80070a4:	4611      	mov	r1, r2
 80070a6:	4620      	mov	r0, r4
 80070a8:	4690      	mov	r8, r2
 80070aa:	f7ff ffdb 	bl	8007064 <__mcmp>
 80070ae:	1e05      	subs	r5, r0, #0
 80070b0:	d110      	bne.n	80070d4 <__mdiff+0x38>
 80070b2:	4629      	mov	r1, r5
 80070b4:	4630      	mov	r0, r6
 80070b6:	f7ff fd09 	bl	8006acc <_Balloc>
 80070ba:	b930      	cbnz	r0, 80070ca <__mdiff+0x2e>
 80070bc:	4b3a      	ldr	r3, [pc, #232]	; (80071a8 <__mdiff+0x10c>)
 80070be:	4602      	mov	r2, r0
 80070c0:	f240 2132 	movw	r1, #562	; 0x232
 80070c4:	4839      	ldr	r0, [pc, #228]	; (80071ac <__mdiff+0x110>)
 80070c6:	f000 fc51 	bl	800796c <__assert_func>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d4:	bfa4      	itt	ge
 80070d6:	4643      	movge	r3, r8
 80070d8:	46a0      	movge	r8, r4
 80070da:	4630      	mov	r0, r6
 80070dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80070e0:	bfa6      	itte	ge
 80070e2:	461c      	movge	r4, r3
 80070e4:	2500      	movge	r5, #0
 80070e6:	2501      	movlt	r5, #1
 80070e8:	f7ff fcf0 	bl	8006acc <_Balloc>
 80070ec:	b920      	cbnz	r0, 80070f8 <__mdiff+0x5c>
 80070ee:	4b2e      	ldr	r3, [pc, #184]	; (80071a8 <__mdiff+0x10c>)
 80070f0:	4602      	mov	r2, r0
 80070f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80070f6:	e7e5      	b.n	80070c4 <__mdiff+0x28>
 80070f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80070fc:	6926      	ldr	r6, [r4, #16]
 80070fe:	60c5      	str	r5, [r0, #12]
 8007100:	f104 0914 	add.w	r9, r4, #20
 8007104:	f108 0514 	add.w	r5, r8, #20
 8007108:	f100 0e14 	add.w	lr, r0, #20
 800710c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007110:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007114:	f108 0210 	add.w	r2, r8, #16
 8007118:	46f2      	mov	sl, lr
 800711a:	2100      	movs	r1, #0
 800711c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007120:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007124:	fa1f f883 	uxth.w	r8, r3
 8007128:	fa11 f18b 	uxtah	r1, r1, fp
 800712c:	0c1b      	lsrs	r3, r3, #16
 800712e:	eba1 0808 	sub.w	r8, r1, r8
 8007132:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007136:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800713a:	fa1f f888 	uxth.w	r8, r8
 800713e:	1419      	asrs	r1, r3, #16
 8007140:	454e      	cmp	r6, r9
 8007142:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007146:	f84a 3b04 	str.w	r3, [sl], #4
 800714a:	d8e7      	bhi.n	800711c <__mdiff+0x80>
 800714c:	1b33      	subs	r3, r6, r4
 800714e:	3b15      	subs	r3, #21
 8007150:	f023 0303 	bic.w	r3, r3, #3
 8007154:	3304      	adds	r3, #4
 8007156:	3415      	adds	r4, #21
 8007158:	42a6      	cmp	r6, r4
 800715a:	bf38      	it	cc
 800715c:	2304      	movcc	r3, #4
 800715e:	441d      	add	r5, r3
 8007160:	4473      	add	r3, lr
 8007162:	469e      	mov	lr, r3
 8007164:	462e      	mov	r6, r5
 8007166:	4566      	cmp	r6, ip
 8007168:	d30e      	bcc.n	8007188 <__mdiff+0xec>
 800716a:	f10c 0203 	add.w	r2, ip, #3
 800716e:	1b52      	subs	r2, r2, r5
 8007170:	f022 0203 	bic.w	r2, r2, #3
 8007174:	3d03      	subs	r5, #3
 8007176:	45ac      	cmp	ip, r5
 8007178:	bf38      	it	cc
 800717a:	2200      	movcc	r2, #0
 800717c:	441a      	add	r2, r3
 800717e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007182:	b17b      	cbz	r3, 80071a4 <__mdiff+0x108>
 8007184:	6107      	str	r7, [r0, #16]
 8007186:	e7a3      	b.n	80070d0 <__mdiff+0x34>
 8007188:	f856 8b04 	ldr.w	r8, [r6], #4
 800718c:	fa11 f288 	uxtah	r2, r1, r8
 8007190:	1414      	asrs	r4, r2, #16
 8007192:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007196:	b292      	uxth	r2, r2
 8007198:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800719c:	f84e 2b04 	str.w	r2, [lr], #4
 80071a0:	1421      	asrs	r1, r4, #16
 80071a2:	e7e0      	b.n	8007166 <__mdiff+0xca>
 80071a4:	3f01      	subs	r7, #1
 80071a6:	e7ea      	b.n	800717e <__mdiff+0xe2>
 80071a8:	080097d8 	.word	0x080097d8
 80071ac:	08009864 	.word	0x08009864

080071b0 <__ulp>:
 80071b0:	b082      	sub	sp, #8
 80071b2:	ed8d 0b00 	vstr	d0, [sp]
 80071b6:	9b01      	ldr	r3, [sp, #4]
 80071b8:	4912      	ldr	r1, [pc, #72]	; (8007204 <__ulp+0x54>)
 80071ba:	4019      	ands	r1, r3
 80071bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80071c0:	2900      	cmp	r1, #0
 80071c2:	dd05      	ble.n	80071d0 <__ulp+0x20>
 80071c4:	2200      	movs	r2, #0
 80071c6:	460b      	mov	r3, r1
 80071c8:	ec43 2b10 	vmov	d0, r2, r3
 80071cc:	b002      	add	sp, #8
 80071ce:	4770      	bx	lr
 80071d0:	4249      	negs	r1, r1
 80071d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80071d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	f04f 0300 	mov.w	r3, #0
 80071e2:	da04      	bge.n	80071ee <__ulp+0x3e>
 80071e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80071e8:	fa41 f300 	asr.w	r3, r1, r0
 80071ec:	e7ec      	b.n	80071c8 <__ulp+0x18>
 80071ee:	f1a0 0114 	sub.w	r1, r0, #20
 80071f2:	291e      	cmp	r1, #30
 80071f4:	bfda      	itte	le
 80071f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80071fa:	fa20 f101 	lsrle.w	r1, r0, r1
 80071fe:	2101      	movgt	r1, #1
 8007200:	460a      	mov	r2, r1
 8007202:	e7e1      	b.n	80071c8 <__ulp+0x18>
 8007204:	7ff00000 	.word	0x7ff00000

08007208 <__b2d>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	6905      	ldr	r5, [r0, #16]
 800720c:	f100 0714 	add.w	r7, r0, #20
 8007210:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007214:	1f2e      	subs	r6, r5, #4
 8007216:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800721a:	4620      	mov	r0, r4
 800721c:	f7ff fd48 	bl	8006cb0 <__hi0bits>
 8007220:	f1c0 0320 	rsb	r3, r0, #32
 8007224:	280a      	cmp	r0, #10
 8007226:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80072a4 <__b2d+0x9c>
 800722a:	600b      	str	r3, [r1, #0]
 800722c:	dc14      	bgt.n	8007258 <__b2d+0x50>
 800722e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007232:	fa24 f10e 	lsr.w	r1, r4, lr
 8007236:	42b7      	cmp	r7, r6
 8007238:	ea41 030c 	orr.w	r3, r1, ip
 800723c:	bf34      	ite	cc
 800723e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007242:	2100      	movcs	r1, #0
 8007244:	3015      	adds	r0, #21
 8007246:	fa04 f000 	lsl.w	r0, r4, r0
 800724a:	fa21 f10e 	lsr.w	r1, r1, lr
 800724e:	ea40 0201 	orr.w	r2, r0, r1
 8007252:	ec43 2b10 	vmov	d0, r2, r3
 8007256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007258:	42b7      	cmp	r7, r6
 800725a:	bf3a      	itte	cc
 800725c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007260:	f1a5 0608 	subcc.w	r6, r5, #8
 8007264:	2100      	movcs	r1, #0
 8007266:	380b      	subs	r0, #11
 8007268:	d017      	beq.n	800729a <__b2d+0x92>
 800726a:	f1c0 0c20 	rsb	ip, r0, #32
 800726e:	fa04 f500 	lsl.w	r5, r4, r0
 8007272:	42be      	cmp	r6, r7
 8007274:	fa21 f40c 	lsr.w	r4, r1, ip
 8007278:	ea45 0504 	orr.w	r5, r5, r4
 800727c:	bf8c      	ite	hi
 800727e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007282:	2400      	movls	r4, #0
 8007284:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007288:	fa01 f000 	lsl.w	r0, r1, r0
 800728c:	fa24 f40c 	lsr.w	r4, r4, ip
 8007290:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007294:	ea40 0204 	orr.w	r2, r0, r4
 8007298:	e7db      	b.n	8007252 <__b2d+0x4a>
 800729a:	ea44 030c 	orr.w	r3, r4, ip
 800729e:	460a      	mov	r2, r1
 80072a0:	e7d7      	b.n	8007252 <__b2d+0x4a>
 80072a2:	bf00      	nop
 80072a4:	3ff00000 	.word	0x3ff00000

080072a8 <__d2b>:
 80072a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072ac:	4689      	mov	r9, r1
 80072ae:	2101      	movs	r1, #1
 80072b0:	ec57 6b10 	vmov	r6, r7, d0
 80072b4:	4690      	mov	r8, r2
 80072b6:	f7ff fc09 	bl	8006acc <_Balloc>
 80072ba:	4604      	mov	r4, r0
 80072bc:	b930      	cbnz	r0, 80072cc <__d2b+0x24>
 80072be:	4602      	mov	r2, r0
 80072c0:	4b25      	ldr	r3, [pc, #148]	; (8007358 <__d2b+0xb0>)
 80072c2:	4826      	ldr	r0, [pc, #152]	; (800735c <__d2b+0xb4>)
 80072c4:	f240 310a 	movw	r1, #778	; 0x30a
 80072c8:	f000 fb50 	bl	800796c <__assert_func>
 80072cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80072d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072d4:	bb35      	cbnz	r5, 8007324 <__d2b+0x7c>
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	d028      	beq.n	800732e <__d2b+0x86>
 80072dc:	4668      	mov	r0, sp
 80072de:	9600      	str	r6, [sp, #0]
 80072e0:	f7ff fd06 	bl	8006cf0 <__lo0bits>
 80072e4:	9900      	ldr	r1, [sp, #0]
 80072e6:	b300      	cbz	r0, 800732a <__d2b+0x82>
 80072e8:	9a01      	ldr	r2, [sp, #4]
 80072ea:	f1c0 0320 	rsb	r3, r0, #32
 80072ee:	fa02 f303 	lsl.w	r3, r2, r3
 80072f2:	430b      	orrs	r3, r1
 80072f4:	40c2      	lsrs	r2, r0
 80072f6:	6163      	str	r3, [r4, #20]
 80072f8:	9201      	str	r2, [sp, #4]
 80072fa:	9b01      	ldr	r3, [sp, #4]
 80072fc:	61a3      	str	r3, [r4, #24]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bf14      	ite	ne
 8007302:	2202      	movne	r2, #2
 8007304:	2201      	moveq	r2, #1
 8007306:	6122      	str	r2, [r4, #16]
 8007308:	b1d5      	cbz	r5, 8007340 <__d2b+0x98>
 800730a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800730e:	4405      	add	r5, r0
 8007310:	f8c9 5000 	str.w	r5, [r9]
 8007314:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007318:	f8c8 0000 	str.w	r0, [r8]
 800731c:	4620      	mov	r0, r4
 800731e:	b003      	add	sp, #12
 8007320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007328:	e7d5      	b.n	80072d6 <__d2b+0x2e>
 800732a:	6161      	str	r1, [r4, #20]
 800732c:	e7e5      	b.n	80072fa <__d2b+0x52>
 800732e:	a801      	add	r0, sp, #4
 8007330:	f7ff fcde 	bl	8006cf0 <__lo0bits>
 8007334:	9b01      	ldr	r3, [sp, #4]
 8007336:	6163      	str	r3, [r4, #20]
 8007338:	2201      	movs	r2, #1
 800733a:	6122      	str	r2, [r4, #16]
 800733c:	3020      	adds	r0, #32
 800733e:	e7e3      	b.n	8007308 <__d2b+0x60>
 8007340:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007344:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007348:	f8c9 0000 	str.w	r0, [r9]
 800734c:	6918      	ldr	r0, [r3, #16]
 800734e:	f7ff fcaf 	bl	8006cb0 <__hi0bits>
 8007352:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007356:	e7df      	b.n	8007318 <__d2b+0x70>
 8007358:	080097d8 	.word	0x080097d8
 800735c:	08009864 	.word	0x08009864

08007360 <__ratio>:
 8007360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	4688      	mov	r8, r1
 8007366:	4669      	mov	r1, sp
 8007368:	4681      	mov	r9, r0
 800736a:	f7ff ff4d 	bl	8007208 <__b2d>
 800736e:	a901      	add	r1, sp, #4
 8007370:	4640      	mov	r0, r8
 8007372:	ec55 4b10 	vmov	r4, r5, d0
 8007376:	f7ff ff47 	bl	8007208 <__b2d>
 800737a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800737e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007382:	eba3 0c02 	sub.w	ip, r3, r2
 8007386:	e9dd 3200 	ldrd	r3, r2, [sp]
 800738a:	1a9b      	subs	r3, r3, r2
 800738c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007390:	ec51 0b10 	vmov	r0, r1, d0
 8007394:	2b00      	cmp	r3, #0
 8007396:	bfd6      	itet	le
 8007398:	460a      	movle	r2, r1
 800739a:	462a      	movgt	r2, r5
 800739c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80073a0:	468b      	mov	fp, r1
 80073a2:	462f      	mov	r7, r5
 80073a4:	bfd4      	ite	le
 80073a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80073aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80073ae:	4620      	mov	r0, r4
 80073b0:	ee10 2a10 	vmov	r2, s0
 80073b4:	465b      	mov	r3, fp
 80073b6:	4639      	mov	r1, r7
 80073b8:	f7f9 fa50 	bl	800085c <__aeabi_ddiv>
 80073bc:	ec41 0b10 	vmov	d0, r0, r1
 80073c0:	b003      	add	sp, #12
 80073c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073c6 <__copybits>:
 80073c6:	3901      	subs	r1, #1
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	1149      	asrs	r1, r1, #5
 80073cc:	6914      	ldr	r4, [r2, #16]
 80073ce:	3101      	adds	r1, #1
 80073d0:	f102 0314 	add.w	r3, r2, #20
 80073d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073dc:	1f05      	subs	r5, r0, #4
 80073de:	42a3      	cmp	r3, r4
 80073e0:	d30c      	bcc.n	80073fc <__copybits+0x36>
 80073e2:	1aa3      	subs	r3, r4, r2
 80073e4:	3b11      	subs	r3, #17
 80073e6:	f023 0303 	bic.w	r3, r3, #3
 80073ea:	3211      	adds	r2, #17
 80073ec:	42a2      	cmp	r2, r4
 80073ee:	bf88      	it	hi
 80073f0:	2300      	movhi	r3, #0
 80073f2:	4418      	add	r0, r3
 80073f4:	2300      	movs	r3, #0
 80073f6:	4288      	cmp	r0, r1
 80073f8:	d305      	bcc.n	8007406 <__copybits+0x40>
 80073fa:	bd70      	pop	{r4, r5, r6, pc}
 80073fc:	f853 6b04 	ldr.w	r6, [r3], #4
 8007400:	f845 6f04 	str.w	r6, [r5, #4]!
 8007404:	e7eb      	b.n	80073de <__copybits+0x18>
 8007406:	f840 3b04 	str.w	r3, [r0], #4
 800740a:	e7f4      	b.n	80073f6 <__copybits+0x30>

0800740c <__any_on>:
 800740c:	f100 0214 	add.w	r2, r0, #20
 8007410:	6900      	ldr	r0, [r0, #16]
 8007412:	114b      	asrs	r3, r1, #5
 8007414:	4298      	cmp	r0, r3
 8007416:	b510      	push	{r4, lr}
 8007418:	db11      	blt.n	800743e <__any_on+0x32>
 800741a:	dd0a      	ble.n	8007432 <__any_on+0x26>
 800741c:	f011 011f 	ands.w	r1, r1, #31
 8007420:	d007      	beq.n	8007432 <__any_on+0x26>
 8007422:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007426:	fa24 f001 	lsr.w	r0, r4, r1
 800742a:	fa00 f101 	lsl.w	r1, r0, r1
 800742e:	428c      	cmp	r4, r1
 8007430:	d10b      	bne.n	800744a <__any_on+0x3e>
 8007432:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007436:	4293      	cmp	r3, r2
 8007438:	d803      	bhi.n	8007442 <__any_on+0x36>
 800743a:	2000      	movs	r0, #0
 800743c:	bd10      	pop	{r4, pc}
 800743e:	4603      	mov	r3, r0
 8007440:	e7f7      	b.n	8007432 <__any_on+0x26>
 8007442:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007446:	2900      	cmp	r1, #0
 8007448:	d0f5      	beq.n	8007436 <__any_on+0x2a>
 800744a:	2001      	movs	r0, #1
 800744c:	e7f6      	b.n	800743c <__any_on+0x30>

0800744e <_calloc_r>:
 800744e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007450:	fba1 2402 	umull	r2, r4, r1, r2
 8007454:	b94c      	cbnz	r4, 800746a <_calloc_r+0x1c>
 8007456:	4611      	mov	r1, r2
 8007458:	9201      	str	r2, [sp, #4]
 800745a:	f000 f87b 	bl	8007554 <_malloc_r>
 800745e:	9a01      	ldr	r2, [sp, #4]
 8007460:	4605      	mov	r5, r0
 8007462:	b930      	cbnz	r0, 8007472 <_calloc_r+0x24>
 8007464:	4628      	mov	r0, r5
 8007466:	b003      	add	sp, #12
 8007468:	bd30      	pop	{r4, r5, pc}
 800746a:	220c      	movs	r2, #12
 800746c:	6002      	str	r2, [r0, #0]
 800746e:	2500      	movs	r5, #0
 8007470:	e7f8      	b.n	8007464 <_calloc_r+0x16>
 8007472:	4621      	mov	r1, r4
 8007474:	f7fc fbbe 	bl	8003bf4 <memset>
 8007478:	e7f4      	b.n	8007464 <_calloc_r+0x16>
	...

0800747c <_free_r>:
 800747c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800747e:	2900      	cmp	r1, #0
 8007480:	d044      	beq.n	800750c <_free_r+0x90>
 8007482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007486:	9001      	str	r0, [sp, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	f1a1 0404 	sub.w	r4, r1, #4
 800748e:	bfb8      	it	lt
 8007490:	18e4      	addlt	r4, r4, r3
 8007492:	f000 fab5 	bl	8007a00 <__malloc_lock>
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <_free_r+0x94>)
 8007498:	9801      	ldr	r0, [sp, #4]
 800749a:	6813      	ldr	r3, [r2, #0]
 800749c:	b933      	cbnz	r3, 80074ac <_free_r+0x30>
 800749e:	6063      	str	r3, [r4, #4]
 80074a0:	6014      	str	r4, [r2, #0]
 80074a2:	b003      	add	sp, #12
 80074a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074a8:	f000 bab0 	b.w	8007a0c <__malloc_unlock>
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	d908      	bls.n	80074c2 <_free_r+0x46>
 80074b0:	6825      	ldr	r5, [r4, #0]
 80074b2:	1961      	adds	r1, r4, r5
 80074b4:	428b      	cmp	r3, r1
 80074b6:	bf01      	itttt	eq
 80074b8:	6819      	ldreq	r1, [r3, #0]
 80074ba:	685b      	ldreq	r3, [r3, #4]
 80074bc:	1949      	addeq	r1, r1, r5
 80074be:	6021      	streq	r1, [r4, #0]
 80074c0:	e7ed      	b.n	800749e <_free_r+0x22>
 80074c2:	461a      	mov	r2, r3
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	b10b      	cbz	r3, 80074cc <_free_r+0x50>
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	d9fa      	bls.n	80074c2 <_free_r+0x46>
 80074cc:	6811      	ldr	r1, [r2, #0]
 80074ce:	1855      	adds	r5, r2, r1
 80074d0:	42a5      	cmp	r5, r4
 80074d2:	d10b      	bne.n	80074ec <_free_r+0x70>
 80074d4:	6824      	ldr	r4, [r4, #0]
 80074d6:	4421      	add	r1, r4
 80074d8:	1854      	adds	r4, r2, r1
 80074da:	42a3      	cmp	r3, r4
 80074dc:	6011      	str	r1, [r2, #0]
 80074de:	d1e0      	bne.n	80074a2 <_free_r+0x26>
 80074e0:	681c      	ldr	r4, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	6053      	str	r3, [r2, #4]
 80074e6:	4421      	add	r1, r4
 80074e8:	6011      	str	r1, [r2, #0]
 80074ea:	e7da      	b.n	80074a2 <_free_r+0x26>
 80074ec:	d902      	bls.n	80074f4 <_free_r+0x78>
 80074ee:	230c      	movs	r3, #12
 80074f0:	6003      	str	r3, [r0, #0]
 80074f2:	e7d6      	b.n	80074a2 <_free_r+0x26>
 80074f4:	6825      	ldr	r5, [r4, #0]
 80074f6:	1961      	adds	r1, r4, r5
 80074f8:	428b      	cmp	r3, r1
 80074fa:	bf04      	itt	eq
 80074fc:	6819      	ldreq	r1, [r3, #0]
 80074fe:	685b      	ldreq	r3, [r3, #4]
 8007500:	6063      	str	r3, [r4, #4]
 8007502:	bf04      	itt	eq
 8007504:	1949      	addeq	r1, r1, r5
 8007506:	6021      	streq	r1, [r4, #0]
 8007508:	6054      	str	r4, [r2, #4]
 800750a:	e7ca      	b.n	80074a2 <_free_r+0x26>
 800750c:	b003      	add	sp, #12
 800750e:	bd30      	pop	{r4, r5, pc}
 8007510:	20000338 	.word	0x20000338

08007514 <sbrk_aligned>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	4e0e      	ldr	r6, [pc, #56]	; (8007550 <sbrk_aligned+0x3c>)
 8007518:	460c      	mov	r4, r1
 800751a:	6831      	ldr	r1, [r6, #0]
 800751c:	4605      	mov	r5, r0
 800751e:	b911      	cbnz	r1, 8007526 <sbrk_aligned+0x12>
 8007520:	f000 f9f2 	bl	8007908 <_sbrk_r>
 8007524:	6030      	str	r0, [r6, #0]
 8007526:	4621      	mov	r1, r4
 8007528:	4628      	mov	r0, r5
 800752a:	f000 f9ed 	bl	8007908 <_sbrk_r>
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	d00a      	beq.n	8007548 <sbrk_aligned+0x34>
 8007532:	1cc4      	adds	r4, r0, #3
 8007534:	f024 0403 	bic.w	r4, r4, #3
 8007538:	42a0      	cmp	r0, r4
 800753a:	d007      	beq.n	800754c <sbrk_aligned+0x38>
 800753c:	1a21      	subs	r1, r4, r0
 800753e:	4628      	mov	r0, r5
 8007540:	f000 f9e2 	bl	8007908 <_sbrk_r>
 8007544:	3001      	adds	r0, #1
 8007546:	d101      	bne.n	800754c <sbrk_aligned+0x38>
 8007548:	f04f 34ff 	mov.w	r4, #4294967295
 800754c:	4620      	mov	r0, r4
 800754e:	bd70      	pop	{r4, r5, r6, pc}
 8007550:	2000033c 	.word	0x2000033c

08007554 <_malloc_r>:
 8007554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007558:	1ccd      	adds	r5, r1, #3
 800755a:	f025 0503 	bic.w	r5, r5, #3
 800755e:	3508      	adds	r5, #8
 8007560:	2d0c      	cmp	r5, #12
 8007562:	bf38      	it	cc
 8007564:	250c      	movcc	r5, #12
 8007566:	2d00      	cmp	r5, #0
 8007568:	4607      	mov	r7, r0
 800756a:	db01      	blt.n	8007570 <_malloc_r+0x1c>
 800756c:	42a9      	cmp	r1, r5
 800756e:	d905      	bls.n	800757c <_malloc_r+0x28>
 8007570:	230c      	movs	r3, #12
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	2600      	movs	r6, #0
 8007576:	4630      	mov	r0, r6
 8007578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800757c:	4e2e      	ldr	r6, [pc, #184]	; (8007638 <_malloc_r+0xe4>)
 800757e:	f000 fa3f 	bl	8007a00 <__malloc_lock>
 8007582:	6833      	ldr	r3, [r6, #0]
 8007584:	461c      	mov	r4, r3
 8007586:	bb34      	cbnz	r4, 80075d6 <_malloc_r+0x82>
 8007588:	4629      	mov	r1, r5
 800758a:	4638      	mov	r0, r7
 800758c:	f7ff ffc2 	bl	8007514 <sbrk_aligned>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	4604      	mov	r4, r0
 8007594:	d14d      	bne.n	8007632 <_malloc_r+0xde>
 8007596:	6834      	ldr	r4, [r6, #0]
 8007598:	4626      	mov	r6, r4
 800759a:	2e00      	cmp	r6, #0
 800759c:	d140      	bne.n	8007620 <_malloc_r+0xcc>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	4631      	mov	r1, r6
 80075a2:	4638      	mov	r0, r7
 80075a4:	eb04 0803 	add.w	r8, r4, r3
 80075a8:	f000 f9ae 	bl	8007908 <_sbrk_r>
 80075ac:	4580      	cmp	r8, r0
 80075ae:	d13a      	bne.n	8007626 <_malloc_r+0xd2>
 80075b0:	6821      	ldr	r1, [r4, #0]
 80075b2:	3503      	adds	r5, #3
 80075b4:	1a6d      	subs	r5, r5, r1
 80075b6:	f025 0503 	bic.w	r5, r5, #3
 80075ba:	3508      	adds	r5, #8
 80075bc:	2d0c      	cmp	r5, #12
 80075be:	bf38      	it	cc
 80075c0:	250c      	movcc	r5, #12
 80075c2:	4629      	mov	r1, r5
 80075c4:	4638      	mov	r0, r7
 80075c6:	f7ff ffa5 	bl	8007514 <sbrk_aligned>
 80075ca:	3001      	adds	r0, #1
 80075cc:	d02b      	beq.n	8007626 <_malloc_r+0xd2>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	442b      	add	r3, r5
 80075d2:	6023      	str	r3, [r4, #0]
 80075d4:	e00e      	b.n	80075f4 <_malloc_r+0xa0>
 80075d6:	6822      	ldr	r2, [r4, #0]
 80075d8:	1b52      	subs	r2, r2, r5
 80075da:	d41e      	bmi.n	800761a <_malloc_r+0xc6>
 80075dc:	2a0b      	cmp	r2, #11
 80075de:	d916      	bls.n	800760e <_malloc_r+0xba>
 80075e0:	1961      	adds	r1, r4, r5
 80075e2:	42a3      	cmp	r3, r4
 80075e4:	6025      	str	r5, [r4, #0]
 80075e6:	bf18      	it	ne
 80075e8:	6059      	strne	r1, [r3, #4]
 80075ea:	6863      	ldr	r3, [r4, #4]
 80075ec:	bf08      	it	eq
 80075ee:	6031      	streq	r1, [r6, #0]
 80075f0:	5162      	str	r2, [r4, r5]
 80075f2:	604b      	str	r3, [r1, #4]
 80075f4:	4638      	mov	r0, r7
 80075f6:	f104 060b 	add.w	r6, r4, #11
 80075fa:	f000 fa07 	bl	8007a0c <__malloc_unlock>
 80075fe:	f026 0607 	bic.w	r6, r6, #7
 8007602:	1d23      	adds	r3, r4, #4
 8007604:	1af2      	subs	r2, r6, r3
 8007606:	d0b6      	beq.n	8007576 <_malloc_r+0x22>
 8007608:	1b9b      	subs	r3, r3, r6
 800760a:	50a3      	str	r3, [r4, r2]
 800760c:	e7b3      	b.n	8007576 <_malloc_r+0x22>
 800760e:	6862      	ldr	r2, [r4, #4]
 8007610:	42a3      	cmp	r3, r4
 8007612:	bf0c      	ite	eq
 8007614:	6032      	streq	r2, [r6, #0]
 8007616:	605a      	strne	r2, [r3, #4]
 8007618:	e7ec      	b.n	80075f4 <_malloc_r+0xa0>
 800761a:	4623      	mov	r3, r4
 800761c:	6864      	ldr	r4, [r4, #4]
 800761e:	e7b2      	b.n	8007586 <_malloc_r+0x32>
 8007620:	4634      	mov	r4, r6
 8007622:	6876      	ldr	r6, [r6, #4]
 8007624:	e7b9      	b.n	800759a <_malloc_r+0x46>
 8007626:	230c      	movs	r3, #12
 8007628:	603b      	str	r3, [r7, #0]
 800762a:	4638      	mov	r0, r7
 800762c:	f000 f9ee 	bl	8007a0c <__malloc_unlock>
 8007630:	e7a1      	b.n	8007576 <_malloc_r+0x22>
 8007632:	6025      	str	r5, [r4, #0]
 8007634:	e7de      	b.n	80075f4 <_malloc_r+0xa0>
 8007636:	bf00      	nop
 8007638:	20000338 	.word	0x20000338

0800763c <__ssputs_r>:
 800763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007640:	688e      	ldr	r6, [r1, #8]
 8007642:	429e      	cmp	r6, r3
 8007644:	4682      	mov	sl, r0
 8007646:	460c      	mov	r4, r1
 8007648:	4690      	mov	r8, r2
 800764a:	461f      	mov	r7, r3
 800764c:	d838      	bhi.n	80076c0 <__ssputs_r+0x84>
 800764e:	898a      	ldrh	r2, [r1, #12]
 8007650:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007654:	d032      	beq.n	80076bc <__ssputs_r+0x80>
 8007656:	6825      	ldr	r5, [r4, #0]
 8007658:	6909      	ldr	r1, [r1, #16]
 800765a:	eba5 0901 	sub.w	r9, r5, r1
 800765e:	6965      	ldr	r5, [r4, #20]
 8007660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007664:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007668:	3301      	adds	r3, #1
 800766a:	444b      	add	r3, r9
 800766c:	106d      	asrs	r5, r5, #1
 800766e:	429d      	cmp	r5, r3
 8007670:	bf38      	it	cc
 8007672:	461d      	movcc	r5, r3
 8007674:	0553      	lsls	r3, r2, #21
 8007676:	d531      	bpl.n	80076dc <__ssputs_r+0xa0>
 8007678:	4629      	mov	r1, r5
 800767a:	f7ff ff6b 	bl	8007554 <_malloc_r>
 800767e:	4606      	mov	r6, r0
 8007680:	b950      	cbnz	r0, 8007698 <__ssputs_r+0x5c>
 8007682:	230c      	movs	r3, #12
 8007684:	f8ca 3000 	str.w	r3, [sl]
 8007688:	89a3      	ldrh	r3, [r4, #12]
 800768a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800768e:	81a3      	strh	r3, [r4, #12]
 8007690:	f04f 30ff 	mov.w	r0, #4294967295
 8007694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007698:	6921      	ldr	r1, [r4, #16]
 800769a:	464a      	mov	r2, r9
 800769c:	f7ff fa08 	bl	8006ab0 <memcpy>
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076aa:	81a3      	strh	r3, [r4, #12]
 80076ac:	6126      	str	r6, [r4, #16]
 80076ae:	6165      	str	r5, [r4, #20]
 80076b0:	444e      	add	r6, r9
 80076b2:	eba5 0509 	sub.w	r5, r5, r9
 80076b6:	6026      	str	r6, [r4, #0]
 80076b8:	60a5      	str	r5, [r4, #8]
 80076ba:	463e      	mov	r6, r7
 80076bc:	42be      	cmp	r6, r7
 80076be:	d900      	bls.n	80076c2 <__ssputs_r+0x86>
 80076c0:	463e      	mov	r6, r7
 80076c2:	6820      	ldr	r0, [r4, #0]
 80076c4:	4632      	mov	r2, r6
 80076c6:	4641      	mov	r1, r8
 80076c8:	f000 f980 	bl	80079cc <memmove>
 80076cc:	68a3      	ldr	r3, [r4, #8]
 80076ce:	1b9b      	subs	r3, r3, r6
 80076d0:	60a3      	str	r3, [r4, #8]
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	4433      	add	r3, r6
 80076d6:	6023      	str	r3, [r4, #0]
 80076d8:	2000      	movs	r0, #0
 80076da:	e7db      	b.n	8007694 <__ssputs_r+0x58>
 80076dc:	462a      	mov	r2, r5
 80076de:	f000 f99b 	bl	8007a18 <_realloc_r>
 80076e2:	4606      	mov	r6, r0
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d1e1      	bne.n	80076ac <__ssputs_r+0x70>
 80076e8:	6921      	ldr	r1, [r4, #16]
 80076ea:	4650      	mov	r0, sl
 80076ec:	f7ff fec6 	bl	800747c <_free_r>
 80076f0:	e7c7      	b.n	8007682 <__ssputs_r+0x46>
	...

080076f4 <_svfiprintf_r>:
 80076f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f8:	4698      	mov	r8, r3
 80076fa:	898b      	ldrh	r3, [r1, #12]
 80076fc:	061b      	lsls	r3, r3, #24
 80076fe:	b09d      	sub	sp, #116	; 0x74
 8007700:	4607      	mov	r7, r0
 8007702:	460d      	mov	r5, r1
 8007704:	4614      	mov	r4, r2
 8007706:	d50e      	bpl.n	8007726 <_svfiprintf_r+0x32>
 8007708:	690b      	ldr	r3, [r1, #16]
 800770a:	b963      	cbnz	r3, 8007726 <_svfiprintf_r+0x32>
 800770c:	2140      	movs	r1, #64	; 0x40
 800770e:	f7ff ff21 	bl	8007554 <_malloc_r>
 8007712:	6028      	str	r0, [r5, #0]
 8007714:	6128      	str	r0, [r5, #16]
 8007716:	b920      	cbnz	r0, 8007722 <_svfiprintf_r+0x2e>
 8007718:	230c      	movs	r3, #12
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	e0d1      	b.n	80078c6 <_svfiprintf_r+0x1d2>
 8007722:	2340      	movs	r3, #64	; 0x40
 8007724:	616b      	str	r3, [r5, #20]
 8007726:	2300      	movs	r3, #0
 8007728:	9309      	str	r3, [sp, #36]	; 0x24
 800772a:	2320      	movs	r3, #32
 800772c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007730:	f8cd 800c 	str.w	r8, [sp, #12]
 8007734:	2330      	movs	r3, #48	; 0x30
 8007736:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80078e0 <_svfiprintf_r+0x1ec>
 800773a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800773e:	f04f 0901 	mov.w	r9, #1
 8007742:	4623      	mov	r3, r4
 8007744:	469a      	mov	sl, r3
 8007746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800774a:	b10a      	cbz	r2, 8007750 <_svfiprintf_r+0x5c>
 800774c:	2a25      	cmp	r2, #37	; 0x25
 800774e:	d1f9      	bne.n	8007744 <_svfiprintf_r+0x50>
 8007750:	ebba 0b04 	subs.w	fp, sl, r4
 8007754:	d00b      	beq.n	800776e <_svfiprintf_r+0x7a>
 8007756:	465b      	mov	r3, fp
 8007758:	4622      	mov	r2, r4
 800775a:	4629      	mov	r1, r5
 800775c:	4638      	mov	r0, r7
 800775e:	f7ff ff6d 	bl	800763c <__ssputs_r>
 8007762:	3001      	adds	r0, #1
 8007764:	f000 80aa 	beq.w	80078bc <_svfiprintf_r+0x1c8>
 8007768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800776a:	445a      	add	r2, fp
 800776c:	9209      	str	r2, [sp, #36]	; 0x24
 800776e:	f89a 3000 	ldrb.w	r3, [sl]
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 80a2 	beq.w	80078bc <_svfiprintf_r+0x1c8>
 8007778:	2300      	movs	r3, #0
 800777a:	f04f 32ff 	mov.w	r2, #4294967295
 800777e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007782:	f10a 0a01 	add.w	sl, sl, #1
 8007786:	9304      	str	r3, [sp, #16]
 8007788:	9307      	str	r3, [sp, #28]
 800778a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800778e:	931a      	str	r3, [sp, #104]	; 0x68
 8007790:	4654      	mov	r4, sl
 8007792:	2205      	movs	r2, #5
 8007794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007798:	4851      	ldr	r0, [pc, #324]	; (80078e0 <_svfiprintf_r+0x1ec>)
 800779a:	f7f8 fd29 	bl	80001f0 <memchr>
 800779e:	9a04      	ldr	r2, [sp, #16]
 80077a0:	b9d8      	cbnz	r0, 80077da <_svfiprintf_r+0xe6>
 80077a2:	06d0      	lsls	r0, r2, #27
 80077a4:	bf44      	itt	mi
 80077a6:	2320      	movmi	r3, #32
 80077a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ac:	0711      	lsls	r1, r2, #28
 80077ae:	bf44      	itt	mi
 80077b0:	232b      	movmi	r3, #43	; 0x2b
 80077b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077b6:	f89a 3000 	ldrb.w	r3, [sl]
 80077ba:	2b2a      	cmp	r3, #42	; 0x2a
 80077bc:	d015      	beq.n	80077ea <_svfiprintf_r+0xf6>
 80077be:	9a07      	ldr	r2, [sp, #28]
 80077c0:	4654      	mov	r4, sl
 80077c2:	2000      	movs	r0, #0
 80077c4:	f04f 0c0a 	mov.w	ip, #10
 80077c8:	4621      	mov	r1, r4
 80077ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ce:	3b30      	subs	r3, #48	; 0x30
 80077d0:	2b09      	cmp	r3, #9
 80077d2:	d94e      	bls.n	8007872 <_svfiprintf_r+0x17e>
 80077d4:	b1b0      	cbz	r0, 8007804 <_svfiprintf_r+0x110>
 80077d6:	9207      	str	r2, [sp, #28]
 80077d8:	e014      	b.n	8007804 <_svfiprintf_r+0x110>
 80077da:	eba0 0308 	sub.w	r3, r0, r8
 80077de:	fa09 f303 	lsl.w	r3, r9, r3
 80077e2:	4313      	orrs	r3, r2
 80077e4:	9304      	str	r3, [sp, #16]
 80077e6:	46a2      	mov	sl, r4
 80077e8:	e7d2      	b.n	8007790 <_svfiprintf_r+0x9c>
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	1d19      	adds	r1, r3, #4
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	9103      	str	r1, [sp, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	bfbb      	ittet	lt
 80077f6:	425b      	neglt	r3, r3
 80077f8:	f042 0202 	orrlt.w	r2, r2, #2
 80077fc:	9307      	strge	r3, [sp, #28]
 80077fe:	9307      	strlt	r3, [sp, #28]
 8007800:	bfb8      	it	lt
 8007802:	9204      	strlt	r2, [sp, #16]
 8007804:	7823      	ldrb	r3, [r4, #0]
 8007806:	2b2e      	cmp	r3, #46	; 0x2e
 8007808:	d10c      	bne.n	8007824 <_svfiprintf_r+0x130>
 800780a:	7863      	ldrb	r3, [r4, #1]
 800780c:	2b2a      	cmp	r3, #42	; 0x2a
 800780e:	d135      	bne.n	800787c <_svfiprintf_r+0x188>
 8007810:	9b03      	ldr	r3, [sp, #12]
 8007812:	1d1a      	adds	r2, r3, #4
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	9203      	str	r2, [sp, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	bfb8      	it	lt
 800781c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007820:	3402      	adds	r4, #2
 8007822:	9305      	str	r3, [sp, #20]
 8007824:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078f0 <_svfiprintf_r+0x1fc>
 8007828:	7821      	ldrb	r1, [r4, #0]
 800782a:	2203      	movs	r2, #3
 800782c:	4650      	mov	r0, sl
 800782e:	f7f8 fcdf 	bl	80001f0 <memchr>
 8007832:	b140      	cbz	r0, 8007846 <_svfiprintf_r+0x152>
 8007834:	2340      	movs	r3, #64	; 0x40
 8007836:	eba0 000a 	sub.w	r0, r0, sl
 800783a:	fa03 f000 	lsl.w	r0, r3, r0
 800783e:	9b04      	ldr	r3, [sp, #16]
 8007840:	4303      	orrs	r3, r0
 8007842:	3401      	adds	r4, #1
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800784a:	4826      	ldr	r0, [pc, #152]	; (80078e4 <_svfiprintf_r+0x1f0>)
 800784c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007850:	2206      	movs	r2, #6
 8007852:	f7f8 fccd 	bl	80001f0 <memchr>
 8007856:	2800      	cmp	r0, #0
 8007858:	d038      	beq.n	80078cc <_svfiprintf_r+0x1d8>
 800785a:	4b23      	ldr	r3, [pc, #140]	; (80078e8 <_svfiprintf_r+0x1f4>)
 800785c:	bb1b      	cbnz	r3, 80078a6 <_svfiprintf_r+0x1b2>
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	3307      	adds	r3, #7
 8007862:	f023 0307 	bic.w	r3, r3, #7
 8007866:	3308      	adds	r3, #8
 8007868:	9303      	str	r3, [sp, #12]
 800786a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786c:	4433      	add	r3, r6
 800786e:	9309      	str	r3, [sp, #36]	; 0x24
 8007870:	e767      	b.n	8007742 <_svfiprintf_r+0x4e>
 8007872:	fb0c 3202 	mla	r2, ip, r2, r3
 8007876:	460c      	mov	r4, r1
 8007878:	2001      	movs	r0, #1
 800787a:	e7a5      	b.n	80077c8 <_svfiprintf_r+0xd4>
 800787c:	2300      	movs	r3, #0
 800787e:	3401      	adds	r4, #1
 8007880:	9305      	str	r3, [sp, #20]
 8007882:	4619      	mov	r1, r3
 8007884:	f04f 0c0a 	mov.w	ip, #10
 8007888:	4620      	mov	r0, r4
 800788a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800788e:	3a30      	subs	r2, #48	; 0x30
 8007890:	2a09      	cmp	r2, #9
 8007892:	d903      	bls.n	800789c <_svfiprintf_r+0x1a8>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0c5      	beq.n	8007824 <_svfiprintf_r+0x130>
 8007898:	9105      	str	r1, [sp, #20]
 800789a:	e7c3      	b.n	8007824 <_svfiprintf_r+0x130>
 800789c:	fb0c 2101 	mla	r1, ip, r1, r2
 80078a0:	4604      	mov	r4, r0
 80078a2:	2301      	movs	r3, #1
 80078a4:	e7f0      	b.n	8007888 <_svfiprintf_r+0x194>
 80078a6:	ab03      	add	r3, sp, #12
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	462a      	mov	r2, r5
 80078ac:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <_svfiprintf_r+0x1f8>)
 80078ae:	a904      	add	r1, sp, #16
 80078b0:	4638      	mov	r0, r7
 80078b2:	f7fc fa47 	bl	8003d44 <_printf_float>
 80078b6:	1c42      	adds	r2, r0, #1
 80078b8:	4606      	mov	r6, r0
 80078ba:	d1d6      	bne.n	800786a <_svfiprintf_r+0x176>
 80078bc:	89ab      	ldrh	r3, [r5, #12]
 80078be:	065b      	lsls	r3, r3, #25
 80078c0:	f53f af2c 	bmi.w	800771c <_svfiprintf_r+0x28>
 80078c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078c6:	b01d      	add	sp, #116	; 0x74
 80078c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078cc:	ab03      	add	r3, sp, #12
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	462a      	mov	r2, r5
 80078d2:	4b06      	ldr	r3, [pc, #24]	; (80078ec <_svfiprintf_r+0x1f8>)
 80078d4:	a904      	add	r1, sp, #16
 80078d6:	4638      	mov	r0, r7
 80078d8:	f7fc fcd8 	bl	800428c <_printf_i>
 80078dc:	e7eb      	b.n	80078b6 <_svfiprintf_r+0x1c2>
 80078de:	bf00      	nop
 80078e0:	080099bc 	.word	0x080099bc
 80078e4:	080099c6 	.word	0x080099c6
 80078e8:	08003d45 	.word	0x08003d45
 80078ec:	0800763d 	.word	0x0800763d
 80078f0:	080099c2 	.word	0x080099c2
 80078f4:	00000000 	.word	0x00000000

080078f8 <nan>:
 80078f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007900 <nan+0x8>
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	00000000 	.word	0x00000000
 8007904:	7ff80000 	.word	0x7ff80000

08007908 <_sbrk_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4d06      	ldr	r5, [pc, #24]	; (8007924 <_sbrk_r+0x1c>)
 800790c:	2300      	movs	r3, #0
 800790e:	4604      	mov	r4, r0
 8007910:	4608      	mov	r0, r1
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	f7f9 ffbc 	bl	8001890 <_sbrk>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d102      	bne.n	8007922 <_sbrk_r+0x1a>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	b103      	cbz	r3, 8007922 <_sbrk_r+0x1a>
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	20000340 	.word	0x20000340

08007928 <strncmp>:
 8007928:	b510      	push	{r4, lr}
 800792a:	b17a      	cbz	r2, 800794c <strncmp+0x24>
 800792c:	4603      	mov	r3, r0
 800792e:	3901      	subs	r1, #1
 8007930:	1884      	adds	r4, r0, r2
 8007932:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007936:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800793a:	4290      	cmp	r0, r2
 800793c:	d101      	bne.n	8007942 <strncmp+0x1a>
 800793e:	42a3      	cmp	r3, r4
 8007940:	d101      	bne.n	8007946 <strncmp+0x1e>
 8007942:	1a80      	subs	r0, r0, r2
 8007944:	bd10      	pop	{r4, pc}
 8007946:	2800      	cmp	r0, #0
 8007948:	d1f3      	bne.n	8007932 <strncmp+0xa>
 800794a:	e7fa      	b.n	8007942 <strncmp+0x1a>
 800794c:	4610      	mov	r0, r2
 800794e:	e7f9      	b.n	8007944 <strncmp+0x1c>

08007950 <__ascii_wctomb>:
 8007950:	b149      	cbz	r1, 8007966 <__ascii_wctomb+0x16>
 8007952:	2aff      	cmp	r2, #255	; 0xff
 8007954:	bf85      	ittet	hi
 8007956:	238a      	movhi	r3, #138	; 0x8a
 8007958:	6003      	strhi	r3, [r0, #0]
 800795a:	700a      	strbls	r2, [r1, #0]
 800795c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007960:	bf98      	it	ls
 8007962:	2001      	movls	r0, #1
 8007964:	4770      	bx	lr
 8007966:	4608      	mov	r0, r1
 8007968:	4770      	bx	lr
	...

0800796c <__assert_func>:
 800796c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800796e:	4614      	mov	r4, r2
 8007970:	461a      	mov	r2, r3
 8007972:	4b09      	ldr	r3, [pc, #36]	; (8007998 <__assert_func+0x2c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4605      	mov	r5, r0
 8007978:	68d8      	ldr	r0, [r3, #12]
 800797a:	b14c      	cbz	r4, 8007990 <__assert_func+0x24>
 800797c:	4b07      	ldr	r3, [pc, #28]	; (800799c <__assert_func+0x30>)
 800797e:	9100      	str	r1, [sp, #0]
 8007980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007984:	4906      	ldr	r1, [pc, #24]	; (80079a0 <__assert_func+0x34>)
 8007986:	462b      	mov	r3, r5
 8007988:	f000 f80e 	bl	80079a8 <fiprintf>
 800798c:	f000 fa8c 	bl	8007ea8 <abort>
 8007990:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <__assert_func+0x38>)
 8007992:	461c      	mov	r4, r3
 8007994:	e7f3      	b.n	800797e <__assert_func+0x12>
 8007996:	bf00      	nop
 8007998:	2000000c 	.word	0x2000000c
 800799c:	080099cd 	.word	0x080099cd
 80079a0:	080099da 	.word	0x080099da
 80079a4:	08009a08 	.word	0x08009a08

080079a8 <fiprintf>:
 80079a8:	b40e      	push	{r1, r2, r3}
 80079aa:	b503      	push	{r0, r1, lr}
 80079ac:	4601      	mov	r1, r0
 80079ae:	ab03      	add	r3, sp, #12
 80079b0:	4805      	ldr	r0, [pc, #20]	; (80079c8 <fiprintf+0x20>)
 80079b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b6:	6800      	ldr	r0, [r0, #0]
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	f000 f885 	bl	8007ac8 <_vfiprintf_r>
 80079be:	b002      	add	sp, #8
 80079c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079c4:	b003      	add	sp, #12
 80079c6:	4770      	bx	lr
 80079c8:	2000000c 	.word	0x2000000c

080079cc <memmove>:
 80079cc:	4288      	cmp	r0, r1
 80079ce:	b510      	push	{r4, lr}
 80079d0:	eb01 0402 	add.w	r4, r1, r2
 80079d4:	d902      	bls.n	80079dc <memmove+0x10>
 80079d6:	4284      	cmp	r4, r0
 80079d8:	4623      	mov	r3, r4
 80079da:	d807      	bhi.n	80079ec <memmove+0x20>
 80079dc:	1e43      	subs	r3, r0, #1
 80079de:	42a1      	cmp	r1, r4
 80079e0:	d008      	beq.n	80079f4 <memmove+0x28>
 80079e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079ea:	e7f8      	b.n	80079de <memmove+0x12>
 80079ec:	4402      	add	r2, r0
 80079ee:	4601      	mov	r1, r0
 80079f0:	428a      	cmp	r2, r1
 80079f2:	d100      	bne.n	80079f6 <memmove+0x2a>
 80079f4:	bd10      	pop	{r4, pc}
 80079f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079fe:	e7f7      	b.n	80079f0 <memmove+0x24>

08007a00 <__malloc_lock>:
 8007a00:	4801      	ldr	r0, [pc, #4]	; (8007a08 <__malloc_lock+0x8>)
 8007a02:	f000 bc11 	b.w	8008228 <__retarget_lock_acquire_recursive>
 8007a06:	bf00      	nop
 8007a08:	20000344 	.word	0x20000344

08007a0c <__malloc_unlock>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	; (8007a14 <__malloc_unlock+0x8>)
 8007a0e:	f000 bc0c 	b.w	800822a <__retarget_lock_release_recursive>
 8007a12:	bf00      	nop
 8007a14:	20000344 	.word	0x20000344

08007a18 <_realloc_r>:
 8007a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	4614      	mov	r4, r2
 8007a20:	460e      	mov	r6, r1
 8007a22:	b921      	cbnz	r1, 8007a2e <_realloc_r+0x16>
 8007a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a28:	4611      	mov	r1, r2
 8007a2a:	f7ff bd93 	b.w	8007554 <_malloc_r>
 8007a2e:	b92a      	cbnz	r2, 8007a3c <_realloc_r+0x24>
 8007a30:	f7ff fd24 	bl	800747c <_free_r>
 8007a34:	4625      	mov	r5, r4
 8007a36:	4628      	mov	r0, r5
 8007a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a3c:	f000 fc5c 	bl	80082f8 <_malloc_usable_size_r>
 8007a40:	4284      	cmp	r4, r0
 8007a42:	4607      	mov	r7, r0
 8007a44:	d802      	bhi.n	8007a4c <_realloc_r+0x34>
 8007a46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a4a:	d812      	bhi.n	8007a72 <_realloc_r+0x5a>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4640      	mov	r0, r8
 8007a50:	f7ff fd80 	bl	8007554 <_malloc_r>
 8007a54:	4605      	mov	r5, r0
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d0ed      	beq.n	8007a36 <_realloc_r+0x1e>
 8007a5a:	42bc      	cmp	r4, r7
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	4631      	mov	r1, r6
 8007a60:	bf28      	it	cs
 8007a62:	463a      	movcs	r2, r7
 8007a64:	f7ff f824 	bl	8006ab0 <memcpy>
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	f7ff fd06 	bl	800747c <_free_r>
 8007a70:	e7e1      	b.n	8007a36 <_realloc_r+0x1e>
 8007a72:	4635      	mov	r5, r6
 8007a74:	e7df      	b.n	8007a36 <_realloc_r+0x1e>

08007a76 <__sfputc_r>:
 8007a76:	6893      	ldr	r3, [r2, #8]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	b410      	push	{r4}
 8007a7e:	6093      	str	r3, [r2, #8]
 8007a80:	da08      	bge.n	8007a94 <__sfputc_r+0x1e>
 8007a82:	6994      	ldr	r4, [r2, #24]
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	db01      	blt.n	8007a8c <__sfputc_r+0x16>
 8007a88:	290a      	cmp	r1, #10
 8007a8a:	d103      	bne.n	8007a94 <__sfputc_r+0x1e>
 8007a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a90:	f000 b94a 	b.w	8007d28 <__swbuf_r>
 8007a94:	6813      	ldr	r3, [r2, #0]
 8007a96:	1c58      	adds	r0, r3, #1
 8007a98:	6010      	str	r0, [r2, #0]
 8007a9a:	7019      	strb	r1, [r3, #0]
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <__sfputs_r>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460f      	mov	r7, r1
 8007aaa:	4614      	mov	r4, r2
 8007aac:	18d5      	adds	r5, r2, r3
 8007aae:	42ac      	cmp	r4, r5
 8007ab0:	d101      	bne.n	8007ab6 <__sfputs_r+0x12>
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	e007      	b.n	8007ac6 <__sfputs_r+0x22>
 8007ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aba:	463a      	mov	r2, r7
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff ffda 	bl	8007a76 <__sfputc_r>
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	d1f3      	bne.n	8007aae <__sfputs_r+0xa>
 8007ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ac8 <_vfiprintf_r>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	460d      	mov	r5, r1
 8007ace:	b09d      	sub	sp, #116	; 0x74
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	4698      	mov	r8, r3
 8007ad4:	4606      	mov	r6, r0
 8007ad6:	b118      	cbz	r0, 8007ae0 <_vfiprintf_r+0x18>
 8007ad8:	6983      	ldr	r3, [r0, #24]
 8007ada:	b90b      	cbnz	r3, 8007ae0 <_vfiprintf_r+0x18>
 8007adc:	f000 fb06 	bl	80080ec <__sinit>
 8007ae0:	4b89      	ldr	r3, [pc, #548]	; (8007d08 <_vfiprintf_r+0x240>)
 8007ae2:	429d      	cmp	r5, r3
 8007ae4:	d11b      	bne.n	8007b1e <_vfiprintf_r+0x56>
 8007ae6:	6875      	ldr	r5, [r6, #4]
 8007ae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aea:	07d9      	lsls	r1, r3, #31
 8007aec:	d405      	bmi.n	8007afa <_vfiprintf_r+0x32>
 8007aee:	89ab      	ldrh	r3, [r5, #12]
 8007af0:	059a      	lsls	r2, r3, #22
 8007af2:	d402      	bmi.n	8007afa <_vfiprintf_r+0x32>
 8007af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007af6:	f000 fb97 	bl	8008228 <__retarget_lock_acquire_recursive>
 8007afa:	89ab      	ldrh	r3, [r5, #12]
 8007afc:	071b      	lsls	r3, r3, #28
 8007afe:	d501      	bpl.n	8007b04 <_vfiprintf_r+0x3c>
 8007b00:	692b      	ldr	r3, [r5, #16]
 8007b02:	b9eb      	cbnz	r3, 8007b40 <_vfiprintf_r+0x78>
 8007b04:	4629      	mov	r1, r5
 8007b06:	4630      	mov	r0, r6
 8007b08:	f000 f960 	bl	8007dcc <__swsetup_r>
 8007b0c:	b1c0      	cbz	r0, 8007b40 <_vfiprintf_r+0x78>
 8007b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b10:	07dc      	lsls	r4, r3, #31
 8007b12:	d50e      	bpl.n	8007b32 <_vfiprintf_r+0x6a>
 8007b14:	f04f 30ff 	mov.w	r0, #4294967295
 8007b18:	b01d      	add	sp, #116	; 0x74
 8007b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1e:	4b7b      	ldr	r3, [pc, #492]	; (8007d0c <_vfiprintf_r+0x244>)
 8007b20:	429d      	cmp	r5, r3
 8007b22:	d101      	bne.n	8007b28 <_vfiprintf_r+0x60>
 8007b24:	68b5      	ldr	r5, [r6, #8]
 8007b26:	e7df      	b.n	8007ae8 <_vfiprintf_r+0x20>
 8007b28:	4b79      	ldr	r3, [pc, #484]	; (8007d10 <_vfiprintf_r+0x248>)
 8007b2a:	429d      	cmp	r5, r3
 8007b2c:	bf08      	it	eq
 8007b2e:	68f5      	ldreq	r5, [r6, #12]
 8007b30:	e7da      	b.n	8007ae8 <_vfiprintf_r+0x20>
 8007b32:	89ab      	ldrh	r3, [r5, #12]
 8007b34:	0598      	lsls	r0, r3, #22
 8007b36:	d4ed      	bmi.n	8007b14 <_vfiprintf_r+0x4c>
 8007b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b3a:	f000 fb76 	bl	800822a <__retarget_lock_release_recursive>
 8007b3e:	e7e9      	b.n	8007b14 <_vfiprintf_r+0x4c>
 8007b40:	2300      	movs	r3, #0
 8007b42:	9309      	str	r3, [sp, #36]	; 0x24
 8007b44:	2320      	movs	r3, #32
 8007b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b4e:	2330      	movs	r3, #48	; 0x30
 8007b50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d14 <_vfiprintf_r+0x24c>
 8007b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b58:	f04f 0901 	mov.w	r9, #1
 8007b5c:	4623      	mov	r3, r4
 8007b5e:	469a      	mov	sl, r3
 8007b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b64:	b10a      	cbz	r2, 8007b6a <_vfiprintf_r+0xa2>
 8007b66:	2a25      	cmp	r2, #37	; 0x25
 8007b68:	d1f9      	bne.n	8007b5e <_vfiprintf_r+0x96>
 8007b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8007b6e:	d00b      	beq.n	8007b88 <_vfiprintf_r+0xc0>
 8007b70:	465b      	mov	r3, fp
 8007b72:	4622      	mov	r2, r4
 8007b74:	4629      	mov	r1, r5
 8007b76:	4630      	mov	r0, r6
 8007b78:	f7ff ff94 	bl	8007aa4 <__sfputs_r>
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	f000 80aa 	beq.w	8007cd6 <_vfiprintf_r+0x20e>
 8007b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b84:	445a      	add	r2, fp
 8007b86:	9209      	str	r2, [sp, #36]	; 0x24
 8007b88:	f89a 3000 	ldrb.w	r3, [sl]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80a2 	beq.w	8007cd6 <_vfiprintf_r+0x20e>
 8007b92:	2300      	movs	r3, #0
 8007b94:	f04f 32ff 	mov.w	r2, #4294967295
 8007b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b9c:	f10a 0a01 	add.w	sl, sl, #1
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	9307      	str	r3, [sp, #28]
 8007ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8007baa:	4654      	mov	r4, sl
 8007bac:	2205      	movs	r2, #5
 8007bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb2:	4858      	ldr	r0, [pc, #352]	; (8007d14 <_vfiprintf_r+0x24c>)
 8007bb4:	f7f8 fb1c 	bl	80001f0 <memchr>
 8007bb8:	9a04      	ldr	r2, [sp, #16]
 8007bba:	b9d8      	cbnz	r0, 8007bf4 <_vfiprintf_r+0x12c>
 8007bbc:	06d1      	lsls	r1, r2, #27
 8007bbe:	bf44      	itt	mi
 8007bc0:	2320      	movmi	r3, #32
 8007bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc6:	0713      	lsls	r3, r2, #28
 8007bc8:	bf44      	itt	mi
 8007bca:	232b      	movmi	r3, #43	; 0x2b
 8007bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8007bd6:	d015      	beq.n	8007c04 <_vfiprintf_r+0x13c>
 8007bd8:	9a07      	ldr	r2, [sp, #28]
 8007bda:	4654      	mov	r4, sl
 8007bdc:	2000      	movs	r0, #0
 8007bde:	f04f 0c0a 	mov.w	ip, #10
 8007be2:	4621      	mov	r1, r4
 8007be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007be8:	3b30      	subs	r3, #48	; 0x30
 8007bea:	2b09      	cmp	r3, #9
 8007bec:	d94e      	bls.n	8007c8c <_vfiprintf_r+0x1c4>
 8007bee:	b1b0      	cbz	r0, 8007c1e <_vfiprintf_r+0x156>
 8007bf0:	9207      	str	r2, [sp, #28]
 8007bf2:	e014      	b.n	8007c1e <_vfiprintf_r+0x156>
 8007bf4:	eba0 0308 	sub.w	r3, r0, r8
 8007bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	9304      	str	r3, [sp, #16]
 8007c00:	46a2      	mov	sl, r4
 8007c02:	e7d2      	b.n	8007baa <_vfiprintf_r+0xe2>
 8007c04:	9b03      	ldr	r3, [sp, #12]
 8007c06:	1d19      	adds	r1, r3, #4
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	9103      	str	r1, [sp, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bfbb      	ittet	lt
 8007c10:	425b      	neglt	r3, r3
 8007c12:	f042 0202 	orrlt.w	r2, r2, #2
 8007c16:	9307      	strge	r3, [sp, #28]
 8007c18:	9307      	strlt	r3, [sp, #28]
 8007c1a:	bfb8      	it	lt
 8007c1c:	9204      	strlt	r2, [sp, #16]
 8007c1e:	7823      	ldrb	r3, [r4, #0]
 8007c20:	2b2e      	cmp	r3, #46	; 0x2e
 8007c22:	d10c      	bne.n	8007c3e <_vfiprintf_r+0x176>
 8007c24:	7863      	ldrb	r3, [r4, #1]
 8007c26:	2b2a      	cmp	r3, #42	; 0x2a
 8007c28:	d135      	bne.n	8007c96 <_vfiprintf_r+0x1ce>
 8007c2a:	9b03      	ldr	r3, [sp, #12]
 8007c2c:	1d1a      	adds	r2, r3, #4
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	9203      	str	r2, [sp, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfb8      	it	lt
 8007c36:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c3a:	3402      	adds	r4, #2
 8007c3c:	9305      	str	r3, [sp, #20]
 8007c3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d24 <_vfiprintf_r+0x25c>
 8007c42:	7821      	ldrb	r1, [r4, #0]
 8007c44:	2203      	movs	r2, #3
 8007c46:	4650      	mov	r0, sl
 8007c48:	f7f8 fad2 	bl	80001f0 <memchr>
 8007c4c:	b140      	cbz	r0, 8007c60 <_vfiprintf_r+0x198>
 8007c4e:	2340      	movs	r3, #64	; 0x40
 8007c50:	eba0 000a 	sub.w	r0, r0, sl
 8007c54:	fa03 f000 	lsl.w	r0, r3, r0
 8007c58:	9b04      	ldr	r3, [sp, #16]
 8007c5a:	4303      	orrs	r3, r0
 8007c5c:	3401      	adds	r4, #1
 8007c5e:	9304      	str	r3, [sp, #16]
 8007c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c64:	482c      	ldr	r0, [pc, #176]	; (8007d18 <_vfiprintf_r+0x250>)
 8007c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c6a:	2206      	movs	r2, #6
 8007c6c:	f7f8 fac0 	bl	80001f0 <memchr>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d03f      	beq.n	8007cf4 <_vfiprintf_r+0x22c>
 8007c74:	4b29      	ldr	r3, [pc, #164]	; (8007d1c <_vfiprintf_r+0x254>)
 8007c76:	bb1b      	cbnz	r3, 8007cc0 <_vfiprintf_r+0x1f8>
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	3307      	adds	r3, #7
 8007c7c:	f023 0307 	bic.w	r3, r3, #7
 8007c80:	3308      	adds	r3, #8
 8007c82:	9303      	str	r3, [sp, #12]
 8007c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c86:	443b      	add	r3, r7
 8007c88:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8a:	e767      	b.n	8007b5c <_vfiprintf_r+0x94>
 8007c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c90:	460c      	mov	r4, r1
 8007c92:	2001      	movs	r0, #1
 8007c94:	e7a5      	b.n	8007be2 <_vfiprintf_r+0x11a>
 8007c96:	2300      	movs	r3, #0
 8007c98:	3401      	adds	r4, #1
 8007c9a:	9305      	str	r3, [sp, #20]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	f04f 0c0a 	mov.w	ip, #10
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ca8:	3a30      	subs	r2, #48	; 0x30
 8007caa:	2a09      	cmp	r2, #9
 8007cac:	d903      	bls.n	8007cb6 <_vfiprintf_r+0x1ee>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0c5      	beq.n	8007c3e <_vfiprintf_r+0x176>
 8007cb2:	9105      	str	r1, [sp, #20]
 8007cb4:	e7c3      	b.n	8007c3e <_vfiprintf_r+0x176>
 8007cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cba:	4604      	mov	r4, r0
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e7f0      	b.n	8007ca2 <_vfiprintf_r+0x1da>
 8007cc0:	ab03      	add	r3, sp, #12
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	4b16      	ldr	r3, [pc, #88]	; (8007d20 <_vfiprintf_r+0x258>)
 8007cc8:	a904      	add	r1, sp, #16
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7fc f83a 	bl	8003d44 <_printf_float>
 8007cd0:	4607      	mov	r7, r0
 8007cd2:	1c78      	adds	r0, r7, #1
 8007cd4:	d1d6      	bne.n	8007c84 <_vfiprintf_r+0x1bc>
 8007cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cd8:	07d9      	lsls	r1, r3, #31
 8007cda:	d405      	bmi.n	8007ce8 <_vfiprintf_r+0x220>
 8007cdc:	89ab      	ldrh	r3, [r5, #12]
 8007cde:	059a      	lsls	r2, r3, #22
 8007ce0:	d402      	bmi.n	8007ce8 <_vfiprintf_r+0x220>
 8007ce2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ce4:	f000 faa1 	bl	800822a <__retarget_lock_release_recursive>
 8007ce8:	89ab      	ldrh	r3, [r5, #12]
 8007cea:	065b      	lsls	r3, r3, #25
 8007cec:	f53f af12 	bmi.w	8007b14 <_vfiprintf_r+0x4c>
 8007cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cf2:	e711      	b.n	8007b18 <_vfiprintf_r+0x50>
 8007cf4:	ab03      	add	r3, sp, #12
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	462a      	mov	r2, r5
 8007cfa:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <_vfiprintf_r+0x258>)
 8007cfc:	a904      	add	r1, sp, #16
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f7fc fac4 	bl	800428c <_printf_i>
 8007d04:	e7e4      	b.n	8007cd0 <_vfiprintf_r+0x208>
 8007d06:	bf00      	nop
 8007d08:	08009a2c 	.word	0x08009a2c
 8007d0c:	08009a4c 	.word	0x08009a4c
 8007d10:	08009a0c 	.word	0x08009a0c
 8007d14:	080099bc 	.word	0x080099bc
 8007d18:	080099c6 	.word	0x080099c6
 8007d1c:	08003d45 	.word	0x08003d45
 8007d20:	08007aa5 	.word	0x08007aa5
 8007d24:	080099c2 	.word	0x080099c2

08007d28 <__swbuf_r>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	460e      	mov	r6, r1
 8007d2c:	4614      	mov	r4, r2
 8007d2e:	4605      	mov	r5, r0
 8007d30:	b118      	cbz	r0, 8007d3a <__swbuf_r+0x12>
 8007d32:	6983      	ldr	r3, [r0, #24]
 8007d34:	b90b      	cbnz	r3, 8007d3a <__swbuf_r+0x12>
 8007d36:	f000 f9d9 	bl	80080ec <__sinit>
 8007d3a:	4b21      	ldr	r3, [pc, #132]	; (8007dc0 <__swbuf_r+0x98>)
 8007d3c:	429c      	cmp	r4, r3
 8007d3e:	d12b      	bne.n	8007d98 <__swbuf_r+0x70>
 8007d40:	686c      	ldr	r4, [r5, #4]
 8007d42:	69a3      	ldr	r3, [r4, #24]
 8007d44:	60a3      	str	r3, [r4, #8]
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	071a      	lsls	r2, r3, #28
 8007d4a:	d52f      	bpl.n	8007dac <__swbuf_r+0x84>
 8007d4c:	6923      	ldr	r3, [r4, #16]
 8007d4e:	b36b      	cbz	r3, 8007dac <__swbuf_r+0x84>
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	6820      	ldr	r0, [r4, #0]
 8007d54:	1ac0      	subs	r0, r0, r3
 8007d56:	6963      	ldr	r3, [r4, #20]
 8007d58:	b2f6      	uxtb	r6, r6
 8007d5a:	4283      	cmp	r3, r0
 8007d5c:	4637      	mov	r7, r6
 8007d5e:	dc04      	bgt.n	8007d6a <__swbuf_r+0x42>
 8007d60:	4621      	mov	r1, r4
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 f92e 	bl	8007fc4 <_fflush_r>
 8007d68:	bb30      	cbnz	r0, 8007db8 <__swbuf_r+0x90>
 8007d6a:	68a3      	ldr	r3, [r4, #8]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	60a3      	str	r3, [r4, #8]
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	6022      	str	r2, [r4, #0]
 8007d76:	701e      	strb	r6, [r3, #0]
 8007d78:	6963      	ldr	r3, [r4, #20]
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	4283      	cmp	r3, r0
 8007d7e:	d004      	beq.n	8007d8a <__swbuf_r+0x62>
 8007d80:	89a3      	ldrh	r3, [r4, #12]
 8007d82:	07db      	lsls	r3, r3, #31
 8007d84:	d506      	bpl.n	8007d94 <__swbuf_r+0x6c>
 8007d86:	2e0a      	cmp	r6, #10
 8007d88:	d104      	bne.n	8007d94 <__swbuf_r+0x6c>
 8007d8a:	4621      	mov	r1, r4
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	f000 f919 	bl	8007fc4 <_fflush_r>
 8007d92:	b988      	cbnz	r0, 8007db8 <__swbuf_r+0x90>
 8007d94:	4638      	mov	r0, r7
 8007d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <__swbuf_r+0x9c>)
 8007d9a:	429c      	cmp	r4, r3
 8007d9c:	d101      	bne.n	8007da2 <__swbuf_r+0x7a>
 8007d9e:	68ac      	ldr	r4, [r5, #8]
 8007da0:	e7cf      	b.n	8007d42 <__swbuf_r+0x1a>
 8007da2:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <__swbuf_r+0xa0>)
 8007da4:	429c      	cmp	r4, r3
 8007da6:	bf08      	it	eq
 8007da8:	68ec      	ldreq	r4, [r5, #12]
 8007daa:	e7ca      	b.n	8007d42 <__swbuf_r+0x1a>
 8007dac:	4621      	mov	r1, r4
 8007dae:	4628      	mov	r0, r5
 8007db0:	f000 f80c 	bl	8007dcc <__swsetup_r>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d0cb      	beq.n	8007d50 <__swbuf_r+0x28>
 8007db8:	f04f 37ff 	mov.w	r7, #4294967295
 8007dbc:	e7ea      	b.n	8007d94 <__swbuf_r+0x6c>
 8007dbe:	bf00      	nop
 8007dc0:	08009a2c 	.word	0x08009a2c
 8007dc4:	08009a4c 	.word	0x08009a4c
 8007dc8:	08009a0c 	.word	0x08009a0c

08007dcc <__swsetup_r>:
 8007dcc:	4b32      	ldr	r3, [pc, #200]	; (8007e98 <__swsetup_r+0xcc>)
 8007dce:	b570      	push	{r4, r5, r6, lr}
 8007dd0:	681d      	ldr	r5, [r3, #0]
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	b125      	cbz	r5, 8007de2 <__swsetup_r+0x16>
 8007dd8:	69ab      	ldr	r3, [r5, #24]
 8007dda:	b913      	cbnz	r3, 8007de2 <__swsetup_r+0x16>
 8007ddc:	4628      	mov	r0, r5
 8007dde:	f000 f985 	bl	80080ec <__sinit>
 8007de2:	4b2e      	ldr	r3, [pc, #184]	; (8007e9c <__swsetup_r+0xd0>)
 8007de4:	429c      	cmp	r4, r3
 8007de6:	d10f      	bne.n	8007e08 <__swsetup_r+0x3c>
 8007de8:	686c      	ldr	r4, [r5, #4]
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007df0:	0719      	lsls	r1, r3, #28
 8007df2:	d42c      	bmi.n	8007e4e <__swsetup_r+0x82>
 8007df4:	06dd      	lsls	r5, r3, #27
 8007df6:	d411      	bmi.n	8007e1c <__swsetup_r+0x50>
 8007df8:	2309      	movs	r3, #9
 8007dfa:	6033      	str	r3, [r6, #0]
 8007dfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e00:	81a3      	strh	r3, [r4, #12]
 8007e02:	f04f 30ff 	mov.w	r0, #4294967295
 8007e06:	e03e      	b.n	8007e86 <__swsetup_r+0xba>
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <__swsetup_r+0xd4>)
 8007e0a:	429c      	cmp	r4, r3
 8007e0c:	d101      	bne.n	8007e12 <__swsetup_r+0x46>
 8007e0e:	68ac      	ldr	r4, [r5, #8]
 8007e10:	e7eb      	b.n	8007dea <__swsetup_r+0x1e>
 8007e12:	4b24      	ldr	r3, [pc, #144]	; (8007ea4 <__swsetup_r+0xd8>)
 8007e14:	429c      	cmp	r4, r3
 8007e16:	bf08      	it	eq
 8007e18:	68ec      	ldreq	r4, [r5, #12]
 8007e1a:	e7e6      	b.n	8007dea <__swsetup_r+0x1e>
 8007e1c:	0758      	lsls	r0, r3, #29
 8007e1e:	d512      	bpl.n	8007e46 <__swsetup_r+0x7a>
 8007e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e22:	b141      	cbz	r1, 8007e36 <__swsetup_r+0x6a>
 8007e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e28:	4299      	cmp	r1, r3
 8007e2a:	d002      	beq.n	8007e32 <__swsetup_r+0x66>
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7ff fb25 	bl	800747c <_free_r>
 8007e32:	2300      	movs	r3, #0
 8007e34:	6363      	str	r3, [r4, #52]	; 0x34
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	6063      	str	r3, [r4, #4]
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f043 0308 	orr.w	r3, r3, #8
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	6923      	ldr	r3, [r4, #16]
 8007e50:	b94b      	cbnz	r3, 8007e66 <__swsetup_r+0x9a>
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e5c:	d003      	beq.n	8007e66 <__swsetup_r+0x9a>
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4630      	mov	r0, r6
 8007e62:	f000 fa09 	bl	8008278 <__smakebuf_r>
 8007e66:	89a0      	ldrh	r0, [r4, #12]
 8007e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e6c:	f010 0301 	ands.w	r3, r0, #1
 8007e70:	d00a      	beq.n	8007e88 <__swsetup_r+0xbc>
 8007e72:	2300      	movs	r3, #0
 8007e74:	60a3      	str	r3, [r4, #8]
 8007e76:	6963      	ldr	r3, [r4, #20]
 8007e78:	425b      	negs	r3, r3
 8007e7a:	61a3      	str	r3, [r4, #24]
 8007e7c:	6923      	ldr	r3, [r4, #16]
 8007e7e:	b943      	cbnz	r3, 8007e92 <__swsetup_r+0xc6>
 8007e80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e84:	d1ba      	bne.n	8007dfc <__swsetup_r+0x30>
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	0781      	lsls	r1, r0, #30
 8007e8a:	bf58      	it	pl
 8007e8c:	6963      	ldrpl	r3, [r4, #20]
 8007e8e:	60a3      	str	r3, [r4, #8]
 8007e90:	e7f4      	b.n	8007e7c <__swsetup_r+0xb0>
 8007e92:	2000      	movs	r0, #0
 8007e94:	e7f7      	b.n	8007e86 <__swsetup_r+0xba>
 8007e96:	bf00      	nop
 8007e98:	2000000c 	.word	0x2000000c
 8007e9c:	08009a2c 	.word	0x08009a2c
 8007ea0:	08009a4c 	.word	0x08009a4c
 8007ea4:	08009a0c 	.word	0x08009a0c

08007ea8 <abort>:
 8007ea8:	b508      	push	{r3, lr}
 8007eaa:	2006      	movs	r0, #6
 8007eac:	f000 fa54 	bl	8008358 <raise>
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	f7f9 fc75 	bl	80017a0 <_exit>
	...

08007eb8 <__sflush_r>:
 8007eb8:	898a      	ldrh	r2, [r1, #12]
 8007eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	0710      	lsls	r0, r2, #28
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	d458      	bmi.n	8007f78 <__sflush_r+0xc0>
 8007ec6:	684b      	ldr	r3, [r1, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dc05      	bgt.n	8007ed8 <__sflush_r+0x20>
 8007ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	dc02      	bgt.n	8007ed8 <__sflush_r+0x20>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eda:	2e00      	cmp	r6, #0
 8007edc:	d0f9      	beq.n	8007ed2 <__sflush_r+0x1a>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ee4:	682f      	ldr	r7, [r5, #0]
 8007ee6:	602b      	str	r3, [r5, #0]
 8007ee8:	d032      	beq.n	8007f50 <__sflush_r+0x98>
 8007eea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	075a      	lsls	r2, r3, #29
 8007ef0:	d505      	bpl.n	8007efe <__sflush_r+0x46>
 8007ef2:	6863      	ldr	r3, [r4, #4]
 8007ef4:	1ac0      	subs	r0, r0, r3
 8007ef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ef8:	b10b      	cbz	r3, 8007efe <__sflush_r+0x46>
 8007efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007efc:	1ac0      	subs	r0, r0, r3
 8007efe:	2300      	movs	r3, #0
 8007f00:	4602      	mov	r2, r0
 8007f02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f04:	6a21      	ldr	r1, [r4, #32]
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b0      	blx	r6
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	d106      	bne.n	8007f1e <__sflush_r+0x66>
 8007f10:	6829      	ldr	r1, [r5, #0]
 8007f12:	291d      	cmp	r1, #29
 8007f14:	d82c      	bhi.n	8007f70 <__sflush_r+0xb8>
 8007f16:	4a2a      	ldr	r2, [pc, #168]	; (8007fc0 <__sflush_r+0x108>)
 8007f18:	40ca      	lsrs	r2, r1
 8007f1a:	07d6      	lsls	r6, r2, #31
 8007f1c:	d528      	bpl.n	8007f70 <__sflush_r+0xb8>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	6062      	str	r2, [r4, #4]
 8007f22:	04d9      	lsls	r1, r3, #19
 8007f24:	6922      	ldr	r2, [r4, #16]
 8007f26:	6022      	str	r2, [r4, #0]
 8007f28:	d504      	bpl.n	8007f34 <__sflush_r+0x7c>
 8007f2a:	1c42      	adds	r2, r0, #1
 8007f2c:	d101      	bne.n	8007f32 <__sflush_r+0x7a>
 8007f2e:	682b      	ldr	r3, [r5, #0]
 8007f30:	b903      	cbnz	r3, 8007f34 <__sflush_r+0x7c>
 8007f32:	6560      	str	r0, [r4, #84]	; 0x54
 8007f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f36:	602f      	str	r7, [r5, #0]
 8007f38:	2900      	cmp	r1, #0
 8007f3a:	d0ca      	beq.n	8007ed2 <__sflush_r+0x1a>
 8007f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f40:	4299      	cmp	r1, r3
 8007f42:	d002      	beq.n	8007f4a <__sflush_r+0x92>
 8007f44:	4628      	mov	r0, r5
 8007f46:	f7ff fa99 	bl	800747c <_free_r>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f4e:	e7c1      	b.n	8007ed4 <__sflush_r+0x1c>
 8007f50:	6a21      	ldr	r1, [r4, #32]
 8007f52:	2301      	movs	r3, #1
 8007f54:	4628      	mov	r0, r5
 8007f56:	47b0      	blx	r6
 8007f58:	1c41      	adds	r1, r0, #1
 8007f5a:	d1c7      	bne.n	8007eec <__sflush_r+0x34>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0c4      	beq.n	8007eec <__sflush_r+0x34>
 8007f62:	2b1d      	cmp	r3, #29
 8007f64:	d001      	beq.n	8007f6a <__sflush_r+0xb2>
 8007f66:	2b16      	cmp	r3, #22
 8007f68:	d101      	bne.n	8007f6e <__sflush_r+0xb6>
 8007f6a:	602f      	str	r7, [r5, #0]
 8007f6c:	e7b1      	b.n	8007ed2 <__sflush_r+0x1a>
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f74:	81a3      	strh	r3, [r4, #12]
 8007f76:	e7ad      	b.n	8007ed4 <__sflush_r+0x1c>
 8007f78:	690f      	ldr	r7, [r1, #16]
 8007f7a:	2f00      	cmp	r7, #0
 8007f7c:	d0a9      	beq.n	8007ed2 <__sflush_r+0x1a>
 8007f7e:	0793      	lsls	r3, r2, #30
 8007f80:	680e      	ldr	r6, [r1, #0]
 8007f82:	bf08      	it	eq
 8007f84:	694b      	ldreq	r3, [r1, #20]
 8007f86:	600f      	str	r7, [r1, #0]
 8007f88:	bf18      	it	ne
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	eba6 0807 	sub.w	r8, r6, r7
 8007f90:	608b      	str	r3, [r1, #8]
 8007f92:	f1b8 0f00 	cmp.w	r8, #0
 8007f96:	dd9c      	ble.n	8007ed2 <__sflush_r+0x1a>
 8007f98:	6a21      	ldr	r1, [r4, #32]
 8007f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f9c:	4643      	mov	r3, r8
 8007f9e:	463a      	mov	r2, r7
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b0      	blx	r6
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	dc06      	bgt.n	8007fb6 <__sflush_r+0xfe>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fae:	81a3      	strh	r3, [r4, #12]
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	e78e      	b.n	8007ed4 <__sflush_r+0x1c>
 8007fb6:	4407      	add	r7, r0
 8007fb8:	eba8 0800 	sub.w	r8, r8, r0
 8007fbc:	e7e9      	b.n	8007f92 <__sflush_r+0xda>
 8007fbe:	bf00      	nop
 8007fc0:	20400001 	.word	0x20400001

08007fc4 <_fflush_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	690b      	ldr	r3, [r1, #16]
 8007fc8:	4605      	mov	r5, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	b913      	cbnz	r3, 8007fd4 <_fflush_r+0x10>
 8007fce:	2500      	movs	r5, #0
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	b118      	cbz	r0, 8007fde <_fflush_r+0x1a>
 8007fd6:	6983      	ldr	r3, [r0, #24]
 8007fd8:	b90b      	cbnz	r3, 8007fde <_fflush_r+0x1a>
 8007fda:	f000 f887 	bl	80080ec <__sinit>
 8007fde:	4b14      	ldr	r3, [pc, #80]	; (8008030 <_fflush_r+0x6c>)
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	d11b      	bne.n	800801c <_fflush_r+0x58>
 8007fe4:	686c      	ldr	r4, [r5, #4]
 8007fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0ef      	beq.n	8007fce <_fflush_r+0xa>
 8007fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ff0:	07d0      	lsls	r0, r2, #31
 8007ff2:	d404      	bmi.n	8007ffe <_fflush_r+0x3a>
 8007ff4:	0599      	lsls	r1, r3, #22
 8007ff6:	d402      	bmi.n	8007ffe <_fflush_r+0x3a>
 8007ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ffa:	f000 f915 	bl	8008228 <__retarget_lock_acquire_recursive>
 8007ffe:	4628      	mov	r0, r5
 8008000:	4621      	mov	r1, r4
 8008002:	f7ff ff59 	bl	8007eb8 <__sflush_r>
 8008006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008008:	07da      	lsls	r2, r3, #31
 800800a:	4605      	mov	r5, r0
 800800c:	d4e0      	bmi.n	8007fd0 <_fflush_r+0xc>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	059b      	lsls	r3, r3, #22
 8008012:	d4dd      	bmi.n	8007fd0 <_fflush_r+0xc>
 8008014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008016:	f000 f908 	bl	800822a <__retarget_lock_release_recursive>
 800801a:	e7d9      	b.n	8007fd0 <_fflush_r+0xc>
 800801c:	4b05      	ldr	r3, [pc, #20]	; (8008034 <_fflush_r+0x70>)
 800801e:	429c      	cmp	r4, r3
 8008020:	d101      	bne.n	8008026 <_fflush_r+0x62>
 8008022:	68ac      	ldr	r4, [r5, #8]
 8008024:	e7df      	b.n	8007fe6 <_fflush_r+0x22>
 8008026:	4b04      	ldr	r3, [pc, #16]	; (8008038 <_fflush_r+0x74>)
 8008028:	429c      	cmp	r4, r3
 800802a:	bf08      	it	eq
 800802c:	68ec      	ldreq	r4, [r5, #12]
 800802e:	e7da      	b.n	8007fe6 <_fflush_r+0x22>
 8008030:	08009a2c 	.word	0x08009a2c
 8008034:	08009a4c 	.word	0x08009a4c
 8008038:	08009a0c 	.word	0x08009a0c

0800803c <std>:
 800803c:	2300      	movs	r3, #0
 800803e:	b510      	push	{r4, lr}
 8008040:	4604      	mov	r4, r0
 8008042:	e9c0 3300 	strd	r3, r3, [r0]
 8008046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800804a:	6083      	str	r3, [r0, #8]
 800804c:	8181      	strh	r1, [r0, #12]
 800804e:	6643      	str	r3, [r0, #100]	; 0x64
 8008050:	81c2      	strh	r2, [r0, #14]
 8008052:	6183      	str	r3, [r0, #24]
 8008054:	4619      	mov	r1, r3
 8008056:	2208      	movs	r2, #8
 8008058:	305c      	adds	r0, #92	; 0x5c
 800805a:	f7fb fdcb 	bl	8003bf4 <memset>
 800805e:	4b05      	ldr	r3, [pc, #20]	; (8008074 <std+0x38>)
 8008060:	6263      	str	r3, [r4, #36]	; 0x24
 8008062:	4b05      	ldr	r3, [pc, #20]	; (8008078 <std+0x3c>)
 8008064:	62a3      	str	r3, [r4, #40]	; 0x28
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <std+0x40>)
 8008068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800806a:	4b05      	ldr	r3, [pc, #20]	; (8008080 <std+0x44>)
 800806c:	6224      	str	r4, [r4, #32]
 800806e:	6323      	str	r3, [r4, #48]	; 0x30
 8008070:	bd10      	pop	{r4, pc}
 8008072:	bf00      	nop
 8008074:	08008391 	.word	0x08008391
 8008078:	080083b3 	.word	0x080083b3
 800807c:	080083eb 	.word	0x080083eb
 8008080:	0800840f 	.word	0x0800840f

08008084 <_cleanup_r>:
 8008084:	4901      	ldr	r1, [pc, #4]	; (800808c <_cleanup_r+0x8>)
 8008086:	f000 b8af 	b.w	80081e8 <_fwalk_reent>
 800808a:	bf00      	nop
 800808c:	08007fc5 	.word	0x08007fc5

08008090 <__sfmoreglue>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	2268      	movs	r2, #104	; 0x68
 8008094:	1e4d      	subs	r5, r1, #1
 8008096:	4355      	muls	r5, r2
 8008098:	460e      	mov	r6, r1
 800809a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800809e:	f7ff fa59 	bl	8007554 <_malloc_r>
 80080a2:	4604      	mov	r4, r0
 80080a4:	b140      	cbz	r0, 80080b8 <__sfmoreglue+0x28>
 80080a6:	2100      	movs	r1, #0
 80080a8:	e9c0 1600 	strd	r1, r6, [r0]
 80080ac:	300c      	adds	r0, #12
 80080ae:	60a0      	str	r0, [r4, #8]
 80080b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080b4:	f7fb fd9e 	bl	8003bf4 <memset>
 80080b8:	4620      	mov	r0, r4
 80080ba:	bd70      	pop	{r4, r5, r6, pc}

080080bc <__sfp_lock_acquire>:
 80080bc:	4801      	ldr	r0, [pc, #4]	; (80080c4 <__sfp_lock_acquire+0x8>)
 80080be:	f000 b8b3 	b.w	8008228 <__retarget_lock_acquire_recursive>
 80080c2:	bf00      	nop
 80080c4:	20000345 	.word	0x20000345

080080c8 <__sfp_lock_release>:
 80080c8:	4801      	ldr	r0, [pc, #4]	; (80080d0 <__sfp_lock_release+0x8>)
 80080ca:	f000 b8ae 	b.w	800822a <__retarget_lock_release_recursive>
 80080ce:	bf00      	nop
 80080d0:	20000345 	.word	0x20000345

080080d4 <__sinit_lock_acquire>:
 80080d4:	4801      	ldr	r0, [pc, #4]	; (80080dc <__sinit_lock_acquire+0x8>)
 80080d6:	f000 b8a7 	b.w	8008228 <__retarget_lock_acquire_recursive>
 80080da:	bf00      	nop
 80080dc:	20000346 	.word	0x20000346

080080e0 <__sinit_lock_release>:
 80080e0:	4801      	ldr	r0, [pc, #4]	; (80080e8 <__sinit_lock_release+0x8>)
 80080e2:	f000 b8a2 	b.w	800822a <__retarget_lock_release_recursive>
 80080e6:	bf00      	nop
 80080e8:	20000346 	.word	0x20000346

080080ec <__sinit>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	4604      	mov	r4, r0
 80080f0:	f7ff fff0 	bl	80080d4 <__sinit_lock_acquire>
 80080f4:	69a3      	ldr	r3, [r4, #24]
 80080f6:	b11b      	cbz	r3, 8008100 <__sinit+0x14>
 80080f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080fc:	f7ff bff0 	b.w	80080e0 <__sinit_lock_release>
 8008100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008104:	6523      	str	r3, [r4, #80]	; 0x50
 8008106:	4b13      	ldr	r3, [pc, #76]	; (8008154 <__sinit+0x68>)
 8008108:	4a13      	ldr	r2, [pc, #76]	; (8008158 <__sinit+0x6c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	62a2      	str	r2, [r4, #40]	; 0x28
 800810e:	42a3      	cmp	r3, r4
 8008110:	bf04      	itt	eq
 8008112:	2301      	moveq	r3, #1
 8008114:	61a3      	streq	r3, [r4, #24]
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f820 	bl	800815c <__sfp>
 800811c:	6060      	str	r0, [r4, #4]
 800811e:	4620      	mov	r0, r4
 8008120:	f000 f81c 	bl	800815c <__sfp>
 8008124:	60a0      	str	r0, [r4, #8]
 8008126:	4620      	mov	r0, r4
 8008128:	f000 f818 	bl	800815c <__sfp>
 800812c:	2200      	movs	r2, #0
 800812e:	60e0      	str	r0, [r4, #12]
 8008130:	2104      	movs	r1, #4
 8008132:	6860      	ldr	r0, [r4, #4]
 8008134:	f7ff ff82 	bl	800803c <std>
 8008138:	68a0      	ldr	r0, [r4, #8]
 800813a:	2201      	movs	r2, #1
 800813c:	2109      	movs	r1, #9
 800813e:	f7ff ff7d 	bl	800803c <std>
 8008142:	68e0      	ldr	r0, [r4, #12]
 8008144:	2202      	movs	r2, #2
 8008146:	2112      	movs	r1, #18
 8008148:	f7ff ff78 	bl	800803c <std>
 800814c:	2301      	movs	r3, #1
 800814e:	61a3      	str	r3, [r4, #24]
 8008150:	e7d2      	b.n	80080f8 <__sinit+0xc>
 8008152:	bf00      	nop
 8008154:	080095c8 	.word	0x080095c8
 8008158:	08008085 	.word	0x08008085

0800815c <__sfp>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	4607      	mov	r7, r0
 8008160:	f7ff ffac 	bl	80080bc <__sfp_lock_acquire>
 8008164:	4b1e      	ldr	r3, [pc, #120]	; (80081e0 <__sfp+0x84>)
 8008166:	681e      	ldr	r6, [r3, #0]
 8008168:	69b3      	ldr	r3, [r6, #24]
 800816a:	b913      	cbnz	r3, 8008172 <__sfp+0x16>
 800816c:	4630      	mov	r0, r6
 800816e:	f7ff ffbd 	bl	80080ec <__sinit>
 8008172:	3648      	adds	r6, #72	; 0x48
 8008174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008178:	3b01      	subs	r3, #1
 800817a:	d503      	bpl.n	8008184 <__sfp+0x28>
 800817c:	6833      	ldr	r3, [r6, #0]
 800817e:	b30b      	cbz	r3, 80081c4 <__sfp+0x68>
 8008180:	6836      	ldr	r6, [r6, #0]
 8008182:	e7f7      	b.n	8008174 <__sfp+0x18>
 8008184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008188:	b9d5      	cbnz	r5, 80081c0 <__sfp+0x64>
 800818a:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <__sfp+0x88>)
 800818c:	60e3      	str	r3, [r4, #12]
 800818e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008192:	6665      	str	r5, [r4, #100]	; 0x64
 8008194:	f000 f847 	bl	8008226 <__retarget_lock_init_recursive>
 8008198:	f7ff ff96 	bl	80080c8 <__sfp_lock_release>
 800819c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081a4:	6025      	str	r5, [r4, #0]
 80081a6:	61a5      	str	r5, [r4, #24]
 80081a8:	2208      	movs	r2, #8
 80081aa:	4629      	mov	r1, r5
 80081ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081b0:	f7fb fd20 	bl	8003bf4 <memset>
 80081b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081bc:	4620      	mov	r0, r4
 80081be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081c0:	3468      	adds	r4, #104	; 0x68
 80081c2:	e7d9      	b.n	8008178 <__sfp+0x1c>
 80081c4:	2104      	movs	r1, #4
 80081c6:	4638      	mov	r0, r7
 80081c8:	f7ff ff62 	bl	8008090 <__sfmoreglue>
 80081cc:	4604      	mov	r4, r0
 80081ce:	6030      	str	r0, [r6, #0]
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1d5      	bne.n	8008180 <__sfp+0x24>
 80081d4:	f7ff ff78 	bl	80080c8 <__sfp_lock_release>
 80081d8:	230c      	movs	r3, #12
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	e7ee      	b.n	80081bc <__sfp+0x60>
 80081de:	bf00      	nop
 80081e0:	080095c8 	.word	0x080095c8
 80081e4:	ffff0001 	.word	0xffff0001

080081e8 <_fwalk_reent>:
 80081e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ec:	4606      	mov	r6, r0
 80081ee:	4688      	mov	r8, r1
 80081f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081f4:	2700      	movs	r7, #0
 80081f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081fa:	f1b9 0901 	subs.w	r9, r9, #1
 80081fe:	d505      	bpl.n	800820c <_fwalk_reent+0x24>
 8008200:	6824      	ldr	r4, [r4, #0]
 8008202:	2c00      	cmp	r4, #0
 8008204:	d1f7      	bne.n	80081f6 <_fwalk_reent+0xe>
 8008206:	4638      	mov	r0, r7
 8008208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820c:	89ab      	ldrh	r3, [r5, #12]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d907      	bls.n	8008222 <_fwalk_reent+0x3a>
 8008212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008216:	3301      	adds	r3, #1
 8008218:	d003      	beq.n	8008222 <_fwalk_reent+0x3a>
 800821a:	4629      	mov	r1, r5
 800821c:	4630      	mov	r0, r6
 800821e:	47c0      	blx	r8
 8008220:	4307      	orrs	r7, r0
 8008222:	3568      	adds	r5, #104	; 0x68
 8008224:	e7e9      	b.n	80081fa <_fwalk_reent+0x12>

08008226 <__retarget_lock_init_recursive>:
 8008226:	4770      	bx	lr

08008228 <__retarget_lock_acquire_recursive>:
 8008228:	4770      	bx	lr

0800822a <__retarget_lock_release_recursive>:
 800822a:	4770      	bx	lr

0800822c <__swhatbuf_r>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	460e      	mov	r6, r1
 8008230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008234:	2900      	cmp	r1, #0
 8008236:	b096      	sub	sp, #88	; 0x58
 8008238:	4614      	mov	r4, r2
 800823a:	461d      	mov	r5, r3
 800823c:	da08      	bge.n	8008250 <__swhatbuf_r+0x24>
 800823e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	602a      	str	r2, [r5, #0]
 8008246:	061a      	lsls	r2, r3, #24
 8008248:	d410      	bmi.n	800826c <__swhatbuf_r+0x40>
 800824a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800824e:	e00e      	b.n	800826e <__swhatbuf_r+0x42>
 8008250:	466a      	mov	r2, sp
 8008252:	f000 f903 	bl	800845c <_fstat_r>
 8008256:	2800      	cmp	r0, #0
 8008258:	dbf1      	blt.n	800823e <__swhatbuf_r+0x12>
 800825a:	9a01      	ldr	r2, [sp, #4]
 800825c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008260:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008264:	425a      	negs	r2, r3
 8008266:	415a      	adcs	r2, r3
 8008268:	602a      	str	r2, [r5, #0]
 800826a:	e7ee      	b.n	800824a <__swhatbuf_r+0x1e>
 800826c:	2340      	movs	r3, #64	; 0x40
 800826e:	2000      	movs	r0, #0
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	b016      	add	sp, #88	; 0x58
 8008274:	bd70      	pop	{r4, r5, r6, pc}
	...

08008278 <__smakebuf_r>:
 8008278:	898b      	ldrh	r3, [r1, #12]
 800827a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800827c:	079d      	lsls	r5, r3, #30
 800827e:	4606      	mov	r6, r0
 8008280:	460c      	mov	r4, r1
 8008282:	d507      	bpl.n	8008294 <__smakebuf_r+0x1c>
 8008284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	6123      	str	r3, [r4, #16]
 800828c:	2301      	movs	r3, #1
 800828e:	6163      	str	r3, [r4, #20]
 8008290:	b002      	add	sp, #8
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	ab01      	add	r3, sp, #4
 8008296:	466a      	mov	r2, sp
 8008298:	f7ff ffc8 	bl	800822c <__swhatbuf_r>
 800829c:	9900      	ldr	r1, [sp, #0]
 800829e:	4605      	mov	r5, r0
 80082a0:	4630      	mov	r0, r6
 80082a2:	f7ff f957 	bl	8007554 <_malloc_r>
 80082a6:	b948      	cbnz	r0, 80082bc <__smakebuf_r+0x44>
 80082a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ac:	059a      	lsls	r2, r3, #22
 80082ae:	d4ef      	bmi.n	8008290 <__smakebuf_r+0x18>
 80082b0:	f023 0303 	bic.w	r3, r3, #3
 80082b4:	f043 0302 	orr.w	r3, r3, #2
 80082b8:	81a3      	strh	r3, [r4, #12]
 80082ba:	e7e3      	b.n	8008284 <__smakebuf_r+0xc>
 80082bc:	4b0d      	ldr	r3, [pc, #52]	; (80082f4 <__smakebuf_r+0x7c>)
 80082be:	62b3      	str	r3, [r6, #40]	; 0x28
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	6020      	str	r0, [r4, #0]
 80082c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c8:	81a3      	strh	r3, [r4, #12]
 80082ca:	9b00      	ldr	r3, [sp, #0]
 80082cc:	6163      	str	r3, [r4, #20]
 80082ce:	9b01      	ldr	r3, [sp, #4]
 80082d0:	6120      	str	r0, [r4, #16]
 80082d2:	b15b      	cbz	r3, 80082ec <__smakebuf_r+0x74>
 80082d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d8:	4630      	mov	r0, r6
 80082da:	f000 f8d1 	bl	8008480 <_isatty_r>
 80082de:	b128      	cbz	r0, 80082ec <__smakebuf_r+0x74>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f023 0303 	bic.w	r3, r3, #3
 80082e6:	f043 0301 	orr.w	r3, r3, #1
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	89a0      	ldrh	r0, [r4, #12]
 80082ee:	4305      	orrs	r5, r0
 80082f0:	81a5      	strh	r5, [r4, #12]
 80082f2:	e7cd      	b.n	8008290 <__smakebuf_r+0x18>
 80082f4:	08008085 	.word	0x08008085

080082f8 <_malloc_usable_size_r>:
 80082f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082fc:	1f18      	subs	r0, r3, #4
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bfbc      	itt	lt
 8008302:	580b      	ldrlt	r3, [r1, r0]
 8008304:	18c0      	addlt	r0, r0, r3
 8008306:	4770      	bx	lr

08008308 <_raise_r>:
 8008308:	291f      	cmp	r1, #31
 800830a:	b538      	push	{r3, r4, r5, lr}
 800830c:	4604      	mov	r4, r0
 800830e:	460d      	mov	r5, r1
 8008310:	d904      	bls.n	800831c <_raise_r+0x14>
 8008312:	2316      	movs	r3, #22
 8008314:	6003      	str	r3, [r0, #0]
 8008316:	f04f 30ff 	mov.w	r0, #4294967295
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800831e:	b112      	cbz	r2, 8008326 <_raise_r+0x1e>
 8008320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008324:	b94b      	cbnz	r3, 800833a <_raise_r+0x32>
 8008326:	4620      	mov	r0, r4
 8008328:	f000 f830 	bl	800838c <_getpid_r>
 800832c:	462a      	mov	r2, r5
 800832e:	4601      	mov	r1, r0
 8008330:	4620      	mov	r0, r4
 8008332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008336:	f000 b817 	b.w	8008368 <_kill_r>
 800833a:	2b01      	cmp	r3, #1
 800833c:	d00a      	beq.n	8008354 <_raise_r+0x4c>
 800833e:	1c59      	adds	r1, r3, #1
 8008340:	d103      	bne.n	800834a <_raise_r+0x42>
 8008342:	2316      	movs	r3, #22
 8008344:	6003      	str	r3, [r0, #0]
 8008346:	2001      	movs	r0, #1
 8008348:	e7e7      	b.n	800831a <_raise_r+0x12>
 800834a:	2400      	movs	r4, #0
 800834c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008350:	4628      	mov	r0, r5
 8008352:	4798      	blx	r3
 8008354:	2000      	movs	r0, #0
 8008356:	e7e0      	b.n	800831a <_raise_r+0x12>

08008358 <raise>:
 8008358:	4b02      	ldr	r3, [pc, #8]	; (8008364 <raise+0xc>)
 800835a:	4601      	mov	r1, r0
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	f7ff bfd3 	b.w	8008308 <_raise_r>
 8008362:	bf00      	nop
 8008364:	2000000c 	.word	0x2000000c

08008368 <_kill_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4d07      	ldr	r5, [pc, #28]	; (8008388 <_kill_r+0x20>)
 800836c:	2300      	movs	r3, #0
 800836e:	4604      	mov	r4, r0
 8008370:	4608      	mov	r0, r1
 8008372:	4611      	mov	r1, r2
 8008374:	602b      	str	r3, [r5, #0]
 8008376:	f7f9 fa03 	bl	8001780 <_kill>
 800837a:	1c43      	adds	r3, r0, #1
 800837c:	d102      	bne.n	8008384 <_kill_r+0x1c>
 800837e:	682b      	ldr	r3, [r5, #0]
 8008380:	b103      	cbz	r3, 8008384 <_kill_r+0x1c>
 8008382:	6023      	str	r3, [r4, #0]
 8008384:	bd38      	pop	{r3, r4, r5, pc}
 8008386:	bf00      	nop
 8008388:	20000340 	.word	0x20000340

0800838c <_getpid_r>:
 800838c:	f7f9 b9f0 	b.w	8001770 <_getpid>

08008390 <__sread>:
 8008390:	b510      	push	{r4, lr}
 8008392:	460c      	mov	r4, r1
 8008394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008398:	f000 f894 	bl	80084c4 <_read_r>
 800839c:	2800      	cmp	r0, #0
 800839e:	bfab      	itete	ge
 80083a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083a2:	89a3      	ldrhlt	r3, [r4, #12]
 80083a4:	181b      	addge	r3, r3, r0
 80083a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083aa:	bfac      	ite	ge
 80083ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80083ae:	81a3      	strhlt	r3, [r4, #12]
 80083b0:	bd10      	pop	{r4, pc}

080083b2 <__swrite>:
 80083b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b6:	461f      	mov	r7, r3
 80083b8:	898b      	ldrh	r3, [r1, #12]
 80083ba:	05db      	lsls	r3, r3, #23
 80083bc:	4605      	mov	r5, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	4616      	mov	r6, r2
 80083c2:	d505      	bpl.n	80083d0 <__swrite+0x1e>
 80083c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c8:	2302      	movs	r3, #2
 80083ca:	2200      	movs	r2, #0
 80083cc:	f000 f868 	bl	80084a0 <_lseek_r>
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	4632      	mov	r2, r6
 80083de:	463b      	mov	r3, r7
 80083e0:	4628      	mov	r0, r5
 80083e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083e6:	f000 b817 	b.w	8008418 <_write_r>

080083ea <__sseek>:
 80083ea:	b510      	push	{r4, lr}
 80083ec:	460c      	mov	r4, r1
 80083ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f2:	f000 f855 	bl	80084a0 <_lseek_r>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	bf15      	itete	ne
 80083fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80083fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008406:	81a3      	strheq	r3, [r4, #12]
 8008408:	bf18      	it	ne
 800840a:	81a3      	strhne	r3, [r4, #12]
 800840c:	bd10      	pop	{r4, pc}

0800840e <__sclose>:
 800840e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008412:	f000 b813 	b.w	800843c <_close_r>
	...

08008418 <_write_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d07      	ldr	r5, [pc, #28]	; (8008438 <_write_r+0x20>)
 800841c:	4604      	mov	r4, r0
 800841e:	4608      	mov	r0, r1
 8008420:	4611      	mov	r1, r2
 8008422:	2200      	movs	r2, #0
 8008424:	602a      	str	r2, [r5, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	f7f9 f9e1 	bl	80017ee <_write>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_write_r+0x1e>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_write_r+0x1e>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	20000340 	.word	0x20000340

0800843c <_close_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d06      	ldr	r5, [pc, #24]	; (8008458 <_close_r+0x1c>)
 8008440:	2300      	movs	r3, #0
 8008442:	4604      	mov	r4, r0
 8008444:	4608      	mov	r0, r1
 8008446:	602b      	str	r3, [r5, #0]
 8008448:	f7f9 f9ed 	bl	8001826 <_close>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_close_r+0x1a>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_close_r+0x1a>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	20000340 	.word	0x20000340

0800845c <_fstat_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d07      	ldr	r5, [pc, #28]	; (800847c <_fstat_r+0x20>)
 8008460:	2300      	movs	r3, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	f7f9 f9e8 	bl	800183e <_fstat>
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	d102      	bne.n	8008478 <_fstat_r+0x1c>
 8008472:	682b      	ldr	r3, [r5, #0]
 8008474:	b103      	cbz	r3, 8008478 <_fstat_r+0x1c>
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	bf00      	nop
 800847c:	20000340 	.word	0x20000340

08008480 <_isatty_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4d06      	ldr	r5, [pc, #24]	; (800849c <_isatty_r+0x1c>)
 8008484:	2300      	movs	r3, #0
 8008486:	4604      	mov	r4, r0
 8008488:	4608      	mov	r0, r1
 800848a:	602b      	str	r3, [r5, #0]
 800848c:	f7f9 f9e7 	bl	800185e <_isatty>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_isatty_r+0x1a>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_isatty_r+0x1a>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	20000340 	.word	0x20000340

080084a0 <_lseek_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d07      	ldr	r5, [pc, #28]	; (80084c0 <_lseek_r+0x20>)
 80084a4:	4604      	mov	r4, r0
 80084a6:	4608      	mov	r0, r1
 80084a8:	4611      	mov	r1, r2
 80084aa:	2200      	movs	r2, #0
 80084ac:	602a      	str	r2, [r5, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f7f9 f9e0 	bl	8001874 <_lseek>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_lseek_r+0x1e>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_lseek_r+0x1e>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	20000340 	.word	0x20000340

080084c4 <_read_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4d07      	ldr	r5, [pc, #28]	; (80084e4 <_read_r+0x20>)
 80084c8:	4604      	mov	r4, r0
 80084ca:	4608      	mov	r0, r1
 80084cc:	4611      	mov	r1, r2
 80084ce:	2200      	movs	r2, #0
 80084d0:	602a      	str	r2, [r5, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	f7f9 f96e 	bl	80017b4 <_read>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d102      	bne.n	80084e2 <_read_r+0x1e>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	b103      	cbz	r3, 80084e2 <_read_r+0x1e>
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	20000340 	.word	0x20000340

080084e8 <sin>:
 80084e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ea:	ec53 2b10 	vmov	r2, r3, d0
 80084ee:	4828      	ldr	r0, [pc, #160]	; (8008590 <sin+0xa8>)
 80084f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084f4:	4281      	cmp	r1, r0
 80084f6:	dc07      	bgt.n	8008508 <sin+0x20>
 80084f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008588 <sin+0xa0>
 80084fc:	2000      	movs	r0, #0
 80084fe:	b005      	add	sp, #20
 8008500:	f85d eb04 	ldr.w	lr, [sp], #4
 8008504:	f000 be6c 	b.w	80091e0 <__kernel_sin>
 8008508:	4822      	ldr	r0, [pc, #136]	; (8008594 <sin+0xac>)
 800850a:	4281      	cmp	r1, r0
 800850c:	dd09      	ble.n	8008522 <sin+0x3a>
 800850e:	ee10 0a10 	vmov	r0, s0
 8008512:	4619      	mov	r1, r3
 8008514:	f7f7 fec0 	bl	8000298 <__aeabi_dsub>
 8008518:	ec41 0b10 	vmov	d0, r0, r1
 800851c:	b005      	add	sp, #20
 800851e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008522:	4668      	mov	r0, sp
 8008524:	f000 f838 	bl	8008598 <__ieee754_rem_pio2>
 8008528:	f000 0003 	and.w	r0, r0, #3
 800852c:	2801      	cmp	r0, #1
 800852e:	d00c      	beq.n	800854a <sin+0x62>
 8008530:	2802      	cmp	r0, #2
 8008532:	d011      	beq.n	8008558 <sin+0x70>
 8008534:	b9f0      	cbnz	r0, 8008574 <sin+0x8c>
 8008536:	ed9d 1b02 	vldr	d1, [sp, #8]
 800853a:	ed9d 0b00 	vldr	d0, [sp]
 800853e:	2001      	movs	r0, #1
 8008540:	f000 fe4e 	bl	80091e0 <__kernel_sin>
 8008544:	ec51 0b10 	vmov	r0, r1, d0
 8008548:	e7e6      	b.n	8008518 <sin+0x30>
 800854a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800854e:	ed9d 0b00 	vldr	d0, [sp]
 8008552:	f000 fa2d 	bl	80089b0 <__kernel_cos>
 8008556:	e7f5      	b.n	8008544 <sin+0x5c>
 8008558:	ed9d 1b02 	vldr	d1, [sp, #8]
 800855c:	ed9d 0b00 	vldr	d0, [sp]
 8008560:	2001      	movs	r0, #1
 8008562:	f000 fe3d 	bl	80091e0 <__kernel_sin>
 8008566:	ec53 2b10 	vmov	r2, r3, d0
 800856a:	ee10 0a10 	vmov	r0, s0
 800856e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008572:	e7d1      	b.n	8008518 <sin+0x30>
 8008574:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008578:	ed9d 0b00 	vldr	d0, [sp]
 800857c:	f000 fa18 	bl	80089b0 <__kernel_cos>
 8008580:	e7f1      	b.n	8008566 <sin+0x7e>
 8008582:	bf00      	nop
 8008584:	f3af 8000 	nop.w
	...
 8008590:	3fe921fb 	.word	0x3fe921fb
 8008594:	7fefffff 	.word	0x7fefffff

08008598 <__ieee754_rem_pio2>:
 8008598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859c:	ed2d 8b02 	vpush	{d8}
 80085a0:	ec55 4b10 	vmov	r4, r5, d0
 80085a4:	4bca      	ldr	r3, [pc, #808]	; (80088d0 <__ieee754_rem_pio2+0x338>)
 80085a6:	b08b      	sub	sp, #44	; 0x2c
 80085a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80085ac:	4598      	cmp	r8, r3
 80085ae:	4682      	mov	sl, r0
 80085b0:	9502      	str	r5, [sp, #8]
 80085b2:	dc08      	bgt.n	80085c6 <__ieee754_rem_pio2+0x2e>
 80085b4:	2200      	movs	r2, #0
 80085b6:	2300      	movs	r3, #0
 80085b8:	ed80 0b00 	vstr	d0, [r0]
 80085bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80085c0:	f04f 0b00 	mov.w	fp, #0
 80085c4:	e028      	b.n	8008618 <__ieee754_rem_pio2+0x80>
 80085c6:	4bc3      	ldr	r3, [pc, #780]	; (80088d4 <__ieee754_rem_pio2+0x33c>)
 80085c8:	4598      	cmp	r8, r3
 80085ca:	dc78      	bgt.n	80086be <__ieee754_rem_pio2+0x126>
 80085cc:	9b02      	ldr	r3, [sp, #8]
 80085ce:	4ec2      	ldr	r6, [pc, #776]	; (80088d8 <__ieee754_rem_pio2+0x340>)
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	ee10 0a10 	vmov	r0, s0
 80085d6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008898 <__ieee754_rem_pio2+0x300>)
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	4629      	mov	r1, r5
 80085de:	dd39      	ble.n	8008654 <__ieee754_rem_pio2+0xbc>
 80085e0:	f7f7 fe5a 	bl	8000298 <__aeabi_dsub>
 80085e4:	45b0      	cmp	r8, r6
 80085e6:	4604      	mov	r4, r0
 80085e8:	460d      	mov	r5, r1
 80085ea:	d01b      	beq.n	8008624 <__ieee754_rem_pio2+0x8c>
 80085ec:	a3ac      	add	r3, pc, #688	; (adr r3, 80088a0 <__ieee754_rem_pio2+0x308>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f7f7 fe51 	bl	8000298 <__aeabi_dsub>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	e9ca 2300 	strd	r2, r3, [sl]
 80085fe:	4620      	mov	r0, r4
 8008600:	4629      	mov	r1, r5
 8008602:	f7f7 fe49 	bl	8000298 <__aeabi_dsub>
 8008606:	a3a6      	add	r3, pc, #664	; (adr r3, 80088a0 <__ieee754_rem_pio2+0x308>)
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	f7f7 fe44 	bl	8000298 <__aeabi_dsub>
 8008610:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008614:	f04f 0b01 	mov.w	fp, #1
 8008618:	4658      	mov	r0, fp
 800861a:	b00b      	add	sp, #44	; 0x2c
 800861c:	ecbd 8b02 	vpop	{d8}
 8008620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008624:	a3a0      	add	r3, pc, #640	; (adr r3, 80088a8 <__ieee754_rem_pio2+0x310>)
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f7f7 fe35 	bl	8000298 <__aeabi_dsub>
 800862e:	a3a0      	add	r3, pc, #640	; (adr r3, 80088b0 <__ieee754_rem_pio2+0x318>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	4604      	mov	r4, r0
 8008636:	460d      	mov	r5, r1
 8008638:	f7f7 fe2e 	bl	8000298 <__aeabi_dsub>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	e9ca 2300 	strd	r2, r3, [sl]
 8008644:	4620      	mov	r0, r4
 8008646:	4629      	mov	r1, r5
 8008648:	f7f7 fe26 	bl	8000298 <__aeabi_dsub>
 800864c:	a398      	add	r3, pc, #608	; (adr r3, 80088b0 <__ieee754_rem_pio2+0x318>)
 800864e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008652:	e7db      	b.n	800860c <__ieee754_rem_pio2+0x74>
 8008654:	f7f7 fe22 	bl	800029c <__adddf3>
 8008658:	45b0      	cmp	r8, r6
 800865a:	4604      	mov	r4, r0
 800865c:	460d      	mov	r5, r1
 800865e:	d016      	beq.n	800868e <__ieee754_rem_pio2+0xf6>
 8008660:	a38f      	add	r3, pc, #572	; (adr r3, 80088a0 <__ieee754_rem_pio2+0x308>)
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	f7f7 fe19 	bl	800029c <__adddf3>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	e9ca 2300 	strd	r2, r3, [sl]
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	f7f7 fe0f 	bl	8000298 <__aeabi_dsub>
 800867a:	a389      	add	r3, pc, #548	; (adr r3, 80088a0 <__ieee754_rem_pio2+0x308>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f7f7 fe0c 	bl	800029c <__adddf3>
 8008684:	f04f 3bff 	mov.w	fp, #4294967295
 8008688:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800868c:	e7c4      	b.n	8008618 <__ieee754_rem_pio2+0x80>
 800868e:	a386      	add	r3, pc, #536	; (adr r3, 80088a8 <__ieee754_rem_pio2+0x310>)
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f7f7 fe02 	bl	800029c <__adddf3>
 8008698:	a385      	add	r3, pc, #532	; (adr r3, 80088b0 <__ieee754_rem_pio2+0x318>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	4604      	mov	r4, r0
 80086a0:	460d      	mov	r5, r1
 80086a2:	f7f7 fdfb 	bl	800029c <__adddf3>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	e9ca 2300 	strd	r2, r3, [sl]
 80086ae:	4620      	mov	r0, r4
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7f7 fdf1 	bl	8000298 <__aeabi_dsub>
 80086b6:	a37e      	add	r3, pc, #504	; (adr r3, 80088b0 <__ieee754_rem_pio2+0x318>)
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	e7e0      	b.n	8008680 <__ieee754_rem_pio2+0xe8>
 80086be:	4b87      	ldr	r3, [pc, #540]	; (80088dc <__ieee754_rem_pio2+0x344>)
 80086c0:	4598      	cmp	r8, r3
 80086c2:	f300 80d9 	bgt.w	8008878 <__ieee754_rem_pio2+0x2e0>
 80086c6:	f000 fe49 	bl	800935c <fabs>
 80086ca:	ec55 4b10 	vmov	r4, r5, d0
 80086ce:	ee10 0a10 	vmov	r0, s0
 80086d2:	a379      	add	r3, pc, #484	; (adr r3, 80088b8 <__ieee754_rem_pio2+0x320>)
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	4629      	mov	r1, r5
 80086da:	f7f7 ff95 	bl	8000608 <__aeabi_dmul>
 80086de:	4b80      	ldr	r3, [pc, #512]	; (80088e0 <__ieee754_rem_pio2+0x348>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	f7f7 fddb 	bl	800029c <__adddf3>
 80086e6:	f7f8 fa3f 	bl	8000b68 <__aeabi_d2iz>
 80086ea:	4683      	mov	fp, r0
 80086ec:	f7f7 ff22 	bl	8000534 <__aeabi_i2d>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	ec43 2b18 	vmov	d8, r2, r3
 80086f8:	a367      	add	r3, pc, #412	; (adr r3, 8008898 <__ieee754_rem_pio2+0x300>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 ff83 	bl	8000608 <__aeabi_dmul>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4620      	mov	r0, r4
 8008708:	4629      	mov	r1, r5
 800870a:	f7f7 fdc5 	bl	8000298 <__aeabi_dsub>
 800870e:	a364      	add	r3, pc, #400	; (adr r3, 80088a0 <__ieee754_rem_pio2+0x308>)
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	ec51 0b18 	vmov	r0, r1, d8
 800871c:	f7f7 ff74 	bl	8000608 <__aeabi_dmul>
 8008720:	f1bb 0f1f 	cmp.w	fp, #31
 8008724:	4604      	mov	r4, r0
 8008726:	460d      	mov	r5, r1
 8008728:	dc0d      	bgt.n	8008746 <__ieee754_rem_pio2+0x1ae>
 800872a:	4b6e      	ldr	r3, [pc, #440]	; (80088e4 <__ieee754_rem_pio2+0x34c>)
 800872c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008734:	4543      	cmp	r3, r8
 8008736:	d006      	beq.n	8008746 <__ieee754_rem_pio2+0x1ae>
 8008738:	4622      	mov	r2, r4
 800873a:	462b      	mov	r3, r5
 800873c:	4630      	mov	r0, r6
 800873e:	4639      	mov	r1, r7
 8008740:	f7f7 fdaa 	bl	8000298 <__aeabi_dsub>
 8008744:	e00f      	b.n	8008766 <__ieee754_rem_pio2+0x1ce>
 8008746:	462b      	mov	r3, r5
 8008748:	4622      	mov	r2, r4
 800874a:	4630      	mov	r0, r6
 800874c:	4639      	mov	r1, r7
 800874e:	f7f7 fda3 	bl	8000298 <__aeabi_dsub>
 8008752:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800875c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008760:	f1b8 0f10 	cmp.w	r8, #16
 8008764:	dc02      	bgt.n	800876c <__ieee754_rem_pio2+0x1d4>
 8008766:	e9ca 0100 	strd	r0, r1, [sl]
 800876a:	e039      	b.n	80087e0 <__ieee754_rem_pio2+0x248>
 800876c:	a34e      	add	r3, pc, #312	; (adr r3, 80088a8 <__ieee754_rem_pio2+0x310>)
 800876e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008772:	ec51 0b18 	vmov	r0, r1, d8
 8008776:	f7f7 ff47 	bl	8000608 <__aeabi_dmul>
 800877a:	4604      	mov	r4, r0
 800877c:	460d      	mov	r5, r1
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4630      	mov	r0, r6
 8008784:	4639      	mov	r1, r7
 8008786:	f7f7 fd87 	bl	8000298 <__aeabi_dsub>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4680      	mov	r8, r0
 8008790:	4689      	mov	r9, r1
 8008792:	4630      	mov	r0, r6
 8008794:	4639      	mov	r1, r7
 8008796:	f7f7 fd7f 	bl	8000298 <__aeabi_dsub>
 800879a:	4622      	mov	r2, r4
 800879c:	462b      	mov	r3, r5
 800879e:	f7f7 fd7b 	bl	8000298 <__aeabi_dsub>
 80087a2:	a343      	add	r3, pc, #268	; (adr r3, 80088b0 <__ieee754_rem_pio2+0x318>)
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	4604      	mov	r4, r0
 80087aa:	460d      	mov	r5, r1
 80087ac:	ec51 0b18 	vmov	r0, r1, d8
 80087b0:	f7f7 ff2a 	bl	8000608 <__aeabi_dmul>
 80087b4:	4622      	mov	r2, r4
 80087b6:	462b      	mov	r3, r5
 80087b8:	f7f7 fd6e 	bl	8000298 <__aeabi_dsub>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4604      	mov	r4, r0
 80087c2:	460d      	mov	r5, r1
 80087c4:	4640      	mov	r0, r8
 80087c6:	4649      	mov	r1, r9
 80087c8:	f7f7 fd66 	bl	8000298 <__aeabi_dsub>
 80087cc:	9a03      	ldr	r2, [sp, #12]
 80087ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	2b31      	cmp	r3, #49	; 0x31
 80087d6:	dc24      	bgt.n	8008822 <__ieee754_rem_pio2+0x28a>
 80087d8:	e9ca 0100 	strd	r0, r1, [sl]
 80087dc:	4646      	mov	r6, r8
 80087de:	464f      	mov	r7, r9
 80087e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80087e4:	4630      	mov	r0, r6
 80087e6:	4642      	mov	r2, r8
 80087e8:	464b      	mov	r3, r9
 80087ea:	4639      	mov	r1, r7
 80087ec:	f7f7 fd54 	bl	8000298 <__aeabi_dsub>
 80087f0:	462b      	mov	r3, r5
 80087f2:	4622      	mov	r2, r4
 80087f4:	f7f7 fd50 	bl	8000298 <__aeabi_dsub>
 80087f8:	9b02      	ldr	r3, [sp, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008800:	f6bf af0a 	bge.w	8008618 <__ieee754_rem_pio2+0x80>
 8008804:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008808:	f8ca 3004 	str.w	r3, [sl, #4]
 800880c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008810:	f8ca 8000 	str.w	r8, [sl]
 8008814:	f8ca 0008 	str.w	r0, [sl, #8]
 8008818:	f8ca 300c 	str.w	r3, [sl, #12]
 800881c:	f1cb 0b00 	rsb	fp, fp, #0
 8008820:	e6fa      	b.n	8008618 <__ieee754_rem_pio2+0x80>
 8008822:	a327      	add	r3, pc, #156	; (adr r3, 80088c0 <__ieee754_rem_pio2+0x328>)
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	ec51 0b18 	vmov	r0, r1, d8
 800882c:	f7f7 feec 	bl	8000608 <__aeabi_dmul>
 8008830:	4604      	mov	r4, r0
 8008832:	460d      	mov	r5, r1
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4640      	mov	r0, r8
 800883a:	4649      	mov	r1, r9
 800883c:	f7f7 fd2c 	bl	8000298 <__aeabi_dsub>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4606      	mov	r6, r0
 8008846:	460f      	mov	r7, r1
 8008848:	4640      	mov	r0, r8
 800884a:	4649      	mov	r1, r9
 800884c:	f7f7 fd24 	bl	8000298 <__aeabi_dsub>
 8008850:	4622      	mov	r2, r4
 8008852:	462b      	mov	r3, r5
 8008854:	f7f7 fd20 	bl	8000298 <__aeabi_dsub>
 8008858:	a31b      	add	r3, pc, #108	; (adr r3, 80088c8 <__ieee754_rem_pio2+0x330>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	4604      	mov	r4, r0
 8008860:	460d      	mov	r5, r1
 8008862:	ec51 0b18 	vmov	r0, r1, d8
 8008866:	f7f7 fecf 	bl	8000608 <__aeabi_dmul>
 800886a:	4622      	mov	r2, r4
 800886c:	462b      	mov	r3, r5
 800886e:	f7f7 fd13 	bl	8000298 <__aeabi_dsub>
 8008872:	4604      	mov	r4, r0
 8008874:	460d      	mov	r5, r1
 8008876:	e75f      	b.n	8008738 <__ieee754_rem_pio2+0x1a0>
 8008878:	4b1b      	ldr	r3, [pc, #108]	; (80088e8 <__ieee754_rem_pio2+0x350>)
 800887a:	4598      	cmp	r8, r3
 800887c:	dd36      	ble.n	80088ec <__ieee754_rem_pio2+0x354>
 800887e:	ee10 2a10 	vmov	r2, s0
 8008882:	462b      	mov	r3, r5
 8008884:	4620      	mov	r0, r4
 8008886:	4629      	mov	r1, r5
 8008888:	f7f7 fd06 	bl	8000298 <__aeabi_dsub>
 800888c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008890:	e9ca 0100 	strd	r0, r1, [sl]
 8008894:	e694      	b.n	80085c0 <__ieee754_rem_pio2+0x28>
 8008896:	bf00      	nop
 8008898:	54400000 	.word	0x54400000
 800889c:	3ff921fb 	.word	0x3ff921fb
 80088a0:	1a626331 	.word	0x1a626331
 80088a4:	3dd0b461 	.word	0x3dd0b461
 80088a8:	1a600000 	.word	0x1a600000
 80088ac:	3dd0b461 	.word	0x3dd0b461
 80088b0:	2e037073 	.word	0x2e037073
 80088b4:	3ba3198a 	.word	0x3ba3198a
 80088b8:	6dc9c883 	.word	0x6dc9c883
 80088bc:	3fe45f30 	.word	0x3fe45f30
 80088c0:	2e000000 	.word	0x2e000000
 80088c4:	3ba3198a 	.word	0x3ba3198a
 80088c8:	252049c1 	.word	0x252049c1
 80088cc:	397b839a 	.word	0x397b839a
 80088d0:	3fe921fb 	.word	0x3fe921fb
 80088d4:	4002d97b 	.word	0x4002d97b
 80088d8:	3ff921fb 	.word	0x3ff921fb
 80088dc:	413921fb 	.word	0x413921fb
 80088e0:	3fe00000 	.word	0x3fe00000
 80088e4:	08009a6c 	.word	0x08009a6c
 80088e8:	7fefffff 	.word	0x7fefffff
 80088ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 80088f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80088f4:	ee10 0a10 	vmov	r0, s0
 80088f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80088fc:	ee10 6a10 	vmov	r6, s0
 8008900:	460f      	mov	r7, r1
 8008902:	f7f8 f931 	bl	8000b68 <__aeabi_d2iz>
 8008906:	f7f7 fe15 	bl	8000534 <__aeabi_i2d>
 800890a:	4602      	mov	r2, r0
 800890c:	460b      	mov	r3, r1
 800890e:	4630      	mov	r0, r6
 8008910:	4639      	mov	r1, r7
 8008912:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008916:	f7f7 fcbf 	bl	8000298 <__aeabi_dsub>
 800891a:	4b23      	ldr	r3, [pc, #140]	; (80089a8 <__ieee754_rem_pio2+0x410>)
 800891c:	2200      	movs	r2, #0
 800891e:	f7f7 fe73 	bl	8000608 <__aeabi_dmul>
 8008922:	460f      	mov	r7, r1
 8008924:	4606      	mov	r6, r0
 8008926:	f7f8 f91f 	bl	8000b68 <__aeabi_d2iz>
 800892a:	f7f7 fe03 	bl	8000534 <__aeabi_i2d>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4630      	mov	r0, r6
 8008934:	4639      	mov	r1, r7
 8008936:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800893a:	f7f7 fcad 	bl	8000298 <__aeabi_dsub>
 800893e:	4b1a      	ldr	r3, [pc, #104]	; (80089a8 <__ieee754_rem_pio2+0x410>)
 8008940:	2200      	movs	r2, #0
 8008942:	f7f7 fe61 	bl	8000608 <__aeabi_dmul>
 8008946:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800894a:	ad04      	add	r5, sp, #16
 800894c:	f04f 0803 	mov.w	r8, #3
 8008950:	46a9      	mov	r9, r5
 8008952:	2600      	movs	r6, #0
 8008954:	2700      	movs	r7, #0
 8008956:	4632      	mov	r2, r6
 8008958:	463b      	mov	r3, r7
 800895a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800895e:	46c3      	mov	fp, r8
 8008960:	3d08      	subs	r5, #8
 8008962:	f108 38ff 	add.w	r8, r8, #4294967295
 8008966:	f7f8 f8b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800896a:	2800      	cmp	r0, #0
 800896c:	d1f3      	bne.n	8008956 <__ieee754_rem_pio2+0x3be>
 800896e:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <__ieee754_rem_pio2+0x414>)
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	2302      	movs	r3, #2
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	4622      	mov	r2, r4
 8008978:	465b      	mov	r3, fp
 800897a:	4651      	mov	r1, sl
 800897c:	4648      	mov	r0, r9
 800897e:	f000 f8df 	bl	8008b40 <__kernel_rem_pio2>
 8008982:	9b02      	ldr	r3, [sp, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	4683      	mov	fp, r0
 8008988:	f6bf ae46 	bge.w	8008618 <__ieee754_rem_pio2+0x80>
 800898c:	e9da 2100 	ldrd	r2, r1, [sl]
 8008990:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008994:	e9ca 2300 	strd	r2, r3, [sl]
 8008998:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800899c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80089a4:	e73a      	b.n	800881c <__ieee754_rem_pio2+0x284>
 80089a6:	bf00      	nop
 80089a8:	41700000 	.word	0x41700000
 80089ac:	08009aec 	.word	0x08009aec

080089b0 <__kernel_cos>:
 80089b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	ec57 6b10 	vmov	r6, r7, d0
 80089b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80089bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80089c0:	ed8d 1b00 	vstr	d1, [sp]
 80089c4:	da07      	bge.n	80089d6 <__kernel_cos+0x26>
 80089c6:	ee10 0a10 	vmov	r0, s0
 80089ca:	4639      	mov	r1, r7
 80089cc:	f7f8 f8cc 	bl	8000b68 <__aeabi_d2iz>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	f000 8088 	beq.w	8008ae6 <__kernel_cos+0x136>
 80089d6:	4632      	mov	r2, r6
 80089d8:	463b      	mov	r3, r7
 80089da:	4630      	mov	r0, r6
 80089dc:	4639      	mov	r1, r7
 80089de:	f7f7 fe13 	bl	8000608 <__aeabi_dmul>
 80089e2:	4b51      	ldr	r3, [pc, #324]	; (8008b28 <__kernel_cos+0x178>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	4604      	mov	r4, r0
 80089e8:	460d      	mov	r5, r1
 80089ea:	f7f7 fe0d 	bl	8000608 <__aeabi_dmul>
 80089ee:	a340      	add	r3, pc, #256	; (adr r3, 8008af0 <__kernel_cos+0x140>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	4682      	mov	sl, r0
 80089f6:	468b      	mov	fp, r1
 80089f8:	4620      	mov	r0, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	f7f7 fe04 	bl	8000608 <__aeabi_dmul>
 8008a00:	a33d      	add	r3, pc, #244	; (adr r3, 8008af8 <__kernel_cos+0x148>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f7f7 fc49 	bl	800029c <__adddf3>
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	462b      	mov	r3, r5
 8008a0e:	f7f7 fdfb 	bl	8000608 <__aeabi_dmul>
 8008a12:	a33b      	add	r3, pc, #236	; (adr r3, 8008b00 <__kernel_cos+0x150>)
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	f7f7 fc3e 	bl	8000298 <__aeabi_dsub>
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	462b      	mov	r3, r5
 8008a20:	f7f7 fdf2 	bl	8000608 <__aeabi_dmul>
 8008a24:	a338      	add	r3, pc, #224	; (adr r3, 8008b08 <__kernel_cos+0x158>)
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	f7f7 fc37 	bl	800029c <__adddf3>
 8008a2e:	4622      	mov	r2, r4
 8008a30:	462b      	mov	r3, r5
 8008a32:	f7f7 fde9 	bl	8000608 <__aeabi_dmul>
 8008a36:	a336      	add	r3, pc, #216	; (adr r3, 8008b10 <__kernel_cos+0x160>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	f7f7 fc2c 	bl	8000298 <__aeabi_dsub>
 8008a40:	4622      	mov	r2, r4
 8008a42:	462b      	mov	r3, r5
 8008a44:	f7f7 fde0 	bl	8000608 <__aeabi_dmul>
 8008a48:	a333      	add	r3, pc, #204	; (adr r3, 8008b18 <__kernel_cos+0x168>)
 8008a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4e:	f7f7 fc25 	bl	800029c <__adddf3>
 8008a52:	4622      	mov	r2, r4
 8008a54:	462b      	mov	r3, r5
 8008a56:	f7f7 fdd7 	bl	8000608 <__aeabi_dmul>
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	462b      	mov	r3, r5
 8008a5e:	f7f7 fdd3 	bl	8000608 <__aeabi_dmul>
 8008a62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a66:	4604      	mov	r4, r0
 8008a68:	460d      	mov	r5, r1
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	f7f7 fdcb 	bl	8000608 <__aeabi_dmul>
 8008a72:	460b      	mov	r3, r1
 8008a74:	4602      	mov	r2, r0
 8008a76:	4629      	mov	r1, r5
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f7f7 fc0d 	bl	8000298 <__aeabi_dsub>
 8008a7e:	4b2b      	ldr	r3, [pc, #172]	; (8008b2c <__kernel_cos+0x17c>)
 8008a80:	4598      	cmp	r8, r3
 8008a82:	4606      	mov	r6, r0
 8008a84:	460f      	mov	r7, r1
 8008a86:	dc10      	bgt.n	8008aaa <__kernel_cos+0xfa>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4650      	mov	r0, sl
 8008a8e:	4659      	mov	r1, fp
 8008a90:	f7f7 fc02 	bl	8000298 <__aeabi_dsub>
 8008a94:	460b      	mov	r3, r1
 8008a96:	4926      	ldr	r1, [pc, #152]	; (8008b30 <__kernel_cos+0x180>)
 8008a98:	4602      	mov	r2, r0
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f7f7 fbfc 	bl	8000298 <__aeabi_dsub>
 8008aa0:	ec41 0b10 	vmov	d0, r0, r1
 8008aa4:	b003      	add	sp, #12
 8008aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aaa:	4b22      	ldr	r3, [pc, #136]	; (8008b34 <__kernel_cos+0x184>)
 8008aac:	4920      	ldr	r1, [pc, #128]	; (8008b30 <__kernel_cos+0x180>)
 8008aae:	4598      	cmp	r8, r3
 8008ab0:	bfcc      	ite	gt
 8008ab2:	4d21      	ldrgt	r5, [pc, #132]	; (8008b38 <__kernel_cos+0x188>)
 8008ab4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008ab8:	2400      	movs	r4, #0
 8008aba:	4622      	mov	r2, r4
 8008abc:	462b      	mov	r3, r5
 8008abe:	2000      	movs	r0, #0
 8008ac0:	f7f7 fbea 	bl	8000298 <__aeabi_dsub>
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4680      	mov	r8, r0
 8008ac8:	4689      	mov	r9, r1
 8008aca:	462b      	mov	r3, r5
 8008acc:	4650      	mov	r0, sl
 8008ace:	4659      	mov	r1, fp
 8008ad0:	f7f7 fbe2 	bl	8000298 <__aeabi_dsub>
 8008ad4:	4632      	mov	r2, r6
 8008ad6:	463b      	mov	r3, r7
 8008ad8:	f7f7 fbde 	bl	8000298 <__aeabi_dsub>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	e7da      	b.n	8008a9c <__kernel_cos+0xec>
 8008ae6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008b20 <__kernel_cos+0x170>
 8008aea:	e7db      	b.n	8008aa4 <__kernel_cos+0xf4>
 8008aec:	f3af 8000 	nop.w
 8008af0:	be8838d4 	.word	0xbe8838d4
 8008af4:	bda8fae9 	.word	0xbda8fae9
 8008af8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008afc:	3e21ee9e 	.word	0x3e21ee9e
 8008b00:	809c52ad 	.word	0x809c52ad
 8008b04:	3e927e4f 	.word	0x3e927e4f
 8008b08:	19cb1590 	.word	0x19cb1590
 8008b0c:	3efa01a0 	.word	0x3efa01a0
 8008b10:	16c15177 	.word	0x16c15177
 8008b14:	3f56c16c 	.word	0x3f56c16c
 8008b18:	5555554c 	.word	0x5555554c
 8008b1c:	3fa55555 	.word	0x3fa55555
 8008b20:	00000000 	.word	0x00000000
 8008b24:	3ff00000 	.word	0x3ff00000
 8008b28:	3fe00000 	.word	0x3fe00000
 8008b2c:	3fd33332 	.word	0x3fd33332
 8008b30:	3ff00000 	.word	0x3ff00000
 8008b34:	3fe90000 	.word	0x3fe90000
 8008b38:	3fd20000 	.word	0x3fd20000
 8008b3c:	00000000 	.word	0x00000000

08008b40 <__kernel_rem_pio2>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	ed2d 8b02 	vpush	{d8}
 8008b48:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008b4c:	f112 0f14 	cmn.w	r2, #20
 8008b50:	9308      	str	r3, [sp, #32]
 8008b52:	9101      	str	r1, [sp, #4]
 8008b54:	4bc4      	ldr	r3, [pc, #784]	; (8008e68 <__kernel_rem_pio2+0x328>)
 8008b56:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008b58:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b5e:	9302      	str	r3, [sp, #8]
 8008b60:	9b08      	ldr	r3, [sp, #32]
 8008b62:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b66:	bfa8      	it	ge
 8008b68:	1ed4      	subge	r4, r2, #3
 8008b6a:	9306      	str	r3, [sp, #24]
 8008b6c:	bfb2      	itee	lt
 8008b6e:	2400      	movlt	r4, #0
 8008b70:	2318      	movge	r3, #24
 8008b72:	fb94 f4f3 	sdivge	r4, r4, r3
 8008b76:	f06f 0317 	mvn.w	r3, #23
 8008b7a:	fb04 3303 	mla	r3, r4, r3, r3
 8008b7e:	eb03 0a02 	add.w	sl, r3, r2
 8008b82:	9b02      	ldr	r3, [sp, #8]
 8008b84:	9a06      	ldr	r2, [sp, #24]
 8008b86:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008e58 <__kernel_rem_pio2+0x318>
 8008b8a:	eb03 0802 	add.w	r8, r3, r2
 8008b8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008b90:	1aa7      	subs	r7, r4, r2
 8008b92:	ae22      	add	r6, sp, #136	; 0x88
 8008b94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008b98:	2500      	movs	r5, #0
 8008b9a:	4545      	cmp	r5, r8
 8008b9c:	dd13      	ble.n	8008bc6 <__kernel_rem_pio2+0x86>
 8008b9e:	9b08      	ldr	r3, [sp, #32]
 8008ba0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008e58 <__kernel_rem_pio2+0x318>
 8008ba4:	aa22      	add	r2, sp, #136	; 0x88
 8008ba6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008baa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008bae:	f04f 0800 	mov.w	r8, #0
 8008bb2:	9b02      	ldr	r3, [sp, #8]
 8008bb4:	4598      	cmp	r8, r3
 8008bb6:	dc2f      	bgt.n	8008c18 <__kernel_rem_pio2+0xd8>
 8008bb8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008bbc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008bc0:	462f      	mov	r7, r5
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	e01b      	b.n	8008bfe <__kernel_rem_pio2+0xbe>
 8008bc6:	42ef      	cmn	r7, r5
 8008bc8:	d407      	bmi.n	8008bda <__kernel_rem_pio2+0x9a>
 8008bca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008bce:	f7f7 fcb1 	bl	8000534 <__aeabi_i2d>
 8008bd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008bd6:	3501      	adds	r5, #1
 8008bd8:	e7df      	b.n	8008b9a <__kernel_rem_pio2+0x5a>
 8008bda:	ec51 0b18 	vmov	r0, r1, d8
 8008bde:	e7f8      	b.n	8008bd2 <__kernel_rem_pio2+0x92>
 8008be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008be4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008be8:	f7f7 fd0e 	bl	8000608 <__aeabi_dmul>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bf4:	f7f7 fb52 	bl	800029c <__adddf3>
 8008bf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bfc:	3601      	adds	r6, #1
 8008bfe:	9b06      	ldr	r3, [sp, #24]
 8008c00:	429e      	cmp	r6, r3
 8008c02:	f1a7 0708 	sub.w	r7, r7, #8
 8008c06:	ddeb      	ble.n	8008be0 <__kernel_rem_pio2+0xa0>
 8008c08:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008c0c:	f108 0801 	add.w	r8, r8, #1
 8008c10:	ecab 7b02 	vstmia	fp!, {d7}
 8008c14:	3508      	adds	r5, #8
 8008c16:	e7cc      	b.n	8008bb2 <__kernel_rem_pio2+0x72>
 8008c18:	9b02      	ldr	r3, [sp, #8]
 8008c1a:	aa0e      	add	r2, sp, #56	; 0x38
 8008c1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c20:	930d      	str	r3, [sp, #52]	; 0x34
 8008c22:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008c24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008c28:	9c02      	ldr	r4, [sp, #8]
 8008c2a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c2c:	00e3      	lsls	r3, r4, #3
 8008c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c30:	ab9a      	add	r3, sp, #616	; 0x268
 8008c32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008c3a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008c3e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008c40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008c44:	46c3      	mov	fp, r8
 8008c46:	46a1      	mov	r9, r4
 8008c48:	f1b9 0f00 	cmp.w	r9, #0
 8008c4c:	f1a5 0508 	sub.w	r5, r5, #8
 8008c50:	dc77      	bgt.n	8008d42 <__kernel_rem_pio2+0x202>
 8008c52:	ec47 6b10 	vmov	d0, r6, r7
 8008c56:	4650      	mov	r0, sl
 8008c58:	f000 fc0a 	bl	8009470 <scalbn>
 8008c5c:	ec57 6b10 	vmov	r6, r7, d0
 8008c60:	2200      	movs	r2, #0
 8008c62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c66:	ee10 0a10 	vmov	r0, s0
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	f7f7 fccc 	bl	8000608 <__aeabi_dmul>
 8008c70:	ec41 0b10 	vmov	d0, r0, r1
 8008c74:	f000 fb7c 	bl	8009370 <floor>
 8008c78:	4b7c      	ldr	r3, [pc, #496]	; (8008e6c <__kernel_rem_pio2+0x32c>)
 8008c7a:	ec51 0b10 	vmov	r0, r1, d0
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f7f7 fcc2 	bl	8000608 <__aeabi_dmul>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4630      	mov	r0, r6
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	f7f7 fb04 	bl	8000298 <__aeabi_dsub>
 8008c90:	460f      	mov	r7, r1
 8008c92:	4606      	mov	r6, r0
 8008c94:	f7f7 ff68 	bl	8000b68 <__aeabi_d2iz>
 8008c98:	9004      	str	r0, [sp, #16]
 8008c9a:	f7f7 fc4b 	bl	8000534 <__aeabi_i2d>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	f7f7 faf7 	bl	8000298 <__aeabi_dsub>
 8008caa:	f1ba 0f00 	cmp.w	sl, #0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	dd6d      	ble.n	8008d90 <__kernel_rem_pio2+0x250>
 8008cb4:	1e62      	subs	r2, r4, #1
 8008cb6:	ab0e      	add	r3, sp, #56	; 0x38
 8008cb8:	9d04      	ldr	r5, [sp, #16]
 8008cba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008cbe:	f1ca 0118 	rsb	r1, sl, #24
 8008cc2:	fa40 f301 	asr.w	r3, r0, r1
 8008cc6:	441d      	add	r5, r3
 8008cc8:	408b      	lsls	r3, r1
 8008cca:	1ac0      	subs	r0, r0, r3
 8008ccc:	ab0e      	add	r3, sp, #56	; 0x38
 8008cce:	9504      	str	r5, [sp, #16]
 8008cd0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008cd4:	f1ca 0317 	rsb	r3, sl, #23
 8008cd8:	fa40 fb03 	asr.w	fp, r0, r3
 8008cdc:	f1bb 0f00 	cmp.w	fp, #0
 8008ce0:	dd65      	ble.n	8008dae <__kernel_rem_pio2+0x26e>
 8008ce2:	9b04      	ldr	r3, [sp, #16]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	9304      	str	r3, [sp, #16]
 8008cea:	4615      	mov	r5, r2
 8008cec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008cf0:	4294      	cmp	r4, r2
 8008cf2:	f300 809c 	bgt.w	8008e2e <__kernel_rem_pio2+0x2ee>
 8008cf6:	f1ba 0f00 	cmp.w	sl, #0
 8008cfa:	dd07      	ble.n	8008d0c <__kernel_rem_pio2+0x1cc>
 8008cfc:	f1ba 0f01 	cmp.w	sl, #1
 8008d00:	f000 80c0 	beq.w	8008e84 <__kernel_rem_pio2+0x344>
 8008d04:	f1ba 0f02 	cmp.w	sl, #2
 8008d08:	f000 80c6 	beq.w	8008e98 <__kernel_rem_pio2+0x358>
 8008d0c:	f1bb 0f02 	cmp.w	fp, #2
 8008d10:	d14d      	bne.n	8008dae <__kernel_rem_pio2+0x26e>
 8008d12:	4632      	mov	r2, r6
 8008d14:	463b      	mov	r3, r7
 8008d16:	4956      	ldr	r1, [pc, #344]	; (8008e70 <__kernel_rem_pio2+0x330>)
 8008d18:	2000      	movs	r0, #0
 8008d1a:	f7f7 fabd 	bl	8000298 <__aeabi_dsub>
 8008d1e:	4606      	mov	r6, r0
 8008d20:	460f      	mov	r7, r1
 8008d22:	2d00      	cmp	r5, #0
 8008d24:	d043      	beq.n	8008dae <__kernel_rem_pio2+0x26e>
 8008d26:	4650      	mov	r0, sl
 8008d28:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008e60 <__kernel_rem_pio2+0x320>
 8008d2c:	f000 fba0 	bl	8009470 <scalbn>
 8008d30:	4630      	mov	r0, r6
 8008d32:	4639      	mov	r1, r7
 8008d34:	ec53 2b10 	vmov	r2, r3, d0
 8008d38:	f7f7 faae 	bl	8000298 <__aeabi_dsub>
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	460f      	mov	r7, r1
 8008d40:	e035      	b.n	8008dae <__kernel_rem_pio2+0x26e>
 8008d42:	4b4c      	ldr	r3, [pc, #304]	; (8008e74 <__kernel_rem_pio2+0x334>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	4630      	mov	r0, r6
 8008d48:	4639      	mov	r1, r7
 8008d4a:	f7f7 fc5d 	bl	8000608 <__aeabi_dmul>
 8008d4e:	f7f7 ff0b 	bl	8000b68 <__aeabi_d2iz>
 8008d52:	f7f7 fbef 	bl	8000534 <__aeabi_i2d>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	ec43 2b18 	vmov	d8, r2, r3
 8008d5e:	4b46      	ldr	r3, [pc, #280]	; (8008e78 <__kernel_rem_pio2+0x338>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	f7f7 fc51 	bl	8000608 <__aeabi_dmul>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	f7f7 fa93 	bl	8000298 <__aeabi_dsub>
 8008d72:	f7f7 fef9 	bl	8000b68 <__aeabi_d2iz>
 8008d76:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d7a:	f84b 0b04 	str.w	r0, [fp], #4
 8008d7e:	ec51 0b18 	vmov	r0, r1, d8
 8008d82:	f7f7 fa8b 	bl	800029c <__adddf3>
 8008d86:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	460f      	mov	r7, r1
 8008d8e:	e75b      	b.n	8008c48 <__kernel_rem_pio2+0x108>
 8008d90:	d106      	bne.n	8008da0 <__kernel_rem_pio2+0x260>
 8008d92:	1e63      	subs	r3, r4, #1
 8008d94:	aa0e      	add	r2, sp, #56	; 0x38
 8008d96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008d9a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008d9e:	e79d      	b.n	8008cdc <__kernel_rem_pio2+0x19c>
 8008da0:	4b36      	ldr	r3, [pc, #216]	; (8008e7c <__kernel_rem_pio2+0x33c>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	f7f7 feb6 	bl	8000b14 <__aeabi_dcmpge>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d13d      	bne.n	8008e28 <__kernel_rem_pio2+0x2e8>
 8008dac:	4683      	mov	fp, r0
 8008dae:	2200      	movs	r2, #0
 8008db0:	2300      	movs	r3, #0
 8008db2:	4630      	mov	r0, r6
 8008db4:	4639      	mov	r1, r7
 8008db6:	f7f7 fe8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	f000 80c0 	beq.w	8008f40 <__kernel_rem_pio2+0x400>
 8008dc0:	1e65      	subs	r5, r4, #1
 8008dc2:	462b      	mov	r3, r5
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	9902      	ldr	r1, [sp, #8]
 8008dc8:	428b      	cmp	r3, r1
 8008dca:	da6c      	bge.n	8008ea6 <__kernel_rem_pio2+0x366>
 8008dcc:	2a00      	cmp	r2, #0
 8008dce:	f000 8089 	beq.w	8008ee4 <__kernel_rem_pio2+0x3a4>
 8008dd2:	ab0e      	add	r3, sp, #56	; 0x38
 8008dd4:	f1aa 0a18 	sub.w	sl, sl, #24
 8008dd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 80ad 	beq.w	8008f3c <__kernel_rem_pio2+0x3fc>
 8008de2:	4650      	mov	r0, sl
 8008de4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008e60 <__kernel_rem_pio2+0x320>
 8008de8:	f000 fb42 	bl	8009470 <scalbn>
 8008dec:	ab9a      	add	r3, sp, #616	; 0x268
 8008dee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008df2:	ec57 6b10 	vmov	r6, r7, d0
 8008df6:	00ec      	lsls	r4, r5, #3
 8008df8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008dfc:	46aa      	mov	sl, r5
 8008dfe:	f1ba 0f00 	cmp.w	sl, #0
 8008e02:	f280 80d6 	bge.w	8008fb2 <__kernel_rem_pio2+0x472>
 8008e06:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008e58 <__kernel_rem_pio2+0x318>
 8008e0a:	462e      	mov	r6, r5
 8008e0c:	2e00      	cmp	r6, #0
 8008e0e:	f2c0 8104 	blt.w	800901a <__kernel_rem_pio2+0x4da>
 8008e12:	ab72      	add	r3, sp, #456	; 0x1c8
 8008e14:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008e18:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008e80 <__kernel_rem_pio2+0x340>
 8008e1c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008e20:	f04f 0800 	mov.w	r8, #0
 8008e24:	1baf      	subs	r7, r5, r6
 8008e26:	e0ea      	b.n	8008ffe <__kernel_rem_pio2+0x4be>
 8008e28:	f04f 0b02 	mov.w	fp, #2
 8008e2c:	e759      	b.n	8008ce2 <__kernel_rem_pio2+0x1a2>
 8008e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e32:	b955      	cbnz	r5, 8008e4a <__kernel_rem_pio2+0x30a>
 8008e34:	b123      	cbz	r3, 8008e40 <__kernel_rem_pio2+0x300>
 8008e36:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008e3a:	f8c8 3000 	str.w	r3, [r8]
 8008e3e:	2301      	movs	r3, #1
 8008e40:	3201      	adds	r2, #1
 8008e42:	f108 0804 	add.w	r8, r8, #4
 8008e46:	461d      	mov	r5, r3
 8008e48:	e752      	b.n	8008cf0 <__kernel_rem_pio2+0x1b0>
 8008e4a:	1acb      	subs	r3, r1, r3
 8008e4c:	f8c8 3000 	str.w	r3, [r8]
 8008e50:	462b      	mov	r3, r5
 8008e52:	e7f5      	b.n	8008e40 <__kernel_rem_pio2+0x300>
 8008e54:	f3af 8000 	nop.w
	...
 8008e64:	3ff00000 	.word	0x3ff00000
 8008e68:	08009c38 	.word	0x08009c38
 8008e6c:	40200000 	.word	0x40200000
 8008e70:	3ff00000 	.word	0x3ff00000
 8008e74:	3e700000 	.word	0x3e700000
 8008e78:	41700000 	.word	0x41700000
 8008e7c:	3fe00000 	.word	0x3fe00000
 8008e80:	08009bf8 	.word	0x08009bf8
 8008e84:	1e62      	subs	r2, r4, #1
 8008e86:	ab0e      	add	r3, sp, #56	; 0x38
 8008e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008e90:	a90e      	add	r1, sp, #56	; 0x38
 8008e92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008e96:	e739      	b.n	8008d0c <__kernel_rem_pio2+0x1cc>
 8008e98:	1e62      	subs	r2, r4, #1
 8008e9a:	ab0e      	add	r3, sp, #56	; 0x38
 8008e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ea4:	e7f4      	b.n	8008e90 <__kernel_rem_pio2+0x350>
 8008ea6:	a90e      	add	r1, sp, #56	; 0x38
 8008ea8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	e789      	b.n	8008dc6 <__kernel_rem_pio2+0x286>
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	d0fa      	beq.n	8008eb2 <__kernel_rem_pio2+0x372>
 8008ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ebe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008ec2:	446a      	add	r2, sp
 8008ec4:	3a98      	subs	r2, #152	; 0x98
 8008ec6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ec8:	9a08      	ldr	r2, [sp, #32]
 8008eca:	18e3      	adds	r3, r4, r3
 8008ecc:	18a5      	adds	r5, r4, r2
 8008ece:	aa22      	add	r2, sp, #136	; 0x88
 8008ed0:	f104 0801 	add.w	r8, r4, #1
 8008ed4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	9b04      	ldr	r3, [sp, #16]
 8008edc:	4543      	cmp	r3, r8
 8008ede:	da04      	bge.n	8008eea <__kernel_rem_pio2+0x3aa>
 8008ee0:	461c      	mov	r4, r3
 8008ee2:	e6a3      	b.n	8008c2c <__kernel_rem_pio2+0xec>
 8008ee4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e7e4      	b.n	8008eb4 <__kernel_rem_pio2+0x374>
 8008eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008ef0:	f7f7 fb20 	bl	8000534 <__aeabi_i2d>
 8008ef4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008efa:	46ab      	mov	fp, r5
 8008efc:	461c      	mov	r4, r3
 8008efe:	f04f 0900 	mov.w	r9, #0
 8008f02:	2600      	movs	r6, #0
 8008f04:	2700      	movs	r7, #0
 8008f06:	9b06      	ldr	r3, [sp, #24]
 8008f08:	4599      	cmp	r9, r3
 8008f0a:	dd06      	ble.n	8008f1a <__kernel_rem_pio2+0x3da>
 8008f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008f12:	f108 0801 	add.w	r8, r8, #1
 8008f16:	930a      	str	r3, [sp, #40]	; 0x28
 8008f18:	e7df      	b.n	8008eda <__kernel_rem_pio2+0x39a>
 8008f1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008f1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008f22:	f7f7 fb71 	bl	8000608 <__aeabi_dmul>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	f7f7 f9b5 	bl	800029c <__adddf3>
 8008f32:	f109 0901 	add.w	r9, r9, #1
 8008f36:	4606      	mov	r6, r0
 8008f38:	460f      	mov	r7, r1
 8008f3a:	e7e4      	b.n	8008f06 <__kernel_rem_pio2+0x3c6>
 8008f3c:	3d01      	subs	r5, #1
 8008f3e:	e748      	b.n	8008dd2 <__kernel_rem_pio2+0x292>
 8008f40:	ec47 6b10 	vmov	d0, r6, r7
 8008f44:	f1ca 0000 	rsb	r0, sl, #0
 8008f48:	f000 fa92 	bl	8009470 <scalbn>
 8008f4c:	ec57 6b10 	vmov	r6, r7, d0
 8008f50:	4ba0      	ldr	r3, [pc, #640]	; (80091d4 <__kernel_rem_pio2+0x694>)
 8008f52:	ee10 0a10 	vmov	r0, s0
 8008f56:	2200      	movs	r2, #0
 8008f58:	4639      	mov	r1, r7
 8008f5a:	f7f7 fddb 	bl	8000b14 <__aeabi_dcmpge>
 8008f5e:	b1f8      	cbz	r0, 8008fa0 <__kernel_rem_pio2+0x460>
 8008f60:	4b9d      	ldr	r3, [pc, #628]	; (80091d8 <__kernel_rem_pio2+0x698>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	4630      	mov	r0, r6
 8008f66:	4639      	mov	r1, r7
 8008f68:	f7f7 fb4e 	bl	8000608 <__aeabi_dmul>
 8008f6c:	f7f7 fdfc 	bl	8000b68 <__aeabi_d2iz>
 8008f70:	4680      	mov	r8, r0
 8008f72:	f7f7 fadf 	bl	8000534 <__aeabi_i2d>
 8008f76:	4b97      	ldr	r3, [pc, #604]	; (80091d4 <__kernel_rem_pio2+0x694>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f7f7 fb45 	bl	8000608 <__aeabi_dmul>
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4602      	mov	r2, r0
 8008f82:	4639      	mov	r1, r7
 8008f84:	4630      	mov	r0, r6
 8008f86:	f7f7 f987 	bl	8000298 <__aeabi_dsub>
 8008f8a:	f7f7 fded 	bl	8000b68 <__aeabi_d2iz>
 8008f8e:	1c65      	adds	r5, r4, #1
 8008f90:	ab0e      	add	r3, sp, #56	; 0x38
 8008f92:	f10a 0a18 	add.w	sl, sl, #24
 8008f96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008f9a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008f9e:	e720      	b.n	8008de2 <__kernel_rem_pio2+0x2a2>
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	f7f7 fde0 	bl	8000b68 <__aeabi_d2iz>
 8008fa8:	ab0e      	add	r3, sp, #56	; 0x38
 8008faa:	4625      	mov	r5, r4
 8008fac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008fb0:	e717      	b.n	8008de2 <__kernel_rem_pio2+0x2a2>
 8008fb2:	ab0e      	add	r3, sp, #56	; 0x38
 8008fb4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008fb8:	f7f7 fabc 	bl	8000534 <__aeabi_i2d>
 8008fbc:	4632      	mov	r2, r6
 8008fbe:	463b      	mov	r3, r7
 8008fc0:	f7f7 fb22 	bl	8000608 <__aeabi_dmul>
 8008fc4:	4b84      	ldr	r3, [pc, #528]	; (80091d8 <__kernel_rem_pio2+0x698>)
 8008fc6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008fca:	2200      	movs	r2, #0
 8008fcc:	4630      	mov	r0, r6
 8008fce:	4639      	mov	r1, r7
 8008fd0:	f7f7 fb1a 	bl	8000608 <__aeabi_dmul>
 8008fd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fd8:	4606      	mov	r6, r0
 8008fda:	460f      	mov	r7, r1
 8008fdc:	e70f      	b.n	8008dfe <__kernel_rem_pio2+0x2be>
 8008fde:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008fe2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008fe6:	f7f7 fb0f 	bl	8000608 <__aeabi_dmul>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ff2:	f7f7 f953 	bl	800029c <__adddf3>
 8008ff6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ffa:	f108 0801 	add.w	r8, r8, #1
 8008ffe:	9b02      	ldr	r3, [sp, #8]
 8009000:	4598      	cmp	r8, r3
 8009002:	dc01      	bgt.n	8009008 <__kernel_rem_pio2+0x4c8>
 8009004:	45b8      	cmp	r8, r7
 8009006:	ddea      	ble.n	8008fde <__kernel_rem_pio2+0x49e>
 8009008:	ed9d 7b06 	vldr	d7, [sp, #24]
 800900c:	ab4a      	add	r3, sp, #296	; 0x128
 800900e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009012:	ed87 7b00 	vstr	d7, [r7]
 8009016:	3e01      	subs	r6, #1
 8009018:	e6f8      	b.n	8008e0c <__kernel_rem_pio2+0x2cc>
 800901a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800901c:	2b02      	cmp	r3, #2
 800901e:	dc0b      	bgt.n	8009038 <__kernel_rem_pio2+0x4f8>
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc35      	bgt.n	8009090 <__kernel_rem_pio2+0x550>
 8009024:	d059      	beq.n	80090da <__kernel_rem_pio2+0x59a>
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	f003 0007 	and.w	r0, r3, #7
 800902c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009030:	ecbd 8b02 	vpop	{d8}
 8009034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009038:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800903a:	2b03      	cmp	r3, #3
 800903c:	d1f3      	bne.n	8009026 <__kernel_rem_pio2+0x4e6>
 800903e:	ab4a      	add	r3, sp, #296	; 0x128
 8009040:	4423      	add	r3, r4
 8009042:	9306      	str	r3, [sp, #24]
 8009044:	461c      	mov	r4, r3
 8009046:	469a      	mov	sl, r3
 8009048:	9502      	str	r5, [sp, #8]
 800904a:	9b02      	ldr	r3, [sp, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f1aa 0a08 	sub.w	sl, sl, #8
 8009052:	dc6b      	bgt.n	800912c <__kernel_rem_pio2+0x5ec>
 8009054:	46aa      	mov	sl, r5
 8009056:	f1ba 0f01 	cmp.w	sl, #1
 800905a:	f1a4 0408 	sub.w	r4, r4, #8
 800905e:	f300 8085 	bgt.w	800916c <__kernel_rem_pio2+0x62c>
 8009062:	9c06      	ldr	r4, [sp, #24]
 8009064:	2000      	movs	r0, #0
 8009066:	3408      	adds	r4, #8
 8009068:	2100      	movs	r1, #0
 800906a:	2d01      	cmp	r5, #1
 800906c:	f300 809d 	bgt.w	80091aa <__kernel_rem_pio2+0x66a>
 8009070:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009074:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009078:	f1bb 0f00 	cmp.w	fp, #0
 800907c:	f040 809b 	bne.w	80091b6 <__kernel_rem_pio2+0x676>
 8009080:	9b01      	ldr	r3, [sp, #4]
 8009082:	e9c3 5600 	strd	r5, r6, [r3]
 8009086:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800908a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800908e:	e7ca      	b.n	8009026 <__kernel_rem_pio2+0x4e6>
 8009090:	3408      	adds	r4, #8
 8009092:	ab4a      	add	r3, sp, #296	; 0x128
 8009094:	441c      	add	r4, r3
 8009096:	462e      	mov	r6, r5
 8009098:	2000      	movs	r0, #0
 800909a:	2100      	movs	r1, #0
 800909c:	2e00      	cmp	r6, #0
 800909e:	da36      	bge.n	800910e <__kernel_rem_pio2+0x5ce>
 80090a0:	f1bb 0f00 	cmp.w	fp, #0
 80090a4:	d039      	beq.n	800911a <__kernel_rem_pio2+0x5da>
 80090a6:	4602      	mov	r2, r0
 80090a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090ac:	9c01      	ldr	r4, [sp, #4]
 80090ae:	e9c4 2300 	strd	r2, r3, [r4]
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80090ba:	f7f7 f8ed 	bl	8000298 <__aeabi_dsub>
 80090be:	ae4c      	add	r6, sp, #304	; 0x130
 80090c0:	2401      	movs	r4, #1
 80090c2:	42a5      	cmp	r5, r4
 80090c4:	da2c      	bge.n	8009120 <__kernel_rem_pio2+0x5e0>
 80090c6:	f1bb 0f00 	cmp.w	fp, #0
 80090ca:	d002      	beq.n	80090d2 <__kernel_rem_pio2+0x592>
 80090cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090d0:	4619      	mov	r1, r3
 80090d2:	9b01      	ldr	r3, [sp, #4]
 80090d4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80090d8:	e7a5      	b.n	8009026 <__kernel_rem_pio2+0x4e6>
 80090da:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80090de:	eb0d 0403 	add.w	r4, sp, r3
 80090e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80090e6:	2000      	movs	r0, #0
 80090e8:	2100      	movs	r1, #0
 80090ea:	2d00      	cmp	r5, #0
 80090ec:	da09      	bge.n	8009102 <__kernel_rem_pio2+0x5c2>
 80090ee:	f1bb 0f00 	cmp.w	fp, #0
 80090f2:	d002      	beq.n	80090fa <__kernel_rem_pio2+0x5ba>
 80090f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090f8:	4619      	mov	r1, r3
 80090fa:	9b01      	ldr	r3, [sp, #4]
 80090fc:	e9c3 0100 	strd	r0, r1, [r3]
 8009100:	e791      	b.n	8009026 <__kernel_rem_pio2+0x4e6>
 8009102:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009106:	f7f7 f8c9 	bl	800029c <__adddf3>
 800910a:	3d01      	subs	r5, #1
 800910c:	e7ed      	b.n	80090ea <__kernel_rem_pio2+0x5aa>
 800910e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009112:	f7f7 f8c3 	bl	800029c <__adddf3>
 8009116:	3e01      	subs	r6, #1
 8009118:	e7c0      	b.n	800909c <__kernel_rem_pio2+0x55c>
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	e7c5      	b.n	80090ac <__kernel_rem_pio2+0x56c>
 8009120:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009124:	f7f7 f8ba 	bl	800029c <__adddf3>
 8009128:	3401      	adds	r4, #1
 800912a:	e7ca      	b.n	80090c2 <__kernel_rem_pio2+0x582>
 800912c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009130:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009134:	9b02      	ldr	r3, [sp, #8]
 8009136:	3b01      	subs	r3, #1
 8009138:	9302      	str	r3, [sp, #8]
 800913a:	4632      	mov	r2, r6
 800913c:	463b      	mov	r3, r7
 800913e:	4640      	mov	r0, r8
 8009140:	4649      	mov	r1, r9
 8009142:	f7f7 f8ab 	bl	800029c <__adddf3>
 8009146:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	4640      	mov	r0, r8
 8009150:	4649      	mov	r1, r9
 8009152:	f7f7 f8a1 	bl	8000298 <__aeabi_dsub>
 8009156:	4632      	mov	r2, r6
 8009158:	463b      	mov	r3, r7
 800915a:	f7f7 f89f 	bl	800029c <__adddf3>
 800915e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009162:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009166:	ed8a 7b00 	vstr	d7, [sl]
 800916a:	e76e      	b.n	800904a <__kernel_rem_pio2+0x50a>
 800916c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009170:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009174:	4640      	mov	r0, r8
 8009176:	4632      	mov	r2, r6
 8009178:	463b      	mov	r3, r7
 800917a:	4649      	mov	r1, r9
 800917c:	f7f7 f88e 	bl	800029c <__adddf3>
 8009180:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4640      	mov	r0, r8
 800918a:	4649      	mov	r1, r9
 800918c:	f7f7 f884 	bl	8000298 <__aeabi_dsub>
 8009190:	4632      	mov	r2, r6
 8009192:	463b      	mov	r3, r7
 8009194:	f7f7 f882 	bl	800029c <__adddf3>
 8009198:	ed9d 7b02 	vldr	d7, [sp, #8]
 800919c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80091a0:	ed84 7b00 	vstr	d7, [r4]
 80091a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091a8:	e755      	b.n	8009056 <__kernel_rem_pio2+0x516>
 80091aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80091ae:	f7f7 f875 	bl	800029c <__adddf3>
 80091b2:	3d01      	subs	r5, #1
 80091b4:	e759      	b.n	800906a <__kernel_rem_pio2+0x52a>
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	9a01      	ldr	r2, [sp, #4]
 80091ba:	601d      	str	r5, [r3, #0]
 80091bc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80091c0:	605c      	str	r4, [r3, #4]
 80091c2:	609f      	str	r7, [r3, #8]
 80091c4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80091c8:	60d3      	str	r3, [r2, #12]
 80091ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091ce:	6110      	str	r0, [r2, #16]
 80091d0:	6153      	str	r3, [r2, #20]
 80091d2:	e728      	b.n	8009026 <__kernel_rem_pio2+0x4e6>
 80091d4:	41700000 	.word	0x41700000
 80091d8:	3e700000 	.word	0x3e700000
 80091dc:	00000000 	.word	0x00000000

080091e0 <__kernel_sin>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	ed2d 8b04 	vpush	{d8-d9}
 80091e8:	eeb0 8a41 	vmov.f32	s16, s2
 80091ec:	eef0 8a61 	vmov.f32	s17, s3
 80091f0:	ec55 4b10 	vmov	r4, r5, d0
 80091f4:	b083      	sub	sp, #12
 80091f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80091fe:	9001      	str	r0, [sp, #4]
 8009200:	da06      	bge.n	8009210 <__kernel_sin+0x30>
 8009202:	ee10 0a10 	vmov	r0, s0
 8009206:	4629      	mov	r1, r5
 8009208:	f7f7 fcae 	bl	8000b68 <__aeabi_d2iz>
 800920c:	2800      	cmp	r0, #0
 800920e:	d051      	beq.n	80092b4 <__kernel_sin+0xd4>
 8009210:	4622      	mov	r2, r4
 8009212:	462b      	mov	r3, r5
 8009214:	4620      	mov	r0, r4
 8009216:	4629      	mov	r1, r5
 8009218:	f7f7 f9f6 	bl	8000608 <__aeabi_dmul>
 800921c:	4682      	mov	sl, r0
 800921e:	468b      	mov	fp, r1
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4620      	mov	r0, r4
 8009226:	4629      	mov	r1, r5
 8009228:	f7f7 f9ee 	bl	8000608 <__aeabi_dmul>
 800922c:	a341      	add	r3, pc, #260	; (adr r3, 8009334 <__kernel_sin+0x154>)
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	4680      	mov	r8, r0
 8009234:	4689      	mov	r9, r1
 8009236:	4650      	mov	r0, sl
 8009238:	4659      	mov	r1, fp
 800923a:	f7f7 f9e5 	bl	8000608 <__aeabi_dmul>
 800923e:	a33f      	add	r3, pc, #252	; (adr r3, 800933c <__kernel_sin+0x15c>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f7f7 f828 	bl	8000298 <__aeabi_dsub>
 8009248:	4652      	mov	r2, sl
 800924a:	465b      	mov	r3, fp
 800924c:	f7f7 f9dc 	bl	8000608 <__aeabi_dmul>
 8009250:	a33c      	add	r3, pc, #240	; (adr r3, 8009344 <__kernel_sin+0x164>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f7 f821 	bl	800029c <__adddf3>
 800925a:	4652      	mov	r2, sl
 800925c:	465b      	mov	r3, fp
 800925e:	f7f7 f9d3 	bl	8000608 <__aeabi_dmul>
 8009262:	a33a      	add	r3, pc, #232	; (adr r3, 800934c <__kernel_sin+0x16c>)
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f7f7 f816 	bl	8000298 <__aeabi_dsub>
 800926c:	4652      	mov	r2, sl
 800926e:	465b      	mov	r3, fp
 8009270:	f7f7 f9ca 	bl	8000608 <__aeabi_dmul>
 8009274:	a337      	add	r3, pc, #220	; (adr r3, 8009354 <__kernel_sin+0x174>)
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927a:	f7f7 f80f 	bl	800029c <__adddf3>
 800927e:	9b01      	ldr	r3, [sp, #4]
 8009280:	4606      	mov	r6, r0
 8009282:	460f      	mov	r7, r1
 8009284:	b9eb      	cbnz	r3, 80092c2 <__kernel_sin+0xe2>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4650      	mov	r0, sl
 800928c:	4659      	mov	r1, fp
 800928e:	f7f7 f9bb 	bl	8000608 <__aeabi_dmul>
 8009292:	a325      	add	r3, pc, #148	; (adr r3, 8009328 <__kernel_sin+0x148>)
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	f7f6 fffe 	bl	8000298 <__aeabi_dsub>
 800929c:	4642      	mov	r2, r8
 800929e:	464b      	mov	r3, r9
 80092a0:	f7f7 f9b2 	bl	8000608 <__aeabi_dmul>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4620      	mov	r0, r4
 80092aa:	4629      	mov	r1, r5
 80092ac:	f7f6 fff6 	bl	800029c <__adddf3>
 80092b0:	4604      	mov	r4, r0
 80092b2:	460d      	mov	r5, r1
 80092b4:	ec45 4b10 	vmov	d0, r4, r5
 80092b8:	b003      	add	sp, #12
 80092ba:	ecbd 8b04 	vpop	{d8-d9}
 80092be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c2:	4b1b      	ldr	r3, [pc, #108]	; (8009330 <__kernel_sin+0x150>)
 80092c4:	ec51 0b18 	vmov	r0, r1, d8
 80092c8:	2200      	movs	r2, #0
 80092ca:	f7f7 f99d 	bl	8000608 <__aeabi_dmul>
 80092ce:	4632      	mov	r2, r6
 80092d0:	ec41 0b19 	vmov	d9, r0, r1
 80092d4:	463b      	mov	r3, r7
 80092d6:	4640      	mov	r0, r8
 80092d8:	4649      	mov	r1, r9
 80092da:	f7f7 f995 	bl	8000608 <__aeabi_dmul>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	ec51 0b19 	vmov	r0, r1, d9
 80092e6:	f7f6 ffd7 	bl	8000298 <__aeabi_dsub>
 80092ea:	4652      	mov	r2, sl
 80092ec:	465b      	mov	r3, fp
 80092ee:	f7f7 f98b 	bl	8000608 <__aeabi_dmul>
 80092f2:	ec53 2b18 	vmov	r2, r3, d8
 80092f6:	f7f6 ffcf 	bl	8000298 <__aeabi_dsub>
 80092fa:	a30b      	add	r3, pc, #44	; (adr r3, 8009328 <__kernel_sin+0x148>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	4606      	mov	r6, r0
 8009302:	460f      	mov	r7, r1
 8009304:	4640      	mov	r0, r8
 8009306:	4649      	mov	r1, r9
 8009308:	f7f7 f97e 	bl	8000608 <__aeabi_dmul>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4630      	mov	r0, r6
 8009312:	4639      	mov	r1, r7
 8009314:	f7f6 ffc2 	bl	800029c <__adddf3>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4620      	mov	r0, r4
 800931e:	4629      	mov	r1, r5
 8009320:	f7f6 ffba 	bl	8000298 <__aeabi_dsub>
 8009324:	e7c4      	b.n	80092b0 <__kernel_sin+0xd0>
 8009326:	bf00      	nop
 8009328:	55555549 	.word	0x55555549
 800932c:	3fc55555 	.word	0x3fc55555
 8009330:	3fe00000 	.word	0x3fe00000
 8009334:	5acfd57c 	.word	0x5acfd57c
 8009338:	3de5d93a 	.word	0x3de5d93a
 800933c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009340:	3e5ae5e6 	.word	0x3e5ae5e6
 8009344:	57b1fe7d 	.word	0x57b1fe7d
 8009348:	3ec71de3 	.word	0x3ec71de3
 800934c:	19c161d5 	.word	0x19c161d5
 8009350:	3f2a01a0 	.word	0x3f2a01a0
 8009354:	1110f8a6 	.word	0x1110f8a6
 8009358:	3f811111 	.word	0x3f811111

0800935c <fabs>:
 800935c:	ec51 0b10 	vmov	r0, r1, d0
 8009360:	ee10 2a10 	vmov	r2, s0
 8009364:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009368:	ec43 2b10 	vmov	d0, r2, r3
 800936c:	4770      	bx	lr
	...

08009370 <floor>:
 8009370:	ec51 0b10 	vmov	r0, r1, d0
 8009374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009378:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800937c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009380:	2e13      	cmp	r6, #19
 8009382:	ee10 5a10 	vmov	r5, s0
 8009386:	ee10 8a10 	vmov	r8, s0
 800938a:	460c      	mov	r4, r1
 800938c:	dc32      	bgt.n	80093f4 <floor+0x84>
 800938e:	2e00      	cmp	r6, #0
 8009390:	da14      	bge.n	80093bc <floor+0x4c>
 8009392:	a333      	add	r3, pc, #204	; (adr r3, 8009460 <floor+0xf0>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f7f6 ff80 	bl	800029c <__adddf3>
 800939c:	2200      	movs	r2, #0
 800939e:	2300      	movs	r3, #0
 80093a0:	f7f7 fbc2 	bl	8000b28 <__aeabi_dcmpgt>
 80093a4:	b138      	cbz	r0, 80093b6 <floor+0x46>
 80093a6:	2c00      	cmp	r4, #0
 80093a8:	da57      	bge.n	800945a <floor+0xea>
 80093aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80093ae:	431d      	orrs	r5, r3
 80093b0:	d001      	beq.n	80093b6 <floor+0x46>
 80093b2:	4c2d      	ldr	r4, [pc, #180]	; (8009468 <floor+0xf8>)
 80093b4:	2500      	movs	r5, #0
 80093b6:	4621      	mov	r1, r4
 80093b8:	4628      	mov	r0, r5
 80093ba:	e025      	b.n	8009408 <floor+0x98>
 80093bc:	4f2b      	ldr	r7, [pc, #172]	; (800946c <floor+0xfc>)
 80093be:	4137      	asrs	r7, r6
 80093c0:	ea01 0307 	and.w	r3, r1, r7
 80093c4:	4303      	orrs	r3, r0
 80093c6:	d01f      	beq.n	8009408 <floor+0x98>
 80093c8:	a325      	add	r3, pc, #148	; (adr r3, 8009460 <floor+0xf0>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f7f6 ff65 	bl	800029c <__adddf3>
 80093d2:	2200      	movs	r2, #0
 80093d4:	2300      	movs	r3, #0
 80093d6:	f7f7 fba7 	bl	8000b28 <__aeabi_dcmpgt>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d0eb      	beq.n	80093b6 <floor+0x46>
 80093de:	2c00      	cmp	r4, #0
 80093e0:	bfbe      	ittt	lt
 80093e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80093e6:	fa43 f606 	asrlt.w	r6, r3, r6
 80093ea:	19a4      	addlt	r4, r4, r6
 80093ec:	ea24 0407 	bic.w	r4, r4, r7
 80093f0:	2500      	movs	r5, #0
 80093f2:	e7e0      	b.n	80093b6 <floor+0x46>
 80093f4:	2e33      	cmp	r6, #51	; 0x33
 80093f6:	dd0b      	ble.n	8009410 <floor+0xa0>
 80093f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80093fc:	d104      	bne.n	8009408 <floor+0x98>
 80093fe:	ee10 2a10 	vmov	r2, s0
 8009402:	460b      	mov	r3, r1
 8009404:	f7f6 ff4a 	bl	800029c <__adddf3>
 8009408:	ec41 0b10 	vmov	d0, r0, r1
 800940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009410:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009414:	f04f 33ff 	mov.w	r3, #4294967295
 8009418:	fa23 f707 	lsr.w	r7, r3, r7
 800941c:	4207      	tst	r7, r0
 800941e:	d0f3      	beq.n	8009408 <floor+0x98>
 8009420:	a30f      	add	r3, pc, #60	; (adr r3, 8009460 <floor+0xf0>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	f7f6 ff39 	bl	800029c <__adddf3>
 800942a:	2200      	movs	r2, #0
 800942c:	2300      	movs	r3, #0
 800942e:	f7f7 fb7b 	bl	8000b28 <__aeabi_dcmpgt>
 8009432:	2800      	cmp	r0, #0
 8009434:	d0bf      	beq.n	80093b6 <floor+0x46>
 8009436:	2c00      	cmp	r4, #0
 8009438:	da02      	bge.n	8009440 <floor+0xd0>
 800943a:	2e14      	cmp	r6, #20
 800943c:	d103      	bne.n	8009446 <floor+0xd6>
 800943e:	3401      	adds	r4, #1
 8009440:	ea25 0507 	bic.w	r5, r5, r7
 8009444:	e7b7      	b.n	80093b6 <floor+0x46>
 8009446:	2301      	movs	r3, #1
 8009448:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800944c:	fa03 f606 	lsl.w	r6, r3, r6
 8009450:	4435      	add	r5, r6
 8009452:	4545      	cmp	r5, r8
 8009454:	bf38      	it	cc
 8009456:	18e4      	addcc	r4, r4, r3
 8009458:	e7f2      	b.n	8009440 <floor+0xd0>
 800945a:	2500      	movs	r5, #0
 800945c:	462c      	mov	r4, r5
 800945e:	e7aa      	b.n	80093b6 <floor+0x46>
 8009460:	8800759c 	.word	0x8800759c
 8009464:	7e37e43c 	.word	0x7e37e43c
 8009468:	bff00000 	.word	0xbff00000
 800946c:	000fffff 	.word	0x000fffff

08009470 <scalbn>:
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	ec55 4b10 	vmov	r4, r5, d0
 8009476:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800947a:	4606      	mov	r6, r0
 800947c:	462b      	mov	r3, r5
 800947e:	b99a      	cbnz	r2, 80094a8 <scalbn+0x38>
 8009480:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009484:	4323      	orrs	r3, r4
 8009486:	d036      	beq.n	80094f6 <scalbn+0x86>
 8009488:	4b39      	ldr	r3, [pc, #228]	; (8009570 <scalbn+0x100>)
 800948a:	4629      	mov	r1, r5
 800948c:	ee10 0a10 	vmov	r0, s0
 8009490:	2200      	movs	r2, #0
 8009492:	f7f7 f8b9 	bl	8000608 <__aeabi_dmul>
 8009496:	4b37      	ldr	r3, [pc, #220]	; (8009574 <scalbn+0x104>)
 8009498:	429e      	cmp	r6, r3
 800949a:	4604      	mov	r4, r0
 800949c:	460d      	mov	r5, r1
 800949e:	da10      	bge.n	80094c2 <scalbn+0x52>
 80094a0:	a32b      	add	r3, pc, #172	; (adr r3, 8009550 <scalbn+0xe0>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	e03a      	b.n	800951e <scalbn+0xae>
 80094a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80094ac:	428a      	cmp	r2, r1
 80094ae:	d10c      	bne.n	80094ca <scalbn+0x5a>
 80094b0:	ee10 2a10 	vmov	r2, s0
 80094b4:	4620      	mov	r0, r4
 80094b6:	4629      	mov	r1, r5
 80094b8:	f7f6 fef0 	bl	800029c <__adddf3>
 80094bc:	4604      	mov	r4, r0
 80094be:	460d      	mov	r5, r1
 80094c0:	e019      	b.n	80094f6 <scalbn+0x86>
 80094c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80094c6:	460b      	mov	r3, r1
 80094c8:	3a36      	subs	r2, #54	; 0x36
 80094ca:	4432      	add	r2, r6
 80094cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80094d0:	428a      	cmp	r2, r1
 80094d2:	dd08      	ble.n	80094e6 <scalbn+0x76>
 80094d4:	2d00      	cmp	r5, #0
 80094d6:	a120      	add	r1, pc, #128	; (adr r1, 8009558 <scalbn+0xe8>)
 80094d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094dc:	da1c      	bge.n	8009518 <scalbn+0xa8>
 80094de:	a120      	add	r1, pc, #128	; (adr r1, 8009560 <scalbn+0xf0>)
 80094e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094e4:	e018      	b.n	8009518 <scalbn+0xa8>
 80094e6:	2a00      	cmp	r2, #0
 80094e8:	dd08      	ble.n	80094fc <scalbn+0x8c>
 80094ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80094ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80094f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80094f6:	ec45 4b10 	vmov	d0, r4, r5
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009500:	da19      	bge.n	8009536 <scalbn+0xc6>
 8009502:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009506:	429e      	cmp	r6, r3
 8009508:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800950c:	dd0a      	ble.n	8009524 <scalbn+0xb4>
 800950e:	a112      	add	r1, pc, #72	; (adr r1, 8009558 <scalbn+0xe8>)
 8009510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e2      	bne.n	80094de <scalbn+0x6e>
 8009518:	a30f      	add	r3, pc, #60	; (adr r3, 8009558 <scalbn+0xe8>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	f7f7 f873 	bl	8000608 <__aeabi_dmul>
 8009522:	e7cb      	b.n	80094bc <scalbn+0x4c>
 8009524:	a10a      	add	r1, pc, #40	; (adr r1, 8009550 <scalbn+0xe0>)
 8009526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0b8      	beq.n	80094a0 <scalbn+0x30>
 800952e:	a10e      	add	r1, pc, #56	; (adr r1, 8009568 <scalbn+0xf8>)
 8009530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009534:	e7b4      	b.n	80094a0 <scalbn+0x30>
 8009536:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800953a:	3236      	adds	r2, #54	; 0x36
 800953c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009540:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009544:	4620      	mov	r0, r4
 8009546:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <scalbn+0x108>)
 8009548:	2200      	movs	r2, #0
 800954a:	e7e8      	b.n	800951e <scalbn+0xae>
 800954c:	f3af 8000 	nop.w
 8009550:	c2f8f359 	.word	0xc2f8f359
 8009554:	01a56e1f 	.word	0x01a56e1f
 8009558:	8800759c 	.word	0x8800759c
 800955c:	7e37e43c 	.word	0x7e37e43c
 8009560:	8800759c 	.word	0x8800759c
 8009564:	fe37e43c 	.word	0xfe37e43c
 8009568:	c2f8f359 	.word	0xc2f8f359
 800956c:	81a56e1f 	.word	0x81a56e1f
 8009570:	43500000 	.word	0x43500000
 8009574:	ffff3cb0 	.word	0xffff3cb0
 8009578:	3c900000 	.word	0x3c900000

0800957c <_init>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	bf00      	nop
 8009580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009582:	bc08      	pop	{r3}
 8009584:	469e      	mov	lr, r3
 8009586:	4770      	bx	lr

08009588 <_fini>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr
